import { DrawLayerController } from './controller/DrawLayerController';
import { ElementController } from './controller/ElementController';
import { EDrawToolCommand } from './config/Command';
import { EOperationAction } from './config/OperationProfile';
import { InputInfo } from './tool/InputInfo';
import { px2mm as _px2mm, mm2px as _mm2px, getHashIden as _getHashIden } from './utils/Utils';
import { TDOMGetBoundingClientRectResult, TColorRGBAJSON, TDrawLayerItemResult, TResouceProfileChangedData, TSystemConfigProfileChangedData, TCanvasProfileChangedData, TCanvasExportFileData, TCanvasImportFileData, TOpeartionProfileChangedData } from './types/Common';
import { SystemConfig } from './controller/SystemConfig';
import { CanvasController } from './controller/CanvasController';
import { MessageTool } from './tool/MessageTool';
import { OperationController } from './controller/OperationController';
import { ECommandAction } from './tool/history/command/Config';
import { TElementJSONBaseData } from './types/ElementViewType';
import { calcRealPhysicsPosition as _calcRealPhysicsPosition } from './utils/CalcRealPhysicsPosition';
export type InputInfoData = InputInfo;
export type DOMGetBoundingClientRectResult = TDOMGetBoundingClientRectResult;
export type ColorRGBAJSON = TColorRGBAJSON;
export type DrawLayerItemResult = TDrawLayerItemResult;
export type ElementJSONBaseData = TElementJSONBaseData;
export type ResouceProfileChangedData = TResouceProfileChangedData;
export type CanvasProfileChangedData = TCanvasProfileChangedData;
export type SystemConfigProfileChangedData = TSystemConfigProfileChangedData;
export type OpeartionProfileChangedData = TOpeartionProfileChangedData;
export type CanvasExportFileData = TCanvasExportFileData;
export type CanvasImportFileData = TCanvasImportFileData;
export * from './utils/Color';
export * from './geometry/Decimals';
export * from './geometry/DoubleKit';
export * from './geometry/Angles';
export * from './geometry/Vector2';
export * from './geometry/Vector3';
export * from './geometry/Matrix';
export * from './geometry/Matrix3';
export * from './geometry/Matrix4';
export declare const px2mm: typeof _px2mm;
export declare const mm2px: typeof _mm2px;
export declare const getHashIden: typeof _getHashIden;
export declare const calcRealPhysicsPosition: typeof _calcRealPhysicsPosition;
export declare const messageTool: MessageTool;
export declare const IS_DESKTOP: boolean;
export declare const DRAW_TOOL_COMMAND: {
    BLANK_DROP: EDrawToolCommand.BLANK_DROP;
    LINE: EDrawToolCommand.LINE;
    CIRCLE: EDrawToolCommand.CIRCLE;
};
export declare const OPERATION_ACRION: {
    HISTORY_UNDO: EOperationAction.HISTORY_UNDO;
    HISTORY_REDO: EOperationAction.HISTORY_REDO;
    CREATE_ELEMENT: EOperationAction.CREATE_ELEMENT;
    MODIFY_ELEMENT: EOperationAction.MODIFY_ELEMENT;
    DELETE_ELEMENT: EOperationAction.DELETE_ELEMENT;
    REFRESH_DRAWLAYER: EOperationAction.REFRESH_DRAWLAYER;
    CREATED_DRAWLAYER: EOperationAction.CREATED_DRAWLAYER;
    DELETED_DRAWLAYER: EOperationAction.DELETED_DRAWLAYER;
    SWITCH_ACTIVE_DRAWLAYER: EOperationAction.SWITCH_ACTIVE_DRAWLAYER;
    CLEAR_ALL_ACTIVE_DRAWLAYER: EOperationAction.CLEAR_ALL_ACTIVE_DRAWLAYER;
    CLEAR_ALL_DRAWLAYER_ELEMENTS: EOperationAction.CLEAR_ALL_DRAWLAYER_ELEMENTS;
    IMPORT_DATASTR_START: EOperationAction.IMPORT_DATASTR_START;
    IMPORT_DATASTR_COMPLETE: EOperationAction.IMPORT_DATASTR_COMPLETE;
    EXPORT_DATASTR_START: EOperationAction.IMPORT_DATASTR_START;
    EXPORT_DATASTR_COMPLETE: EOperationAction.IMPORT_DATASTR_COMPLETE;
};
export declare const HistroyCommandAction: {
    MODIFY: ECommandAction.MODIFY;
    ADD: ECommandAction.ADD;
    DELETE: ECommandAction.DELETE;
};
export declare class WebCanvas {
    private _canvasElement;
    private _drawToolManager;
    constructor(canvasElement: HTMLCanvasElement);
    init(): Promise<boolean>;
    get drawLayerController(): DrawLayerController;
    get elementController(): ElementController;
    get canvasController(): CanvasController;
    get operationController(): OperationController;
    getCanvasRect(): TDOMGetBoundingClientRectResult;
    getDPI(): [number, number];
    getSystemConfig(): TSystemConfigProfileChangedData;
    getCanvasProfileData(): TCanvasProfileChangedData;
    applySystemConfig(key: keyof SystemConfig, value: any): void;
    setDrawToolCommand(type: EDrawToolCommand): void;
    forceRender(): void;
    createExportFileData(): TCanvasExportFileData;
    refreshByImportFileData(fileData: TCanvasImportFileData): void;
    addInputsChangedListener(callback: (data: InputInfo) => void): void;
    addResourceChangedListener(callback: (data: TResouceProfileChangedData) => void): void;
    addCanvasProfileChangedListener(callback: (data: TCanvasProfileChangedData) => void): void;
    addSystemProfileListener(callback: (data: TSystemConfigProfileChangedData) => void): void;
    addOperationProfileListener(callback: (data: TOpeartionProfileChangedData) => void): void;
}
export declare function createCanvasElement(containerElement: HTMLElement): HTMLCanvasElement;
