import { Plane } from '../../common/Plane';
import { Line } from '../primitives/Line';
import { TElementAssistCircleJSONData, TElementAssistLineJSONData, TElementCircleJSONData, TElementLineJSONData } from '../../../types/ElementViewType';
import { AssistLine } from '../primitives/AssistLine';
import { SceneCanvas } from '../SceneCanvas';
import { Circle } from '../primitives/Circle';
import { AssistCircle } from '../primitives/AssistCircle';
export declare class PlaneCanvas<T extends SceneCanvas> extends Plane<T> {
    private _linesProfile;
    private _circlesProfile;
    private _assistLinesProfile;
    private _assistCirclesProfile;
    constructor(scene: T, planeId: string);
    protected get linesProfile(): Map<string, Line>;
    protected get circlesProfile(): Map<string, Circle>;
    protected get assistLinesProfile(): Map<string, AssistLine>;
    protected get assistCirclesProfile(): Map<string, AssistCircle>;
    addLineItems(targetSet: Map<string, TElementLineJSONData>): void;
    updateLineItems(targetSet: Map<string, TElementLineJSONData>): void;
    deleteLineItems(targetIds: Set<string>): void;
    addCircleItems(targetSet: Map<string, TElementCircleJSONData>): void;
    updateCircleItems(targetSet: Map<string, TElementCircleJSONData>): void;
    deleteCircleItems(targetIds: Set<string>): void;
    addAssistLineItems(targetPrimitives: Map<string, TElementAssistLineJSONData>): void;
    updateAssistLineItems(targetPrimitives: Map<string, TElementAssistLineJSONData>): void;
    deleteAssistLineItems(targetIds: Set<string>): void;
    addAssistCircleItems(targetPrimitives: Map<string, TElementAssistCircleJSONData>): void;
    updateAssistCircleItems(targetPrimitives: Map<string, TElementAssistCircleJSONData>): void;
    deleteAssistCircleItems(targetIds: Set<string>): void;
    render(ctx: CanvasRenderingContext2D): void;
}
