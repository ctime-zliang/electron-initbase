(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(this, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/$instance/d2FreeTest/index.ts":
/*!*******************************************!*\
  !*** ./src/$instance/d2FreeTest/index.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DEFAULT_BLANK_DRALAYER_ID: () => (/* binding */ DEFAULT_BLANK_DRALAYER_ID),
/* harmony export */   main: () => (/* binding */ main)
/* harmony export */ });
/* harmony import */ var _Main__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Main */ "./src/Main.ts");
/* harmony import */ var _public_initEventHandle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../public/initEventHandle */ "./src/$instance/public/initEventHandle.ts");
/* harmony import */ var _public_initFloatPanel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../public/initFloatPanel */ "./src/$instance/public/initFloatPanel.ts");
/* harmony import */ var _public_initWebCanvas__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../public/initWebCanvas */ "./src/$instance/public/initWebCanvas.ts");
/* harmony import */ var _modules_drawTestLine__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./modules/drawTestLine */ "./src/$instance/d2FreeTest/modules/drawTestLine.ts");
/* harmony import */ var _utils_initWebSystemConfig__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/initWebSystemConfig */ "./src/$instance/d2FreeTest/utils/initWebSystemConfig.ts");

var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};






const DEFAULT_BLANK_DRALAYER_ID = "$0";
function initMessageHandle(webCanvas) {
  return __async(this, null, function* () {
    const { drawLayerController, d2ElementController, operationController } = webCanvas;
    _Main__WEBPACK_IMPORTED_MODULE_0__.messageTool.messageBus.subscribe("SUB_TOGGLE_DRAW_MODE", (params) => {
      const { cmd } = params;
      switch (cmd) {
        case "DRAW_D2LINE": {
          webCanvas.setDrawToolCommand(_Main__WEBPACK_IMPORTED_MODULE_0__.DRAW_TOOL_COMMAND.D2LINE);
          break;
        }
        case "DRWA_D2CIRCLE": {
          webCanvas.setDrawToolCommand(_Main__WEBPACK_IMPORTED_MODULE_0__.DRAW_TOOL_COMMAND.D2CIRCLE);
          break;
        }
        case "DRWA_D2ARC": {
          webCanvas.setDrawToolCommand(_Main__WEBPACK_IMPORTED_MODULE_0__.DRAW_TOOL_COMMAND.D2ARC);
          break;
        }
        case "DRWA_D2TEXT": {
          webCanvas.setDrawToolCommand(_Main__WEBPACK_IMPORTED_MODULE_0__.DRAW_TOOL_COMMAND.D2TEXT);
          break;
        }
        default:
      }
    });
    _Main__WEBPACK_IMPORTED_MODULE_0__.messageTool.messageBus.subscribe("SUB_TOGGLE_USRACTION_MODE", (params) => __async(this, null, function* () {
      const { cmd, content, targetItemId } = params;
      switch (cmd) {
        case "SET_SELECTION": {
          webCanvas.setDrawToolCommand(_Main__WEBPACK_IMPORTED_MODULE_0__.DRAW_TOOL_COMMAND.BLANK_DROP);
          break;
        }
        case "DO_COPY": {
          console.log(`\u6682\u672A\u652F\u6301\u6B64\u64CD\u4F5C.`);
          break;
        }
        case "DO_UNDO": {
          operationController.undo();
          break;
        }
        case "DO_REDO": {
          operationController.redo();
          break;
        }
        case "EXPORT": {
          console.log(`\u6682\u672A\u652F\u6301\u6B64\u64CD\u4F5C.`);
          break;
        }
        case "IMPORT": {
          console.log(`\u6682\u672A\u652F\u6301\u6B64\u64CD\u4F5C.`);
          break;
        }
        case "DO_DELETE": {
          const allSelectedElementIds = d2ElementController.getAllSelectedD2ElementShapeResults().map((item) => {
            return item.elementItemId;
          });
          const commandGroupId = String(performance.now());
          allSelectedElementIds.forEach((idItem) => {
            operationController.addHistroyRecord(idItem, _Main__WEBPACK_IMPORTED_MODULE_0__.HISTORY_CMD_ACTION.DELETE, commandGroupId);
            d2ElementController.deleteD2ElementShapeItemById(idItem);
          });
          allSelectedElementIds.length = 0;
          break;
        }
        case "CLEAR_DRAWLAYER_ELEMENTS": {
          drawLayerController.deleteDrawLayerElements(targetItemId);
          break;
        }
        case "CLEAR_CANVAS_ELEMENTS": {
          const allDrawLayers = drawLayerController.getAllDrawLayerResults();
          allDrawLayers.forEach((item) => {
            drawLayerController.deleteDrawLayerElements(item.layerItemId);
          });
          break;
        }
        case "RESET_CANVAS": {
          operationController.resetCanvasContent().then(() => {
            console.log(`\u5DF2\u6E05\u9664\u753B\u5E03\u6240\u6709\u5185\u5BB9.`);
          });
          break;
        }
        default:
      }
    }));
    _Main__WEBPACK_IMPORTED_MODULE_0__.messageTool.messageBus.subscribe("SUB_TOGGLE_DRAWLAYER_MODE", (params) => {
      const { cmd, targetItemId } = params;
      switch (cmd) {
        case "CREATE_DRAWLAYER_ITEM": {
          drawLayerController.createDrawLayerShapeItem(`drawlayer-${(0,_Main__WEBPACK_IMPORTED_MODULE_0__.getHashIden)(5)}`);
          break;
        }
        case "DELETE_DRAWLAYER_ITEM": {
          if (targetItemId) {
            drawLayerController.deleteDrawLayerShapeItem(targetItemId);
          }
          break;
        }
        case "SWITCH_ACTIVE_DRAWLAYER_ITEM": {
          if (targetItemId === DEFAULT_BLANK_DRALAYER_ID) {
            drawLayerController.clearAllDrawLayersSelectedStatus();
          } else {
            drawLayerController.setActiveDrawLayerShapeItem(targetItemId);
          }
          break;
        }
        default:
      }
    });
    webCanvas.addOperationProfileListener((params) => __async(this, null, function* () {
      const { action, allDrawLayers, targetItemId } = params;
      const disabledItems = [];
      if (!operationController.hasHistoryUndoRecord()) {
        disabledItems.push("DO_UNDO");
      }
      if (!operationController.hasHistoryRedoRecord()) {
        disabledItems.push("DO_REDO");
      }
      yield _Main__WEBPACK_IMPORTED_MODULE_0__.messageTool.windowMessageBridge.asyncRequest(
        `SVR_UPDATE_OP_PANLEITEM_STATUS`,
        {
          disabledItems
        },
        window.top
      );
      switch (action) {
        case _Main__WEBPACK_IMPORTED_MODULE_0__.OPERATION_ACRION.CREATED_DRAWLAYER: {
          yield _Main__WEBPACK_IMPORTED_MODULE_0__.messageTool.windowMessageBridge.asyncRequest(
            `SVR_UPDATE_DRAWLAYER_LIST`,
            {
              allDrawLayers,
              selectedDrawLayerItemId: typeof targetItemId === "undefined" ? DEFAULT_BLANK_DRALAYER_ID : targetItemId
            },
            window.top
          );
          break;
        }
        case _Main__WEBPACK_IMPORTED_MODULE_0__.OPERATION_ACRION.REFRESH_DRAWLAYER: {
          const allDrawLayers2 = drawLayerController.getAllDrawLayerResults();
          yield _Main__WEBPACK_IMPORTED_MODULE_0__.messageTool.windowMessageBridge.asyncRequest(
            `SVR_UPDATE_DRAWLAYER_LIST`,
            {
              allDrawLayers: allDrawLayers2,
              selectedDrawLayerItemId: typeof targetItemId === "undefined" ? DEFAULT_BLANK_DRALAYER_ID : targetItemId
            },
            window.top
          );
          break;
        }
        case _Main__WEBPACK_IMPORTED_MODULE_0__.OPERATION_ACRION.DELETED_DRAWLAYER: {
          yield _Main__WEBPACK_IMPORTED_MODULE_0__.messageTool.windowMessageBridge.asyncRequest(
            `SVR_UPDATE_DRAWLAYER_LIST`,
            {
              allDrawLayers,
              selectedDrawLayerItemId: typeof targetItemId === "undefined" ? DEFAULT_BLANK_DRALAYER_ID : targetItemId
            },
            window.top
          );
          break;
        }
        case _Main__WEBPACK_IMPORTED_MODULE_0__.OPERATION_ACRION.SWITCH_ACTIVE_DRAWLAYER: {
          const allDrawLayers2 = drawLayerController.getAllDrawLayerResults();
          yield _Main__WEBPACK_IMPORTED_MODULE_0__.messageTool.windowMessageBridge.asyncRequest(
            `SVR_UPDATE_DRAWLAYER_LIST`,
            {
              allDrawLayers: allDrawLayers2,
              selectedDrawLayerItemId: typeof targetItemId === "undefined" ? DEFAULT_BLANK_DRALAYER_ID : targetItemId
            },
            window.top
          );
          break;
        }
        case _Main__WEBPACK_IMPORTED_MODULE_0__.OPERATION_ACRION.CLEAR_ALL_ACTIVE_DRAWLAYER: {
          const allDrawLayers2 = drawLayerController.getAllDrawLayerResults();
          yield _Main__WEBPACK_IMPORTED_MODULE_0__.messageTool.windowMessageBridge.asyncRequest(
            `SVR_UPDATE_DRAWLAYER_LIST`,
            {
              allDrawLayers: allDrawLayers2,
              selectedDrawLayerItemId: DEFAULT_BLANK_DRALAYER_ID
            },
            window.top
          );
          break;
        }
        case _Main__WEBPACK_IMPORTED_MODULE_0__.OPERATION_ACRION.CLEAR_ALL_DRAWLAYER_ELEMENTS: {
          break;
        }
        default:
      }
    }));
  });
}
function main() {
  (0,_public_initWebCanvas__WEBPACK_IMPORTED_MODULE_3__.initWebCanvas)().then((webCanvas) => __async(this, null, function* () {
    (0,_utils_initWebSystemConfig__WEBPACK_IMPORTED_MODULE_5__.initWebSystemConfig)(webCanvas);
    (0,_public_initFloatPanel__WEBPACK_IMPORTED_MODULE_2__.initFloatPanel)(webCanvas);
    (0,_public_initEventHandle__WEBPACK_IMPORTED_MODULE_1__.initEventHandle)(webCanvas);
    initMessageHandle(webCanvas);
    _Main__WEBPACK_IMPORTED_MODULE_0__.Helper.FloatPanel.canvasProfilePanelControl.update(webCanvas.getCanvasProfileData());
    _Main__WEBPACK_IMPORTED_MODULE_0__.Helper.FloatPanel.canvasIntensiveProfilePanelControl.update(webCanvas.getCanvasIntensiveProfileData());
    yield _Main__WEBPACK_IMPORTED_MODULE_0__.messageTool.windowMessageBridge.asyncRequest(`SVR_CANVAS_READY`, { ready: true }, window.top);
    const drawLayerController = webCanvas.drawLayerController;
    const layerItemAId = drawLayerController.createDrawLayerShapeItem(`Test Layer A`);
    (0,_modules_drawTestLine__WEBPACK_IMPORTED_MODULE_4__.drawTestLineItem2)(webCanvas, layerItemAId);
    console.log(webCanvas);
  }));
}


/***/ }),

/***/ "./src/$instance/d2FreeTest/modules/drawTestLine.ts":
/*!**********************************************************!*\
  !*** ./src/$instance/d2FreeTest/modules/drawTestLine.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   drawRandomTestLines: () => (/* binding */ drawRandomTestLines),
/* harmony export */   drawTestLineItem: () => (/* binding */ drawTestLineItem),
/* harmony export */   drawTestLineItem2: () => (/* binding */ drawTestLineItem2),
/* harmony export */   drawTestLines: () => (/* binding */ drawTestLines)
/* harmony export */ });
/* harmony import */ var _Main__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../Main */ "./src/Main.ts");


function getRandomInArea(min = 0, max = Number.MAX_SAFE_INTEGER) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}
function drawTestLineItem(webCanvas, layerItemId) {
  const { d2ElementController, operationController } = webCanvas;
  const drawLayerController = webCanvas.drawLayerController;
  const layerItemAId = layerItemId || drawLayerController.createDrawLayerShapeItem(`TestLine Layer A`);
  const shapeElementItemId = d2ElementController.createD2LineElementShapeItem(layerItemAId, 0, 0, 60, 0, 5);
  d2ElementController.setD2ElementShapeItemStrokeColor(shapeElementItemId, _Main__WEBPACK_IMPORTED_MODULE_0__.Color.RED);
  d2ElementController.bindD2ElementShapeItemEvent(
    shapeElementItemId,
    _Main__WEBPACK_IMPORTED_MODULE_0__.POINT_EVENT_NAME.POINTER_DOWN,
    (elementItemId, eventId) => {
      console.log(d2ElementController.getD2ElementShapeItemJSONData(elementItemId));
    }
  );
}
function drawTestLineItem2(webCanvas, layerItemId) {
  const { d2ElementController, operationController } = webCanvas;
  const drawLayerController = webCanvas.drawLayerController;
  const layerItemAId = layerItemId || drawLayerController.createDrawLayerShapeItem(`TestLine Layer A`);
  const shapeElementItemId1 = d2ElementController.createD2LineElementShapeItem(layerItemAId, 0, 0, 60, 0, 5, _Main__WEBPACK_IMPORTED_MODULE_0__.Color.RED);
  (0,_Main__WEBPACK_IMPORTED_MODULE_0__.nextFrameTick)(() => {
    const shapeElementItemId2_1 = d2ElementController.createD2LineElementShapeItem(layerItemAId, 0, 20, 60, 20, 5, _Main__WEBPACK_IMPORTED_MODULE_0__.Color.RED);
    const shapeElementItemId2_2 = d2ElementController.createD2LineElementShapeItem(layerItemAId, 80, 20, 140, 20, 5, _Main__WEBPACK_IMPORTED_MODULE_0__.Color.RED);
    (0,_Main__WEBPACK_IMPORTED_MODULE_0__.nextFrameTick)(() => {
      const shapeElementItemId3 = d2ElementController.createD2LineElementShapeItem(layerItemAId, 0, 40, 60, 40, 5, _Main__WEBPACK_IMPORTED_MODULE_0__.Color.RED);
      (0,_Main__WEBPACK_IMPORTED_MODULE_0__.nextFrameTick)(() => {
        const shapeElementItemId4 = d2ElementController.createD2LineElementShapeItem(layerItemAId, 0, 60, 60, 60, 5, _Main__WEBPACK_IMPORTED_MODULE_0__.Color.RED);
        (0,_Main__WEBPACK_IMPORTED_MODULE_0__.nextFrameTick)(() => {
          d2ElementController.deleteD2ElementShapeItemById(shapeElementItemId2_1);
        }, 300);
      }, 300);
    }, 300);
  }, 1e3);
}
function drawTestLines(webCanvas, layerItemId) {
  const ids = [];
  const { d2ElementController, operationController } = webCanvas;
  const drawLayerController = webCanvas.drawLayerController;
  const layerItemAId = layerItemId || drawLayerController.createDrawLayerShapeItem(`TestLine Layer A`);
  const allCount = 1;
  const DISTX = 10;
  const DISTY = 10;
  const W = 5;
  const H = 50;
  const rowSize = 20;
  let ri = 0;
  let ci = -1;
  for (let i = 0; i < allCount; i++) {
    ci++;
    if (i >= (ri + 1) * rowSize) {
      ri++;
      ci = 0;
    }
    const sx = -100 + DISTX * (ci - 1) + 20;
    const sy = 50 - ri * (H + DISTY);
    const ex = -100 + DISTX * (ci - 1);
    const ey = 50 - ri * (H + DISTY) - H;
    const shapeElementItemId = d2ElementController.createD2LineElementShapeItem(layerItemAId, sx, sy, ex, ey, W);
    d2ElementController.setD2ElementShapeItemStrokeColor(shapeElementItemId, _Main__WEBPACK_IMPORTED_MODULE_0__.Color.RED);
    const jsonData = d2ElementController.getD2ElementShapeItemJSONData(shapeElementItemId);
    console.log(jsonData);
    ids.push(shapeElementItemId);
  }
}
function drawRandomTestLines(webCanvas) {
  const __start = performance.now();
  const count = 1e3;
  const W = 2;
  const { d2ElementController, operationController } = webCanvas;
  const drawLayerController = webCanvas.drawLayerController;
  const layerItemAId = drawLayerController.createDrawLayerShapeItem(`Random Test-Line Layer A`);
  for (let i = 0; i < count; i++) {
    const sx = getRandomInArea(-125, 125);
    const sy = getRandomInArea(-125, 125);
    const ex = getRandomInArea(-125, 125);
    const ey = getRandomInArea(-125, 125);
    const shapeElementItemId = d2ElementController.createD2LineElementShapeItem(layerItemAId, sx, sy, ex, ey, W, _Main__WEBPACK_IMPORTED_MODULE_0__.Color.RED);
  }
  const __end = performance.now();
  console.log(__end - __start);
}


/***/ }),

/***/ "./src/$instance/d2FreeTest/utils/initWebSystemConfig.ts":
/*!***************************************************************!*\
  !*** ./src/$instance/d2FreeTest/utils/initWebSystemConfig.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   initWebSystemConfig: () => (/* binding */ initWebSystemConfig)
/* harmony export */ });

function initWebSystemConfig(webCanvas) {
  const systemConfig = webCanvas.getSystemConfig();
  console.log(systemConfig);
}


/***/ }),

/***/ "./src/$instance/d2SimpleClock/index.ts":
/*!**********************************************!*\
  !*** ./src/$instance/d2SimpleClock/index.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DEFAULT_BLANK_DRALAYER_ID: () => (/* binding */ DEFAULT_BLANK_DRALAYER_ID),
/* harmony export */   main: () => (/* binding */ main)
/* harmony export */ });
/* harmony import */ var _Main__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Main */ "./src/Main.ts");
/* harmony import */ var _public_initEventHandle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../public/initEventHandle */ "./src/$instance/public/initEventHandle.ts");
/* harmony import */ var _public_initFloatPanel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../public/initFloatPanel */ "./src/$instance/public/initFloatPanel.ts");
/* harmony import */ var _public_initWebCanvas__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../public/initWebCanvas */ "./src/$instance/public/initWebCanvas.ts");
/* harmony import */ var _modules_planeClock__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./modules/planeClock */ "./src/$instance/d2SimpleClock/modules/planeClock.ts");
/* harmony import */ var _utils_initWebSystemConfig__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/initWebSystemConfig */ "./src/$instance/d2SimpleClock/utils/initWebSystemConfig.ts");

var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};






const DEFAULT_BLANK_DRALAYER_ID = "$0";
function initMessageHandle(webCanvas) {
  return __async(this, null, function* () {
    const { drawLayerController, d2ElementController, operationController } = webCanvas;
    webCanvas.addOperationProfileListener((params) => __async(this, null, function* () {
      const { action, allDrawLayers, targetItemId } = params;
    }));
  });
}
function main() {
  (0,_public_initWebCanvas__WEBPACK_IMPORTED_MODULE_3__.initWebCanvas)().then((webCanvas) => __async(this, null, function* () {
    (0,_utils_initWebSystemConfig__WEBPACK_IMPORTED_MODULE_5__.initWebSystemConfig)(webCanvas);
    (0,_public_initFloatPanel__WEBPACK_IMPORTED_MODULE_2__.initFloatPanel)(webCanvas);
    (0,_public_initEventHandle__WEBPACK_IMPORTED_MODULE_1__.initEventHandle)(webCanvas);
    initMessageHandle(webCanvas);
    _Main__WEBPACK_IMPORTED_MODULE_0__.Helper.FloatPanel.canvasProfilePanelControl.update(webCanvas.getCanvasProfileData());
    _Main__WEBPACK_IMPORTED_MODULE_0__.Helper.FloatPanel.canvasIntensiveProfilePanelControl.update(webCanvas.getCanvasIntensiveProfileData());
    yield _Main__WEBPACK_IMPORTED_MODULE_0__.messageTool.windowMessageBridge.asyncRequest(`SVR_CANVAS_READY`, { ready: true }, window.top);
    (0,_modules_planeClock__WEBPACK_IMPORTED_MODULE_4__.drawPlaneClockInit)(webCanvas);
    console.log(webCanvas);
  }));
}


/***/ }),

/***/ "./src/$instance/d2SimpleClock/modules/planeClock.ts":
/*!***********************************************************!*\
  !*** ./src/$instance/d2SimpleClock/modules/planeClock.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   drawPlaneClockInit: () => (/* binding */ drawPlaneClockInit)
/* harmony export */ });
/* harmony import */ var _engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../engine/config/PrimitiveProfile */ "./src/engine/config/PrimitiveProfile.ts");
/* harmony import */ var _Main__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../Main */ "./src/Main.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ "./src/$instance/d2SimpleClock/modules/utils.ts");




const RUN_PROFILE = {
  isShowSecondHand: true,
  isShowMinuteHand: true,
  isShowHourHand: true,
  isShowMinuteScaleLine: true,
  isShowHourScaleLine: true,
  isShowScaleText: true,
  isShowRipple: true,
  isShowDateTime: true,
  /* ... */
  baseLength: 0,
  outCircleRadius: 0,
  /* ... */
  scaleFontFamily: "auto",
  scaleTextVertexs: [],
  /* ... */
  nowTimeStamp: 0,
  lastTimeStamp: 0,
  distTimeStamp: 0
};
const RIPPLE_PROFILE = {
  maxRadius: 0,
  radius: 0,
  duration: 2e3,
  speed: 0
};
function drawPlaneClock(webCanvas, timeStamp, layerItemId1, layerItemId2) {
  RUN_PROFILE.nowTimeStamp = timeStamp;
  RUN_PROFILE.distTimeStamp = RUN_PROFILE.nowTimeStamp - RUN_PROFILE.lastTimeStamp;
  RUN_PROFILE.lastTimeStamp = RUN_PROFILE.nowTimeStamp;
  const { drawLayerController, d2TextController, d2ElementController } = webCanvas;
  drawLayerController.deleteDrawLayerElements(layerItemId1);
  drawLayerController.deleteDrawLayerElements(layerItemId2);
  const timeString = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.formatDates)();
  const nowHours = new Date().getHours();
  const nowMinutes = new Date().getMinutes();
  const nowSeconds = new Date().getSeconds();
  const nowMilliSeconds = new Date().getMilliseconds();
  const totalMillSecOfHou = nowHours % 12 * 60 * 60 * 1e3 + nowMinutes * 60 * 1e3 + nowSeconds * 1e3 + nowMilliSeconds * 1;
  const totalMillSecOfMin = nowMinutes * 60 * 1e3 + nowSeconds * 1e3 + nowMilliSeconds * 1;
  const totalMillSecOfSec = nowSeconds * 1e3 + nowMilliSeconds * 1;
  const rotationOfHou = totalMillSecOfHou * -_Main__WEBPACK_IMPORTED_MODULE_1__.Angles.degreeToRadian(360 / 12 / 60 / 60 / 1e3);
  const rotationOfMin = totalMillSecOfMin * -_Main__WEBPACK_IMPORTED_MODULE_1__.Angles.degreeToRadian(360 / 60 / 60 / 1e3);
  const rotationOfSec = totalMillSecOfSec * -_Main__WEBPACK_IMPORTED_MODULE_1__.Angles.degreeToRadian(360 / 60 / 1e3);
  const outCircleRadius1 = RUN_PROFILE.outCircleRadius;
  const outCircleRadius2 = RUN_PROFILE.outCircleRadius - 2;
  const outCircleElementId1 = d2ElementController.createD2CircleElementShapeItem(layerItemId1, 0, 0, outCircleRadius1, 0.5);
  d2ElementController.setD2ElementShapeItemStrokeColor(outCircleElementId1, _Main__WEBPACK_IMPORTED_MODULE_1__.Color.createByAlpha(0.7, _Main__WEBPACK_IMPORTED_MODULE_1__.Color.GOLDEN));
  d2ElementController.setD2ElementShapeItemName(outCircleElementId1, `\u5916\u5C42\u5927\u5706 1`);
  const outCircleElementId2 = d2ElementController.createD2CircleElementShapeItem(layerItemId1, 0, 0, outCircleRadius2, 0.5);
  d2ElementController.setD2ElementShapeItemStrokeColor(outCircleElementId2, _Main__WEBPACK_IMPORTED_MODULE_1__.Color.GOLDEN);
  d2ElementController.setD2ElementShapeItemName(outCircleElementId2, `\u5916\u5C42\u5927\u5706 2`);
  if (RUN_PROFILE.isShowScaleText && RUN_PROFILE.scaleTextVertexs.length >= 12) {
    const baseEndPosition = new _Main__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, outCircleRadius2 * 0.84, 0);
    for (let i = 0; i < RUN_PROFILE.scaleTextVertexs.length; i++) {
      const { d2textVertexData } = RUN_PROFILE.scaleTextVertexs[i];
      const rotationMatrix42 = _Main__WEBPACK_IMPORTED_MODULE_1__.CanvasMatrix4.setRotate(-_Main__WEBPACK_IMPORTED_MODULE_1__.Angles.degreeToRadian(30 * (i + 1)), new _Main__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 0, 1));
      const endPosition2 = baseEndPosition.multiplyMatrix4(rotationMatrix42);
      d2TextController.createD2TextElementItemByVertexData(
        layerItemId1,
        d2textVertexData.vertexDataArray,
        endPosition2.x - (d2textVertexData.bbox2.maxX - d2textVertexData.bbox2.minX) / 2,
        endPosition2.y - (d2textVertexData.bbox2.maxY - d2textVertexData.bbox2.minY) / 2,
        _Main__WEBPACK_IMPORTED_MODULE_1__.Color.GREEN_YELLOW,
        1,
        null
      );
    }
  }
  if (RUN_PROFILE.isShowDateTime) {
    d2TextController.createD2TextElementItem(
      layerItemId1,
      -RUN_PROFILE.outCircleRadius / 12 * 4.5,
      -RUN_PROFILE.outCircleRadius * 0.45,
      timeString,
      RUN_PROFILE.scaleFontFamily,
      _engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_0__.ED2FontStyle.ITALIC,
      RUN_PROFILE.outCircleRadius / 12,
      100,
      _Main__WEBPACK_IMPORTED_MODULE_1__.Color.GOLDEN
    );
  }
  if (RUN_PROFILE.isShowRipple) {
    RIPPLE_PROFILE.radius += RUN_PROFILE.distTimeStamp * RIPPLE_PROFILE.speed;
    if (RIPPLE_PROFILE.radius > RIPPLE_PROFILE.maxRadius) {
      RIPPLE_PROFILE.radius = 0;
    }
    const rippleRadiusDist = RIPPLE_PROFILE.maxRadius - RIPPLE_PROFILE.radius;
    const setRippleCircleFillColorAlpha = 0.25 * (rippleRadiusDist / RIPPLE_PROFILE.maxRadius);
    const setRippleCircleStrokeColorAlpha = 0.25 * (rippleRadiusDist / RIPPLE_PROFILE.maxRadius);
    const rippleCircleElementId = d2ElementController.createD2CircleElementShapeItem(layerItemId1, 0, 0, RIPPLE_PROFILE.radius, 0.3);
    d2ElementController.setD2ElementShapeItemStrokeColor(
      rippleCircleElementId,
      new _Main__WEBPACK_IMPORTED_MODULE_1__.Color(_Main__WEBPACK_IMPORTED_MODULE_1__.Color.YELLOW_GREEN.r, _Main__WEBPACK_IMPORTED_MODULE_1__.Color.YELLOW_GREEN.g, _Main__WEBPACK_IMPORTED_MODULE_1__.Color.YELLOW_GREEN.b, setRippleCircleStrokeColorAlpha)
    );
    d2ElementController.setD2ElementShapeItemFillColor(
      rippleCircleElementId,
      new _Main__WEBPACK_IMPORTED_MODULE_1__.Color(_Main__WEBPACK_IMPORTED_MODULE_1__.Color.YELLOW_GREEN.r, _Main__WEBPACK_IMPORTED_MODULE_1__.Color.YELLOW_GREEN.g, _Main__WEBPACK_IMPORTED_MODULE_1__.Color.YELLOW_GREEN.b, setRippleCircleFillColorAlpha)
    );
    d2ElementController.setD2ElementShapeItemName(rippleCircleElementId, `\u6CE2\u7EB9\u5706`);
  }
  if (RUN_PROFILE.isShowHourScaleLine) {
    for (let i = 1; i <= 12; i++) {
      const baseStartPosition = new _Main__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 0, 0);
      const baseEndPosition = new _Main__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 8, 0);
      const translateMatrix4 = _Main__WEBPACK_IMPORTED_MODULE_1__.CanvasMatrix4.setTranslate(new _Main__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, outCircleRadius2 - 8, 0));
      const rotationMatrix42 = _Main__WEBPACK_IMPORTED_MODULE_1__.CanvasMatrix4.setRotate(-_Main__WEBPACK_IMPORTED_MODULE_1__.Angles.degreeToRadian(30 * i), new _Main__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 0, 1));
      const startPosition2 = baseStartPosition.multiplyMatrix4(translateMatrix4.multiply4(rotationMatrix42));
      const endPosition2 = baseEndPosition.multiplyMatrix4(translateMatrix4.multiply4(rotationMatrix42));
      const lineElementId2 = d2ElementController.createD2LineElementShapeItem(
        layerItemId1,
        startPosition2.x,
        startPosition2.y,
        endPosition2.x,
        endPosition2.y,
        1
      );
      let setColor = _Main__WEBPACK_IMPORTED_MODULE_1__.Color.GOLDEN;
      if (nowSeconds === i * 5 - 1 && nowMilliSeconds >= 900 || nowSeconds === i * 5 && nowMilliSeconds <= 150) {
        setColor = _Main__WEBPACK_IMPORTED_MODULE_1__.Color.ORIGIN;
      }
      d2ElementController.setD2ElementShapeItemStrokeColor(lineElementId2, setColor);
      d2ElementController.setD2ElementShapeItemLineCap(lineElementId2, _Main__WEBPACK_IMPORTED_MODULE_1__.CANVAS_LINE_CAP.SQUARE);
      d2ElementController.setD2ElementShapeItemName(lineElementId2, `\u65F6\u949F\u523B\u5EA6 ${i}`);
    }
  }
  if (RUN_PROFILE.isShowMinuteScaleLine) {
    for (let i = 1; i <= 60; i++) {
      if (i % 5 === 0) {
        continue;
      }
      const baseStartPosition = new _Main__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 0, 0);
      const baseEndPosition = new _Main__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 5, 0);
      const translateMatrix4 = _Main__WEBPACK_IMPORTED_MODULE_1__.CanvasMatrix4.setTranslate(new _Main__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, outCircleRadius2 - 5, 0));
      const rotationMatrix42 = _Main__WEBPACK_IMPORTED_MODULE_1__.CanvasMatrix4.setRotate(-_Main__WEBPACK_IMPORTED_MODULE_1__.Angles.degreeToRadian(6 * i), new _Main__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 0, 1));
      const startPosition2 = baseStartPosition.multiplyMatrix4(translateMatrix4.multiply4(rotationMatrix42));
      const endPosition2 = baseEndPosition.multiplyMatrix4(translateMatrix4.multiply4(rotationMatrix42));
      const lineElementId2 = d2ElementController.createD2LineElementShapeItem(
        layerItemId1,
        startPosition2.x,
        startPosition2.y,
        endPosition2.x,
        endPosition2.y,
        0.5
      );
      let setColor = _Main__WEBPACK_IMPORTED_MODULE_1__.Color.GOLDEN;
      if (nowSeconds === i - 1 && nowMilliSeconds >= 900 || nowSeconds === i && nowMilliSeconds <= 150) {
        setColor = _Main__WEBPACK_IMPORTED_MODULE_1__.Color.ORIGIN;
      }
      d2ElementController.setD2ElementShapeItemStrokeColor(lineElementId2, setColor);
      d2ElementController.setD2ElementShapeItemLineCap(lineElementId2, _Main__WEBPACK_IMPORTED_MODULE_1__.CANVAS_LINE_CAP.SQUARE);
      d2ElementController.setD2ElementShapeItemName(lineElementId2, `\u5206\u949F\u523B\u5EA6 ${i}`);
    }
  }
  let rotationMatrix4 = null;
  let startPosition = null;
  let endPosition = null;
  let lineElementId = null;
  if (RUN_PROFILE.isShowHourHand) {
    rotationMatrix4 = _Main__WEBPACK_IMPORTED_MODULE_1__.CanvasMatrix4.setRotate(rotationOfHou, new _Main__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 0, 1));
    startPosition = new _Main__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 0, 0).multiplyMatrix4(rotationMatrix4);
    endPosition = new _Main__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, outCircleRadius2 - 40, 0).multiplyMatrix4(rotationMatrix4);
    lineElementId = d2ElementController.createD2LineElementShapeItem(
      layerItemId2,
      startPosition.x,
      startPosition.y,
      endPosition.x,
      endPosition.y,
      3.5
    );
    d2ElementController.setD2ElementShapeItemStrokeColor(lineElementId, _Main__WEBPACK_IMPORTED_MODULE_1__.Color.GREEN);
    d2ElementController.setD2ElementShapeItemName(lineElementId, `\u65F6\u9488`);
    rotationMatrix4 = _Main__WEBPACK_IMPORTED_MODULE_1__.CanvasMatrix4.setRotate(rotationOfHou + Math.PI, new _Main__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 0, 1));
    startPosition = new _Main__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 0, 0).multiplyMatrix4(rotationMatrix4);
    endPosition = new _Main__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 18, 0).multiplyMatrix4(rotationMatrix4);
    lineElementId = d2ElementController.createD2LineElementShapeItem(
      layerItemId2,
      startPosition.x,
      startPosition.y,
      endPosition.x,
      endPosition.y,
      3.5
    );
    d2ElementController.setD2ElementShapeItemStrokeColor(lineElementId, _Main__WEBPACK_IMPORTED_MODULE_1__.Color.GREEN);
    d2ElementController.setD2ElementShapeItemName(lineElementId, `\u65F6\u9488\u5C3E`);
  }
  if (RUN_PROFILE.isShowMinuteHand) {
    rotationMatrix4 = _Main__WEBPACK_IMPORTED_MODULE_1__.CanvasMatrix4.setRotate(rotationOfMin, new _Main__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 0, 1));
    startPosition = new _Main__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 0, 0).multiplyMatrix4(rotationMatrix4);
    endPosition = new _Main__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, outCircleRadius2 - 25, 0).multiplyMatrix4(rotationMatrix4);
    lineElementId = d2ElementController.createD2LineElementShapeItem(
      layerItemId2,
      startPosition.x,
      startPosition.y,
      endPosition.x,
      endPosition.y,
      3.5
    );
    d2ElementController.setD2ElementShapeItemStrokeColor(lineElementId, _Main__WEBPACK_IMPORTED_MODULE_1__.Color.YELLOW);
    d2ElementController.setD2ElementShapeItemName(lineElementId, `\u5206\u9488`);
    rotationMatrix4 = _Main__WEBPACK_IMPORTED_MODULE_1__.CanvasMatrix4.setRotate(rotationOfMin + Math.PI, new _Main__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 0, 1));
    startPosition = new _Main__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 0, 0).multiplyMatrix4(rotationMatrix4);
    endPosition = new _Main__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 25, 0).multiplyMatrix4(rotationMatrix4);
    lineElementId = d2ElementController.createD2LineElementShapeItem(
      layerItemId2,
      startPosition.x,
      startPosition.y,
      endPosition.x,
      endPosition.y,
      3.5
    );
    d2ElementController.setD2ElementShapeItemStrokeColor(lineElementId, _Main__WEBPACK_IMPORTED_MODULE_1__.Color.YELLOW);
    d2ElementController.setD2ElementShapeItemName(lineElementId, `\u5206\u9488\u5C3E`);
  }
  if (RUN_PROFILE.isShowSecondHand) {
    rotationMatrix4 = _Main__WEBPACK_IMPORTED_MODULE_1__.CanvasMatrix4.setRotate(rotationOfSec, new _Main__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 0, 1));
    startPosition = new _Main__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 0, 0).multiplyMatrix4(rotationMatrix4);
    endPosition = new _Main__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, outCircleRadius2 - 10, 0).multiplyMatrix4(rotationMatrix4);
    lineElementId = d2ElementController.createD2LineElementShapeItem(
      layerItemId2,
      startPosition.x,
      startPosition.y,
      endPosition.x,
      endPosition.y,
      2.5
    );
    d2ElementController.setD2ElementShapeItemStrokeColor(lineElementId, _Main__WEBPACK_IMPORTED_MODULE_1__.Color.RED);
    d2ElementController.setD2ElementShapeItemName(lineElementId, `\u79D2\u9488`);
    rotationMatrix4 = _Main__WEBPACK_IMPORTED_MODULE_1__.CanvasMatrix4.setRotate(rotationOfSec + Math.PI, new _Main__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 0, 1));
    startPosition = new _Main__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 0, 0).multiplyMatrix4(rotationMatrix4);
    endPosition = new _Main__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 32, 0).multiplyMatrix4(rotationMatrix4);
    lineElementId = d2ElementController.createD2LineElementShapeItem(
      layerItemId2,
      startPosition.x,
      startPosition.y,
      endPosition.x,
      endPosition.y,
      2.5
    );
    d2ElementController.setD2ElementShapeItemStrokeColor(lineElementId, _Main__WEBPACK_IMPORTED_MODULE_1__.Color.RED);
    d2ElementController.setD2ElementShapeItemName(lineElementId, `\u79D2\u9488\u5C3E`);
  }
  const centerCircleElementItem1 = d2ElementController.createD2CircleElementShapeItem(layerItemId2, 0, 0, 4, 0.5);
  d2ElementController.setD2ElementShapeItemStrokeColor(centerCircleElementItem1, _Main__WEBPACK_IMPORTED_MODULE_1__.Color.ORIGIN);
  d2ElementController.setD2ElementShapeItemFillColor(centerCircleElementItem1, _Main__WEBPACK_IMPORTED_MODULE_1__.Color.ORIGIN);
  d2ElementController.setD2ElementShapeItemName(centerCircleElementItem1, `\u4E2D\u5FC3\u5916\u5706`);
  const centerCircleElementItem2 = d2ElementController.createD2CircleElementShapeItem(layerItemId2, 0, 0, 2, 0.5);
  d2ElementController.setD2ElementShapeItemStrokeColor(centerCircleElementItem2, _Main__WEBPACK_IMPORTED_MODULE_1__.Color.GOLDEN);
  d2ElementController.setD2ElementShapeItemFillColor(centerCircleElementItem2, _Main__WEBPACK_IMPORTED_MODULE_1__.Color.GOLDEN);
  d2ElementController.setD2ElementShapeItemName(centerCircleElementItem2, `\u4E2D\u5FC3\u5185\u5706`);
  window.requestAnimationFrame((timeStamp2) => {
    drawPlaneClock(webCanvas, timeStamp2, layerItemId1, layerItemId2);
  });
}
function createTextVertexData(d2TextController) {
  const allTexts = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"];
  for (let i = 0; i < allTexts.length; i++) {
    d2TextController.createD2TextVertexDataItem(allTexts[i], RUN_PROFILE.scaleFontFamily, _Main__WEBPACK_IMPORTED_MODULE_1__.D2FontStyle.NORMAL, RUN_PROFILE.outCircleRadius / 7).then((d2textVertexData) => {
      RUN_PROFILE.scaleTextVertexs.push({
        textContent: allTexts[i],
        d2textVertexData
      });
    });
  }
}
function drawPlaneClockInit(webCanvas) {
  const { d2ElementController, d2TextController, drawLayerController } = webCanvas;
  const clockLayerItemId1 = drawLayerController.createDrawLayerShapeItem(`Layer Clock1`);
  const clockLayerItemId2 = drawLayerController.createDrawLayerShapeItem(`Layer Clock2`);
  drawLayerController.clearAllDrawLayersSelectedStatus();
  const DPI = webCanvas.getDPI();
  const canvasRect = webCanvas.getCanvasRect();
  const isWidthLess = canvasRect.width < canvasRect.height;
  const shorterSideSize = isWidthLess ? canvasRect.width : canvasRect.height;
  const shorterSideSizePhysics = (0,_Main__WEBPACK_IMPORTED_MODULE_1__.px2mm)(+shorterSideSize, isWidthLess ? DPI[0] : DPI[1]);
  RUN_PROFILE.baseLength = shorterSideSizePhysics / 2 * 0.7;
  RUN_PROFILE.outCircleRadius = RUN_PROFILE.baseLength + 5;
  RIPPLE_PROFILE.maxRadius = RUN_PROFILE.outCircleRadius;
  RIPPLE_PROFILE.speed = RIPPLE_PROFILE.maxRadius / RIPPLE_PROFILE.duration;
  createTextVertexData(d2TextController);
  window.requestAnimationFrame((timeStamp) => {
    RUN_PROFILE.lastTimeStamp = timeStamp;
    drawPlaneClock(webCanvas, timeStamp, clockLayerItemId1, clockLayerItemId2);
  });
}


/***/ }),

/***/ "./src/$instance/d2SimpleClock/modules/utils.ts":
/*!******************************************************!*\
  !*** ./src/$instance/d2SimpleClock/modules/utils.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   formatDates: () => (/* binding */ formatDates)
/* harmony export */ });

const formatDates = (date = new Date(), format = "yyyy-MM-dd HH:ii:ss") => {
  let o = {
    "M+": date.getMonth() + 1,
    "d+": date.getDate(),
    "H+": date.getHours(),
    "h+": date.getHours(),
    "i+": date.getMinutes(),
    "s+": date.getSeconds(),
    "q+": Math.floor((date.getMonth() + 3) / 3),
    S: date.getMilliseconds()
  };
  if (/(y+)/.test(format)) {
    format = format.replace(RegExp.$1, (date.getFullYear() + "").substr(4 - RegExp.$1.length));
  }
  for (let k in o) {
    if (new RegExp("(" + k + ")").test(format)) {
      format = format.replace(RegExp.$1, RegExp.$1.length == 1 ? o[k] : ("00" + o[k]).substr(("" + o[k]).length));
    }
  }
  return format;
};


/***/ }),

/***/ "./src/$instance/d2SimpleClock/utils/initWebSystemConfig.ts":
/*!******************************************************************!*\
  !*** ./src/$instance/d2SimpleClock/utils/initWebSystemConfig.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   initWebSystemConfig: () => (/* binding */ initWebSystemConfig)
/* harmony export */ });

function initWebSystemConfig(webCanvas) {
  const systemConfig = webCanvas.getSystemConfig();
  webCanvas.setSystemConfig("Interactive", "enableCanvasSelection", false);
  webCanvas.setSystemConfig("CanvasAidedDesign", "enableAxis", false);
  webCanvas.setSystemConfig("CanvasAidedDesign", "enableGridDot", true);
  webCanvas.setSystemConfig("CanvasAidedDesign", "enableGrid", true);
  webCanvas.setSystemConfig("CanvasAidedDesign", "enableMultiGrid", true);
  console.log(systemConfig);
}


/***/ }),

/***/ "./src/$instance/public/initEventHandle.ts":
/*!*************************************************!*\
  !*** ./src/$instance/public/initEventHandle.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   initEventHandle: () => (/* binding */ initEventHandle)
/* harmony export */ });
/* harmony import */ var _Main__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Main */ "./src/Main.ts");


function initEventHandle(webCanvas) {
  const { canvasController, operationController } = webCanvas;
  webCanvas.addInputsChangedListener((data) => {
    _Main__WEBPACK_IMPORTED_MODULE_0__.Helper.FloatPanel.inputsPanelControl.update(data);
  });
  webCanvas.addCanvasProfileChangedListener((data) => {
    _Main__WEBPACK_IMPORTED_MODULE_0__.Helper.FloatPanel.canvasProfilePanelControl.update(data);
  });
  webCanvas.addCanvasIntensiveProfileChangedListener((data) => {
    _Main__WEBPACK_IMPORTED_MODULE_0__.Helper.FloatPanel.canvasIntensiveProfilePanelControl.update(data);
  });
  webCanvas.addSystemProfileListener((data) => {
    console.warn(`webCanvas.addSystemProfileListener`, data);
  });
}


/***/ }),

/***/ "./src/$instance/public/initFloatPanel.ts":
/*!************************************************!*\
  !*** ./src/$instance/public/initFloatPanel.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   initFloatPanel: () => (/* binding */ initFloatPanel)
/* harmony export */ });
/* harmony import */ var _Main__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Main */ "./src/Main.ts");


function initFloatPanel(webCanvas) {
  const floatPanelElement = _Main__WEBPACK_IMPORTED_MODULE_0__.Helper.FloatPanel.createContainer(document.body);
  _Main__WEBPACK_IMPORTED_MODULE_0__.Helper.FloatPanel.inputsPanelControl.appendTo(floatPanelElement);
  _Main__WEBPACK_IMPORTED_MODULE_0__.Helper.FloatPanel.canvasProfilePanelControl.appendTo(floatPanelElement);
  _Main__WEBPACK_IMPORTED_MODULE_0__.Helper.FloatPanel.canvasIntensiveProfilePanelControl.appendTo(floatPanelElement);
  _Main__WEBPACK_IMPORTED_MODULE_0__.Helper.FloatPanel.btnsControl.appendTo(floatPanelElement);
  _Main__WEBPACK_IMPORTED_MODULE_0__.Helper.FloatPanel.btnsControl.event({
    resetCanvasStatusClickCallback() {
      console.warn(`will reset canvas status.`);
      webCanvas.resetCanvasStatus();
    }
  });
}


/***/ }),

/***/ "./src/$instance/public/initWebCanvas.ts":
/*!***********************************************!*\
  !*** ./src/$instance/public/initWebCanvas.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   initWebCanvas: () => (/* binding */ initWebCanvas)
/* harmony export */ });
/* harmony import */ var _Main__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Main */ "./src/Main.ts");

var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

function initWebCanvas() {
  return __async(this, null, function* () {
    const canvasContainer = document.getElementById("canvasContainer");
    const webCanvas = new _Main__WEBPACK_IMPORTED_MODULE_0__.WebCanvas((0,_Main__WEBPACK_IMPORTED_MODULE_0__.createCanvasElement)(canvasContainer));
    yield webCanvas.init();
    return webCanvas;
  });
}


/***/ }),

/***/ "./src/Constant.ts":
/*!*************************!*\
  !*** ./src/Constant.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   adsorption: () => (/* binding */ adsorption),
/* harmony export */   canvasController: () => (/* binding */ canvasController),
/* harmony export */   d2ElementController: () => (/* binding */ d2ElementController),
/* harmony export */   d2TextController: () => (/* binding */ d2TextController),
/* harmony export */   drawLayerController: () => (/* binding */ drawLayerController),
/* harmony export */   dropDragTool: () => (/* binding */ dropDragTool),
/* harmony export */   environment: () => (/* binding */ environment),
/* harmony export */   filterController: () => (/* binding */ filterController),
/* harmony export */   fpsCount: () => (/* binding */ fpsCount),
/* harmony export */   globalIdenManager: () => (/* binding */ globalIdenManager),
/* harmony export */   handlerControl: () => (/* binding */ handlerControl),
/* harmony export */   historyManager: () => (/* binding */ historyManager),
/* harmony export */   messageTool: () => (/* binding */ messageTool),
/* harmony export */   modifyController: () => (/* binding */ modifyController),
/* harmony export */   operationController: () => (/* binding */ operationController),
/* harmony export */   rtree: () => (/* binding */ rtree),
/* harmony export */   rtreeService: () => (/* binding */ rtreeService),
/* harmony export */   selectManager: () => (/* binding */ selectManager),
/* harmony export */   systemConfig: () => (/* binding */ systemConfig),
/* harmony export */   textFontService: () => (/* binding */ textFontService)
/* harmony export */ });
/* harmony import */ var _tool_GlobalIdenManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tool/GlobalIdenManager */ "./src/tool/GlobalIdenManager.ts");
/* harmony import */ var _controller_D2ElementController__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./controller/D2ElementController */ "./src/controller/D2ElementController.ts");
/* harmony import */ var _controller_DrawLayerController__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./controller/DrawLayerController */ "./src/controller/DrawLayerController.ts");
/* harmony import */ var _presenter_ModifyController__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./presenter/ModifyController */ "./src/presenter/ModifyController.ts");
/* harmony import */ var _controller_Environment__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./controller/Environment */ "./src/controller/Environment.ts");
/* harmony import */ var _tool_common_DropDragTool__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./tool/common/DropDragTool */ "./src/tool/common/DropDragTool.ts");
/* harmony import */ var _controller_SelectManage__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./controller/SelectManage */ "./src/controller/SelectManage.ts");
/* harmony import */ var _controller_FilterController__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./controller/FilterController */ "./src/controller/FilterController.ts");
/* harmony import */ var _tool_selection_HandlerControl__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./tool/selection/HandlerControl */ "./src/tool/selection/HandlerControl.ts");
/* harmony import */ var _modules_RtreeService__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./modules/RtreeService */ "./src/modules/RtreeService.ts");
/* harmony import */ var _tool_Adsorption__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./tool/Adsorption */ "./src/tool/Adsorption.ts");
/* harmony import */ var _controller_CanvasController__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./controller/CanvasController */ "./src/controller/CanvasController.ts");
/* harmony import */ var _tool_MessageTool__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./tool/MessageTool */ "./src/tool/MessageTool.ts");
/* harmony import */ var _tool_history_HistoryManager__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./tool/history/HistoryManager */ "./src/tool/history/HistoryManager.ts");
/* harmony import */ var _controller_OperationController__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./controller/OperationController */ "./src/controller/OperationController.ts");
/* harmony import */ var _controller_systemConfig_SystemConfig__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./controller/systemConfig/SystemConfig */ "./src/controller/systemConfig/SystemConfig.ts");
/* harmony import */ var _utils_FPSCount__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./utils/FPSCount */ "./src/utils/FPSCount.ts");
/* harmony import */ var _geometry_rtree2_Rtree__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./geometry/rtree2/Rtree */ "./src/geometry/rtree2/Rtree.ts");
/* harmony import */ var _modules_textFontService_TextFontService__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./modules/textFontService/TextFontService */ "./src/modules/textFontService/TextFontService.ts");
/* harmony import */ var _controller_D2TextController__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./controller/D2TextController */ "./src/controller/D2TextController.ts");





















const fpsCount = new _utils_FPSCount__WEBPACK_IMPORTED_MODULE_16__.FPSCount(200);
const messageTool = new _tool_MessageTool__WEBPACK_IMPORTED_MODULE_12__.MessageTool();
const globalIdenManager = new _tool_GlobalIdenManager__WEBPACK_IMPORTED_MODULE_0__.GlobalIdenManager();
const rtree = new _geometry_rtree2_Rtree__WEBPACK_IMPORTED_MODULE_17__.RTree(20);
const historyManager = new _tool_history_HistoryManager__WEBPACK_IMPORTED_MODULE_13__.HistoryManager(Number.MAX_SAFE_INTEGER);
const operationController = new _controller_OperationController__WEBPACK_IMPORTED_MODULE_14__.OperationController();
const d2ElementController = new _controller_D2ElementController__WEBPACK_IMPORTED_MODULE_1__.D2ElementController();
const d2TextController = new _controller_D2TextController__WEBPACK_IMPORTED_MODULE_19__.D2TextController();
const drawLayerController = new _controller_DrawLayerController__WEBPACK_IMPORTED_MODULE_2__.DrawLayerController();
const canvasController = new _controller_CanvasController__WEBPACK_IMPORTED_MODULE_11__.CanvasController();
const filterController = new _controller_FilterController__WEBPACK_IMPORTED_MODULE_7__.FilterController();
const selectManager = new _controller_SelectManage__WEBPACK_IMPORTED_MODULE_6__.SelectManager();
const modifyController = new _presenter_ModifyController__WEBPACK_IMPORTED_MODULE_3__.ModifyController();
const environment = new _controller_Environment__WEBPACK_IMPORTED_MODULE_4__.Environment();
const systemConfig = new _controller_systemConfig_SystemConfig__WEBPACK_IMPORTED_MODULE_15__.SystemConfig();
const rtreeService = new _modules_RtreeService__WEBPACK_IMPORTED_MODULE_9__.RtreeService();
const textFontService = new _modules_textFontService_TextFontService__WEBPACK_IMPORTED_MODULE_18__.TextFontService();
const dropDragTool = new _tool_common_DropDragTool__WEBPACK_IMPORTED_MODULE_5__.DropDragTool();
const adsorption = new _tool_Adsorption__WEBPACK_IMPORTED_MODULE_10__.Adsorption();
const handlerControl = new _tool_selection_HandlerControl__WEBPACK_IMPORTED_MODULE_8__.HandlerControl();


/***/ }),

/***/ "./src/Main.ts":
/*!*********************!*\
  !*** ./src/Main.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Angles: () => (/* reexport safe */ _engine_common_math_Angles__WEBPACK_IMPORTED_MODULE_20__.Angles),
/* harmony export */   BBox2: () => (/* reexport safe */ _engine_common_geometry_bbox_BBox2__WEBPACK_IMPORTED_MODULE_32__.BBox2),
/* harmony export */   CANVAS_LINE_CAP: () => (/* binding */ CANVAS_LINE_CAP),
/* harmony export */   CanvasMatrix4: () => (/* reexport safe */ _engine_common_geometry_matrix_CanvasMatrix4__WEBPACK_IMPORTED_MODULE_29__.CanvasMatrix4),
/* harmony export */   Color: () => (/* reexport safe */ _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_18__.Color),
/* harmony export */   D2ArcTransitions: () => (/* reexport safe */ _engine_common_geometry_shapes_D2ArcTransitions__WEBPACK_IMPORTED_MODULE_31__.D2ArcTransitions),
/* harmony export */   D2CrossRelationShips: () => (/* reexport safe */ _engine_common_geometry_shapes_D2CrossRelationShips__WEBPACK_IMPORTED_MODULE_30__.D2CrossRelationShips),
/* harmony export */   D2ElementType: () => (/* binding */ D2ElementType),
/* harmony export */   D2FontStyle: () => (/* binding */ D2FontStyle),
/* harmony export */   DRAW_TOOL_COMMAND: () => (/* binding */ DRAW_TOOL_COMMAND),
/* harmony export */   Decimals: () => (/* reexport safe */ _engine_common_math_Decimals__WEBPACK_IMPORTED_MODULE_19__.Decimals),
/* harmony export */   DoubleKit: () => (/* reexport safe */ _engine_common_math_Doublekit__WEBPACK_IMPORTED_MODULE_23__.DoubleKit),
/* harmony export */   EEulerOrder: () => (/* reexport safe */ _engine_common_geometry_Euler__WEBPACK_IMPORTED_MODULE_21__.EEulerOrder),
/* harmony export */   Euler: () => (/* reexport safe */ _engine_common_geometry_Euler__WEBPACK_IMPORTED_MODULE_21__.Euler),
/* harmony export */   HISTORY_CMD_ACTION: () => (/* binding */ HISTORY_CMD_ACTION),
/* harmony export */   Helper: () => (/* binding */ Helper),
/* harmony export */   IS_DESKTOP: () => (/* binding */ IS_DESKTOP),
/* harmony export */   Matrix: () => (/* reexport safe */ _engine_common_geometry_matrix_Matrix__WEBPACK_IMPORTED_MODULE_26__.Matrix),
/* harmony export */   Matrix3: () => (/* reexport safe */ _engine_common_geometry_matrix_Matrix3__WEBPACK_IMPORTED_MODULE_27__.Matrix3),
/* harmony export */   Matrix4: () => (/* reexport safe */ _engine_common_geometry_matrix_Matrix4__WEBPACK_IMPORTED_MODULE_28__.Matrix4),
/* harmony export */   OPERATION_ACRION: () => (/* binding */ OPERATION_ACRION),
/* harmony export */   POINT_EVENT_NAME: () => (/* binding */ POINT_EVENT_NAME),
/* harmony export */   Quaternion: () => (/* reexport safe */ _engine_common_geometry_Quaternion__WEBPACK_IMPORTED_MODULE_22__.Quaternion),
/* harmony export */   SWEEP: () => (/* binding */ SWEEP),
/* harmony export */   Vector2: () => (/* reexport safe */ _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_24__.Vector2),
/* harmony export */   Vector3: () => (/* reexport safe */ _engine_common_geometry_vector_Vector3__WEBPACK_IMPORTED_MODULE_25__.Vector3),
/* harmony export */   WebCanvas: () => (/* binding */ WebCanvas),
/* harmony export */   calcRealPhysicsPosition: () => (/* binding */ calcRealPhysicsPosition),
/* harmony export */   createCanvasElement: () => (/* binding */ createCanvasElement),
/* harmony export */   getHashIden: () => (/* binding */ getHashIden),
/* harmony export */   isSupportWebGPU: () => (/* binding */ isSupportWebGPU),
/* harmony export */   messageTool: () => (/* binding */ messageTool),
/* harmony export */   mm2px: () => (/* binding */ mm2px),
/* harmony export */   nextFrameTick: () => (/* binding */ nextFrameTick),
/* harmony export */   px2mm: () => (/* binding */ px2mm)
/* harmony export */ });
/* harmony import */ var _Constant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Constant */ "./src/Constant.ts");
/* harmony import */ var _view_ViewInit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./view/ViewInit */ "./src/view/ViewInit.ts");
/* harmony import */ var _init_Init__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./init/Init */ "./src/init/Init.ts");
/* harmony import */ var _config_Config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./config/Config */ "./src/config/Config.ts");
/* harmony import */ var _utils_CreateCanvasProfile__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/CreateCanvasProfile */ "./src/utils/CreateCanvasProfile.ts");
/* harmony import */ var _utils_CalcRealPhysicsPosition__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/CalcRealPhysicsPosition */ "./src/utils/CalcRealPhysicsPosition.ts");
/* harmony import */ var _engine_common_utils_Utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./engine/common/utils/Utils */ "./src/engine/common/utils/Utils.ts");
/* harmony import */ var _engine_common_math_Calculation__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./engine/common/math/Calculation */ "./src/engine/common/math/Calculation.ts");
/* harmony import */ var _engine_common_InsConfig__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./engine/common/InsConfig */ "./src/engine/common/InsConfig.ts");
/* harmony import */ var _helper_floatPanel__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./helper/floatPanel */ "./src/helper/floatPanel.ts");
/* harmony import */ var _utils_CreateIntensiveCanvasProfile__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./utils/CreateIntensiveCanvasProfile */ "./src/utils/CreateIntensiveCanvasProfile.ts");
/* harmony import */ var _engine_config_CommonProfile__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./engine/config/CommonProfile */ "./src/engine/config/CommonProfile.ts");
/* harmony import */ var _tool_history_command_Config__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./tool/history/command/Config */ "./src/tool/history/command/Config.ts");
/* harmony import */ var _config_CommandEnum__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./config/CommandEnum */ "./src/config/CommandEnum.ts");
/* harmony import */ var _config_OperationProfile__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./config/OperationProfile */ "./src/config/OperationProfile.ts");
/* harmony import */ var _config_ElementProfile__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./config/ElementProfile */ "./src/config/ElementProfile.ts");
/* harmony import */ var _engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./engine/config/PrimitiveProfile */ "./src/engine/config/PrimitiveProfile.ts");
/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./utils/Utils */ "./src/utils/Utils.ts");
/* harmony import */ var _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./engine/common/utils/Color */ "./src/engine/common/utils/Color.ts");
/* harmony import */ var _engine_common_math_Decimals__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./engine/common/math/Decimals */ "./src/engine/common/math/Decimals.ts");
/* harmony import */ var _engine_common_math_Angles__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./engine/common/math/Angles */ "./src/engine/common/math/Angles.ts");
/* harmony import */ var _engine_common_geometry_Euler__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./engine/common/geometry/Euler */ "./src/engine/common/geometry/Euler.ts");
/* harmony import */ var _engine_common_geometry_Quaternion__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./engine/common/geometry/Quaternion */ "./src/engine/common/geometry/Quaternion.ts");
/* harmony import */ var _engine_common_math_Doublekit__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./engine/common/math/Doublekit */ "./src/engine/common/math/Doublekit.ts");
/* harmony import */ var _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./engine/common/geometry/vector/Vector2 */ "./src/engine/common/geometry/vector/Vector2.ts");
/* harmony import */ var _engine_common_geometry_vector_Vector3__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./engine/common/geometry/vector/Vector3 */ "./src/engine/common/geometry/vector/Vector3.ts");
/* harmony import */ var _engine_common_geometry_matrix_Matrix__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./engine/common/geometry/matrix/Matrix */ "./src/engine/common/geometry/matrix/Matrix.ts");
/* harmony import */ var _engine_common_geometry_matrix_Matrix3__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./engine/common/geometry/matrix/Matrix3 */ "./src/engine/common/geometry/matrix/Matrix3.ts");
/* harmony import */ var _engine_common_geometry_matrix_Matrix4__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./engine/common/geometry/matrix/Matrix4 */ "./src/engine/common/geometry/matrix/Matrix4.ts");
/* harmony import */ var _engine_common_geometry_matrix_CanvasMatrix4__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./engine/common/geometry/matrix/CanvasMatrix4 */ "./src/engine/common/geometry/matrix/CanvasMatrix4.ts");
/* harmony import */ var _engine_common_geometry_shapes_D2CrossRelationShips__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./engine/common/geometry/shapes/D2CrossRelationShips */ "./src/engine/common/geometry/shapes/D2CrossRelationShips.ts");
/* harmony import */ var _engine_common_geometry_shapes_D2ArcTransitions__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./engine/common/geometry/shapes/D2ArcTransitions */ "./src/engine/common/geometry/shapes/D2ArcTransitions.ts");
/* harmony import */ var _engine_common_geometry_bbox_BBox2__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./engine/common/geometry/bbox/BBox2 */ "./src/engine/common/geometry/bbox/BBox2.ts");

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};


































const px2mm = _engine_common_math_Calculation__WEBPACK_IMPORTED_MODULE_7__.px2mm;
const mm2px = _engine_common_math_Calculation__WEBPACK_IMPORTED_MODULE_7__.mm2px;
const isSupportWebGPU = _engine_common_utils_Utils__WEBPACK_IMPORTED_MODULE_6__.isSupportWebGPU;
const getHashIden = _engine_common_utils_Utils__WEBPACK_IMPORTED_MODULE_6__.getHashIden;
const nextFrameTick = _utils_Utils__WEBPACK_IMPORTED_MODULE_17__.nextFrameTick;
const calcRealPhysicsPosition = _utils_CalcRealPhysicsPosition__WEBPACK_IMPORTED_MODULE_5__.calcRealPhysicsPosition;
const messageTool = _Constant__WEBPACK_IMPORTED_MODULE_0__.messageTool;
const IS_DESKTOP = _config_Config__WEBPACK_IMPORTED_MODULE_3__.IS_DESKTOP;
const DRAW_TOOL_COMMAND = __spreadValues({}, _config_CommandEnum__WEBPACK_IMPORTED_MODULE_13__.EDrawToolCommand);
const OPERATION_ACRION = __spreadValues({}, _config_OperationProfile__WEBPACK_IMPORTED_MODULE_14__.EOperationAction);
const HISTORY_CMD_ACTION = __spreadValues({}, _tool_history_command_Config__WEBPACK_IMPORTED_MODULE_12__.ECommandAction);
const CANVAS_LINE_CAP = __spreadValues({}, _engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_16__.ECanvas2DLineCap);
const POINT_EVENT_NAME = __spreadValues({}, _config_OperationProfile__WEBPACK_IMPORTED_MODULE_14__.EPointerEventName);
const SWEEP = __spreadValues({}, _engine_config_CommonProfile__WEBPACK_IMPORTED_MODULE_11__.ESweep);
const D2ElementType = __spreadValues({}, _config_ElementProfile__WEBPACK_IMPORTED_MODULE_15__.ED2ElementType);
const D2FontStyle = __spreadValues({}, _engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_16__.ED2FontStyle);
const Helper = {
  FloatPanel: _helper_floatPanel__WEBPACK_IMPORTED_MODULE_9__.FloatPanel
};
class WebCanvas {
  constructor(canvasElement) {
    _Constant__WEBPACK_IMPORTED_MODULE_0__.environment.canvasElement = canvasElement;
    this._canvasElement = canvasElement;
  }
  init() {
    return __async(this, null, function* () {
      yield (0,_init_Init__WEBPACK_IMPORTED_MODULE_2__.coreInit)();
      yield (0,_view_ViewInit__WEBPACK_IMPORTED_MODULE_1__.viewInit)();
      yield (0,_init_Init__WEBPACK_IMPORTED_MODULE_2__.envirInit)(this._canvasElement);
      yield (0,_init_Init__WEBPACK_IMPORTED_MODULE_2__.layerInit)();
      const { drawToolManager } = (0,_init_Init__WEBPACK_IMPORTED_MODULE_2__.d2ToolInit)(this._canvasElement);
      this._drawToolManager = drawToolManager;
      this._canvasElement.focus();
      return true;
    });
  }
  get drawLayerController() {
    return _Constant__WEBPACK_IMPORTED_MODULE_0__.drawLayerController;
  }
  get d2ElementController() {
    return _Constant__WEBPACK_IMPORTED_MODULE_0__.d2ElementController;
  }
  get d2TextController() {
    return _Constant__WEBPACK_IMPORTED_MODULE_0__.d2TextController;
  }
  get canvasController() {
    return _Constant__WEBPACK_IMPORTED_MODULE_0__.canvasController;
  }
  get operationController() {
    return _Constant__WEBPACK_IMPORTED_MODULE_0__.operationController;
  }
  resetCanvasStatus() {
    _Constant__WEBPACK_IMPORTED_MODULE_0__.canvasController.resetCanvasStatus();
    messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_13__.EFrameCommand.RENDER_FRAME, null);
    messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_13__.EOutEventCommand.CANVASPROFILE_CHANGED, (0,_utils_CreateCanvasProfile__WEBPACK_IMPORTED_MODULE_4__.createCanvasProfileChangedData)({}));
  }
  getCanvasRect() {
    return this._canvasElement.getBoundingClientRect().toJSON();
  }
  getDPI() {
    return [..._engine_common_InsConfig__WEBPACK_IMPORTED_MODULE_8__.InsConfig.DPI];
  }
  getSystemConfig() {
    return _Constant__WEBPACK_IMPORTED_MODULE_0__.systemConfig.toJSON();
  }
  setSystemConfig(moduleName, key, value) {
    _Constant__WEBPACK_IMPORTED_MODULE_0__.systemConfig.update(moduleName, key, value);
    messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_13__.EFrameCommand.RENDER_FRAME, null);
  }
  getCanvasProfileData() {
    return (0,_utils_CreateCanvasProfile__WEBPACK_IMPORTED_MODULE_4__.createCanvasProfileChangedData)({});
  }
  getCanvasIntensiveProfileData() {
    return (0,_utils_CreateIntensiveCanvasProfile__WEBPACK_IMPORTED_MODULE_10__.createCanvasIntensiveProfileChangedData)({});
  }
  setDrawToolCommand(type) {
    this._drawToolManager.update({ type });
  }
  forceRender() {
    messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_13__.EFrameCommand.RENDER_FRAME, null);
  }
  addInputsChangedListener(callback) {
    messageTool.messageBus.subscribe(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_13__.EOutEventCommand.INPUTS_CHANGED, callback);
  }
  addCanvasProfileChangedListener(callback) {
    messageTool.messageBus.subscribe(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_13__.EOutEventCommand.CANVASPROFILE_CHANGED, callback);
  }
  addCanvasIntensiveProfileChangedListener(callback) {
    messageTool.messageBus.subscribe(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_13__.EOutEventCommand.CANVASINTENSIVEPROFILE_CHANGED, callback);
  }
  addSystemProfileListener(callback) {
    messageTool.messageBus.subscribe(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_13__.EOutEventCommand.PROFILE_CHANGED, callback);
  }
  addOperationProfileListener(callback) {
    messageTool.messageBus.subscribe(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_13__.EOutEventCommand.OPERATION_CHANGED, callback);
  }
}
function createCanvasElement(containerElement) {
  if (containerElement.childNodes.length) {
    throw new Error(`you must provide a container that does not contain any child nodes.`);
  }
  const containerClientRect = containerElement.getBoundingClientRect();
  const canvasElement = document.createElement("canvas");
  canvasElement.width = containerClientRect.width;
  canvasElement.height = containerClientRect.height;
  canvasElement.style.position = "absolute";
  containerElement.appendChild(canvasElement);
  return canvasElement;
}


/***/ }),

/***/ "./src/config/CommandEnum.ts":
/*!***********************************!*\
  !*** ./src/config/CommandEnum.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EDrawToolCommand: () => (/* binding */ EDrawToolCommand),
/* harmony export */   EFrameCommand: () => (/* binding */ EFrameCommand),
/* harmony export */   EOutEventCommand: () => (/* binding */ EOutEventCommand)
/* harmony export */ });

var EFrameCommand = /* @__PURE__ */ ((EFrameCommand2) => {
  EFrameCommand2["RENDER_FRAME"] = "RENDER_FRAME";
  EFrameCommand2["UPDATE_CANVAS_RECT"] = "UPDATE_CANVAS_RECT";
  EFrameCommand2["UPDATE_CANVAS_ORIGIN"] = "UPDATE_CANVAS_ORIGIN";
  EFrameCommand2["SWITCH_DRAW_TOOL"] = "SWITCH_DRAW_TOOL";
  EFrameCommand2["REFRESH_RTREE"] = "REFRESH_RTREE";
  EFrameCommand2["CLEAR_ALL_SELECTS"] = "CLEAR_ALL_SELECTS";
  return EFrameCommand2;
})(EFrameCommand || {});
var EDrawToolCommand = /* @__PURE__ */ ((EDrawToolCommand2) => {
  EDrawToolCommand2["BLANK_DROP"] = "BLANK_DROP";
  EDrawToolCommand2["D2LINE"] = "D2LINE";
  EDrawToolCommand2["D2CIRCLE"] = "D2CIRCLE";
  EDrawToolCommand2["D2ARC"] = "D2ARC";
  EDrawToolCommand2["D2TEXT"] = "D2TEXT";
  return EDrawToolCommand2;
})(EDrawToolCommand || {});
var EOutEventCommand = /* @__PURE__ */ ((EOutEventCommand2) => {
  EOutEventCommand2["INPUTS_CHANGED"] = "INPUTS_CHANGED";
  EOutEventCommand2["CANVASPROFILE_CHANGED"] = "CANVASPROFILE_CHANGED";
  EOutEventCommand2["CANVASINTENSIVEPROFILE_CHANGED"] = "CANVASINTENSIVEPROFILE_CHANGED";
  EOutEventCommand2["RESOURCE_CHANGED"] = "RESOURCE_CHANGED";
  EOutEventCommand2["PROFILE_CHANGED"] = "PROFILE_CHANGED";
  EOutEventCommand2["DRAWLAYER_CHANGED"] = "DRAWLAYER_CHANGED";
  EOutEventCommand2["OPERATION_CHANGED"] = "OPERATION_CHANGED";
  return EOutEventCommand2;
})(EOutEventCommand || {});


/***/ }),

/***/ "./src/config/Config.ts":
/*!******************************!*\
  !*** ./src/config/Config.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DIRECTION_KEY_MOVE_STEP: () => (/* binding */ DIRECTION_KEY_MOVE_STEP),
/* harmony export */   IS_DESKTOP: () => (/* binding */ IS_DESKTOP),
/* harmony export */   MAX_ZOOM_RATIO: () => (/* binding */ MAX_ZOOM_RATIO),
/* harmony export */   MIN_ZOOM_RATIO: () => (/* binding */ MIN_ZOOM_RATIO),
/* harmony export */   MOUSE_WHEEL_SCROLL_DIST: () => (/* binding */ MOUSE_WHEEL_SCROLL_DIST),
/* harmony export */   MOUSE_WHEEL_ZOOM_RATIO: () => (/* binding */ MOUSE_WHEEL_ZOOM_RATIO)
/* harmony export */ });

const MOUSE_WHEEL_ZOOM_RATIO = 1.1;
const MOUSE_WHEEL_SCROLL_DIST = 25;
const DIRECTION_KEY_MOVE_STEP = 5;
const MIN_ZOOM_RATIO = 0.05;
const MAX_ZOOM_RATIO = 1e3;
const IS_DESKTOP = window.IS_DESKTOP;


/***/ }),

/***/ "./src/config/DrawLayerProfile.ts":
/*!****************************************!*\
  !*** ./src/config/DrawLayerProfile.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EDrawLayerCode: () => (/* binding */ EDrawLayerCode)
/* harmony export */ });

var EDrawLayerCode = /* @__PURE__ */ ((EDrawLayerCode2) => {
  EDrawLayerCode2["MaskLayer"] = `dw_ml_1000001`;
  return EDrawLayerCode2;
})(EDrawLayerCode || {});


/***/ }),

/***/ "./src/config/ElementProfile.ts":
/*!**************************************!*\
  !*** ./src/config/ElementProfile.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ED2ElementType: () => (/* binding */ ED2ElementType)
/* harmony export */ });

var ED2ElementType = /* @__PURE__ */ ((ED2ElementType2) => {
  ED2ElementType2["D2Point"] = "D2Point";
  ED2ElementType2["D2AssistLine"] = "D2AssistLine";
  ED2ElementType2["D2Line"] = "D2Line";
  ED2ElementType2["D2Circle"] = "D2Circle";
  ED2ElementType2["D2Arc"] = "D2Arc";
  ED2ElementType2["D2Text"] = "D2Text";
  return ED2ElementType2;
})(ED2ElementType || {});


/***/ }),

/***/ "./src/config/NativeProfile.ts":
/*!*************************************!*\
  !*** ./src/config/NativeProfile.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EDIRECTION_KEY: () => (/* binding */ EDIRECTION_KEY)
/* harmony export */ });

var EDIRECTION_KEY = /* @__PURE__ */ ((EDIRECTION_KEY2) => {
  EDIRECTION_KEY2[EDIRECTION_KEY2["LEFT"] = 37] = "LEFT";
  EDIRECTION_KEY2[EDIRECTION_KEY2["UP"] = 38] = "UP";
  EDIRECTION_KEY2[EDIRECTION_KEY2["RIGHT"] = 39] = "RIGHT";
  EDIRECTION_KEY2[EDIRECTION_KEY2["DOWN"] = 40] = "DOWN";
  return EDIRECTION_KEY2;
})(EDIRECTION_KEY || {});


/***/ }),

/***/ "./src/config/OperationProfile.ts":
/*!****************************************!*\
  !*** ./src/config/OperationProfile.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EOperationAction: () => (/* binding */ EOperationAction),
/* harmony export */   EPointerEventName: () => (/* binding */ EPointerEventName)
/* harmony export */ });

var EOperationAction = /* @__PURE__ */ ((EOperationAction2) => {
  EOperationAction2["HISTORY_UNDO"] = "HISTORY_UNDO";
  EOperationAction2["HISTORY_REDO"] = "HISTORY_REDO";
  EOperationAction2["CREATE_ELEMENT"] = "CREATE_ELEMENT";
  EOperationAction2["MODIFY_ELEMENT"] = "MODIFY_ELEMENT";
  EOperationAction2["DELETE_ELEMENT"] = "DELETE_ELEMENT";
  EOperationAction2["REFRESH_DRAWLAYER"] = "REFRESH_DRAWLAYER";
  EOperationAction2["CREATED_DRAWLAYER"] = "CREATED_DRAWLAYER";
  EOperationAction2["DELETED_DRAWLAYER"] = "DELETED_DRAWLAYER";
  EOperationAction2["SWITCH_ACTIVE_DRAWLAYER"] = "SWITCH_ACTIVE_DRAWLAYER";
  EOperationAction2["CLEAR_ALL_ACTIVE_DRAWLAYER"] = "CLEAR_ALL_ACTIVE_DRAWLAYER";
  EOperationAction2["CLEAR_ALL_DRAWLAYER_ELEMENTS"] = "CLEAR_ALL_DRAWLAYER_ELEMENTS";
  EOperationAction2["IMPORT_DATASTR_START"] = "IMPORT_DATASTR_START";
  EOperationAction2["IMPORT_DATASTR_COMPLETE"] = "IMPORT_DATASTR_COMPLETE";
  EOperationAction2["EXPORT_DATASTR_START"] = "IMPORT_DATASTR_START";
  EOperationAction2["EXPORT_DATASTR_COMPLETE"] = "IMPORT_DATASTR_COMPLETE";
  return EOperationAction2;
})(EOperationAction || {});
var EPointerEventName = /* @__PURE__ */ ((EPointerEventName2) => {
  EPointerEventName2["POINTER_DOWN"] = "mousedown";
  EPointerEventName2["POINTER_MOVE"] = "mousemove";
  EPointerEventName2["POINTER_UP"] = "mouseup";
  return EPointerEventName2;
})(EPointerEventName || {});


/***/ }),

/***/ "./src/controller/CanvasController.ts":
/*!********************************************!*\
  !*** ./src/controller/CanvasController.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CanvasController: () => (/* binding */ CanvasController)
/* harmony export */ });
/* harmony import */ var _config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config/CommandEnum */ "./src/config/CommandEnum.ts");
/* harmony import */ var _config_Config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config/Config */ "./src/config/Config.ts");
/* harmony import */ var _Constant__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Constant */ "./src/Constant.ts");
/* harmony import */ var _engine_common_Camera__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../engine/common/Camera */ "./src/engine/common/Camera.ts");
/* harmony import */ var _engine_common_geometry_vector_Vector3__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../engine/common/geometry/vector/Vector3 */ "./src/engine/common/geometry/vector/Vector3.ts");

var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};





class CanvasController {
  constructor() {
    this._camera = _engine_common_Camera__WEBPACK_IMPORTED_MODULE_3__.Camera.getInstance();
  }
  /**
   * 重置画布状态(平移状态/缩放状态)
   * 		- 获取场景原点 SO 在 <DOM-CANVAS /> 上的原生像素坐标 CO
   * 		- 获取 CO 相对于 <DOM-CANVAS /> 中心点的原生像素坐标 CCO
   * 		- 将 CCO 设置为相机中心点
   * 		- 将相机缩放比例设置为 1
   */
  resetCanvasStatus() {
    const domCanvasPositionOfSceneOrigin = _engine_common_geometry_vector_Vector3__WEBPACK_IMPORTED_MODULE_4__.Vector3.ORIGIN.multiplyMatrix4(
      this._camera.getViewMatrix4().getInverseMatrix()
    ).multiplyMatrix4(this._camera.getInverseZoomMatrix4().getInverseMatrix());
    const domCanvasCenterPositionOfSceneOrigin = new _engine_common_geometry_vector_Vector3__WEBPACK_IMPORTED_MODULE_4__.Vector3(_Constant__WEBPACK_IMPORTED_MODULE_2__.environment.canvasWidth / 2, -_Constant__WEBPACK_IMPORTED_MODULE_2__.environment.canvasHeight / 2, 0).sub(
      domCanvasPositionOfSceneOrigin
    );
    this.setCameraCenterBySourceNativePixelPosition(
      new _engine_common_geometry_vector_Vector3__WEBPACK_IMPORTED_MODULE_4__.Vector3(domCanvasCenterPositionOfSceneOrigin.x, domCanvasCenterPositionOfSceneOrigin.y, 0)
    );
    this._camera.setZoomRatio(1);
    _Constant__WEBPACK_IMPORTED_MODULE_2__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EFrameCommand.RENDER_FRAME, null);
  }
  /**
   * 重置画布内容
   */
  resetCanvasContent() {
    return __async(this, null, function* () {
      return new Promise((_) => {
        _Constant__WEBPACK_IMPORTED_MODULE_2__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EFrameCommand.SWITCH_DRAW_TOOL, { type: _config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EDrawToolCommand.BLANK_DROP });
        _Constant__WEBPACK_IMPORTED_MODULE_2__.selectManager.clearAllSelectItems();
        _Constant__WEBPACK_IMPORTED_MODULE_2__.drawLayerController.clearAllDrawLayersSelectedStatus();
        const allDrawLayers = _Constant__WEBPACK_IMPORTED_MODULE_2__.drawLayerController.getAllDrawLayerResults();
        allDrawLayers.forEach((item) => {
          _Constant__WEBPACK_IMPORTED_MODULE_2__.drawLayerController.deleteDrawLayerShapeItem(item.layerItemId);
        });
        _Constant__WEBPACK_IMPORTED_MODULE_2__.historyManager.clear();
        _Constant__WEBPACK_IMPORTED_MODULE_2__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EFrameCommand.RENDER_FRAME, { elementPriority: true });
        window.requestAnimationFrame(() => {
          _();
        });
      });
    });
  }
  /**
   * 将 <DOM-CANVAS /> 上的原生像素坐标点 P(相对位置为 <DOM-CANVAS /> 左上角) 设置为相机中心点
   */
  setCameraCenterBySourceNativePixelPosition(domCanvasSourceNativePixelPosition) {
    const cameraZoomRatio = this._camera.getZoomRatio();
    const cameraCenterSourcePixelPosition = this._camera.getCenterSourcePixelPosition();
    const moveOffsetVector3 = domCanvasSourceNativePixelPosition.sub(cameraCenterSourcePixelPosition);
    this._camera.setMoveIncrement(new _engine_common_geometry_vector_Vector3__WEBPACK_IMPORTED_MODULE_4__.Vector3(-moveOffsetVector3.x / cameraZoomRatio, -moveOffsetVector3.y / cameraZoomRatio, 0));
    return moveOffsetVector3;
  }
  /**
   * 以 <DOM-CANVAS /> 上的原生像素坐标点 P(相对位置为 <DOM-CANVAS /> 左上角) 为中心缩放视图
   * 		- 将 P 设置为相机中心
   * 		- 设置相机缩放比例
   * 		- 将相机中心还原
   */
  setZoomCanvasBySourceNativePixelPosition(ratio, domCanvasSourceNativePixelPosition) {
    const moveOffsetVector3 = this.setCameraCenterBySourceNativePixelPosition(domCanvasSourceNativePixelPosition);
    const newRatio = ratio <= _config_Config__WEBPACK_IMPORTED_MODULE_1__.MIN_ZOOM_RATIO ? _config_Config__WEBPACK_IMPORTED_MODULE_1__.MIN_ZOOM_RATIO : ratio >= _config_Config__WEBPACK_IMPORTED_MODULE_1__.MAX_ZOOM_RATIO ? _config_Config__WEBPACK_IMPORTED_MODULE_1__.MAX_ZOOM_RATIO : ratio;
    this._camera.setZoomRatio(newRatio);
    const cameraZoomRatio = this._camera.getZoomRatio();
    this._camera.setMoveIncrement(
      new _engine_common_geometry_vector_Vector3__WEBPACK_IMPORTED_MODULE_4__.Vector3(moveOffsetVector3.x / cameraZoomRatio, moveOffsetVector3.y / cameraZoomRatio, moveOffsetVector3.z / cameraZoomRatio)
    );
    _Constant__WEBPACK_IMPORTED_MODULE_2__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EFrameCommand.RENDER_FRAME, null);
  }
  moveCameraCenterByCanvasPosition(domCanvasSourceNativePixelPosition) {
    const cameraZoomRatio = this._camera.getZoomRatio();
    this._camera.setMoveTo(
      new _engine_common_geometry_vector_Vector3__WEBPACK_IMPORTED_MODULE_4__.Vector3(
        -(domCanvasSourceNativePixelPosition.x - this._camera.width / 2) / cameraZoomRatio,
        (domCanvasSourceNativePixelPosition.y - this._camera.height / 2) / cameraZoomRatio,
        0
      )
    );
    _Constant__WEBPACK_IMPORTED_MODULE_2__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EFrameCommand.RENDER_FRAME, null);
  }
}


/***/ }),

/***/ "./src/controller/D2ElementController.ts":
/*!***********************************************!*\
  !*** ./src/controller/D2ElementController.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2ElementController: () => (/* binding */ D2ElementController)
/* harmony export */ });
/* harmony import */ var _config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config/CommandEnum */ "./src/config/CommandEnum.ts");
/* harmony import */ var _Constant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Constant */ "./src/Constant.ts");
/* harmony import */ var _objects_shapes_manager_primitive2d_D2LineShapeManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../objects/shapes/manager/primitive2d/D2LineShapeManager */ "./src/objects/shapes/manager/primitive2d/D2LineShapeManager.ts");
/* harmony import */ var _utils_Helper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/Helper */ "./src/utils/Helper.ts");
/* harmony import */ var _objects_shapes_manager_primitive2d_D2CircleShapeManager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../objects/shapes/manager/primitive2d/D2CircleShapeManager */ "./src/objects/shapes/manager/primitive2d/D2CircleShapeManager.ts");
/* harmony import */ var _utils_CreateOperationProfile__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/CreateOperationProfile */ "./src/utils/CreateOperationProfile.ts");
/* harmony import */ var _config_OperationProfile__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../config/OperationProfile */ "./src/config/OperationProfile.ts");
/* harmony import */ var _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../engine/common/utils/Color */ "./src/engine/common/utils/Color.ts");
/* harmony import */ var _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../engine/common/geometry/vector/Vector2 */ "./src/engine/common/geometry/vector/Vector2.ts");
/* harmony import */ var _manager_EventsManager__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../manager/EventsManager */ "./src/manager/EventsManager.ts");
/* harmony import */ var _objects_shapes_manager_primitive2d_D2ArcShapeManager__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../objects/shapes/manager/primitive2d/D2ArcShapeManager */ "./src/objects/shapes/manager/primitive2d/D2ArcShapeManager.ts");
/* harmony import */ var _objects_shapes_primitive2d_D2TextShape__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../objects/shapes/primitive2d/D2TextShape */ "./src/objects/shapes/primitive2d/D2TextShape.ts");

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));












class D2ElementController {
  constructor() {
  }
  /**
   * 获取画布内所有图元结果
   */
  getAllD2ElementShapeResults() {
    return _utils_Helper__WEBPACK_IMPORTED_MODULE_3__.Helper.getAllElementShapes().map((elementItem) => {
      return elementItem.toJSON();
    });
  }
  /**
   * 获取画布内所有被选中的图元结果
   */
  getAllSelectedD2ElementShapeResults() {
    return _Constant__WEBPACK_IMPORTED_MODULE_1__.selectManager.getAllSelectItems().map((elementItem) => {
      return elementItem.toJSON();
    });
  }
  /************************************************************************************************************************/
  /************************************************************************************************************************/
  /************************************************************************************************************************/
  /**
   * 创建 D2-Line-Shape
   */
  createD2LineElementShapeItem(layerItemId, startX, startY, endX, endY, strokeWidth = 1, strokeColor = _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_7__.Color.BLACK) {
    const checkResult = _utils_Helper__WEBPACK_IMPORTED_MODULE_3__.Helper.checkDrawLayer(layerItemId);
    if (checkResult.code !== 0) {
      console.error(`error: target layer does not exist or has been deleted.`);
      return null;
    }
    const elementItemId = _Constant__WEBPACK_IMPORTED_MODULE_1__.globalIdenManager.getElementIden();
    const targetShapeItem = _objects_shapes_manager_primitive2d_D2LineShapeManager__WEBPACK_IMPORTED_MODULE_2__.D2LineShapeManager.getInstance().createShapeItem(
      elementItemId,
      layerItemId,
      new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_8__.Vector2(startX, startY),
      new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_8__.Vector2(endX, endY),
      strokeWidth,
      strokeColor
    );
    _Constant__WEBPACK_IMPORTED_MODULE_1__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EFrameCommand.RENDER_FRAME, null);
    if (_Constant__WEBPACK_IMPORTED_MODULE_1__.systemConfig.enbaleOperationMessagesNotify) {
      _Constant__WEBPACK_IMPORTED_MODULE_1__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EOutEventCommand.OPERATION_CHANGED, (0,_utils_CreateOperationProfile__WEBPACK_IMPORTED_MODULE_5__.createOperationProfileChangedData)(_config_OperationProfile__WEBPACK_IMPORTED_MODULE_6__.EOperationAction.CREATE_ELEMENT, {}));
    }
    return targetShapeItem.model.elementItemId;
  }
  /**
   * 创建 D2-Circle-Shape
   */
  createD2CircleElementShapeItem(layerItemId, centerX, centerY, radius, strokeWidth, strokeColor = new _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_7__.Color(1, 0, 0, 1), isFill = false, fillColor = new _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_7__.Color(0, 0, 0, 0)) {
    const checkResult = _utils_Helper__WEBPACK_IMPORTED_MODULE_3__.Helper.checkDrawLayer(layerItemId);
    if (checkResult.code !== 0) {
      console.error(`error: target layer does not exist or has been deleted.`);
      return null;
    }
    const elementItemId = _Constant__WEBPACK_IMPORTED_MODULE_1__.globalIdenManager.getElementIden();
    const targetShapeItem = _objects_shapes_manager_primitive2d_D2CircleShapeManager__WEBPACK_IMPORTED_MODULE_4__.D2CircleShapeManager.getInstance().createShapeItem(
      elementItemId,
      layerItemId,
      new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_8__.Vector2(centerX, centerY),
      radius,
      strokeWidth,
      strokeColor,
      isFill,
      fillColor
    );
    _Constant__WEBPACK_IMPORTED_MODULE_1__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EFrameCommand.RENDER_FRAME, null);
    if (_Constant__WEBPACK_IMPORTED_MODULE_1__.systemConfig.enbaleOperationMessagesNotify) {
      _Constant__WEBPACK_IMPORTED_MODULE_1__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EOutEventCommand.OPERATION_CHANGED, (0,_utils_CreateOperationProfile__WEBPACK_IMPORTED_MODULE_5__.createOperationProfileChangedData)(_config_OperationProfile__WEBPACK_IMPORTED_MODULE_6__.EOperationAction.CREATE_ELEMENT, {}));
    }
    return targetShapeItem.model.elementItemId;
  }
  /**
   * 创建 D2-Arc-Shape
   */
  createD2ArcElementShapeItem(layerItemId, centerX, centerY, radius, startAngle, endAngle, sweep, strokeWidth, strokeColor = new _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_7__.Color(1, 0, 0, 1), isFill = false, fillColor = new _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_7__.Color(0, 0, 0, 0)) {
    const checkResult = _utils_Helper__WEBPACK_IMPORTED_MODULE_3__.Helper.checkDrawLayer(layerItemId);
    if (checkResult.code !== 0) {
      console.error(`error: target layer does not exist or has been deleted.`);
      return null;
    }
    const elementItemId = _Constant__WEBPACK_IMPORTED_MODULE_1__.globalIdenManager.getElementIden();
    const targetShapeItem = _objects_shapes_manager_primitive2d_D2ArcShapeManager__WEBPACK_IMPORTED_MODULE_10__.D2ArcShapeManager.getInstance().createShapeItem(
      elementItemId,
      layerItemId,
      new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_8__.Vector2(centerX, centerY),
      radius,
      startAngle,
      endAngle,
      sweep,
      strokeWidth,
      strokeColor,
      isFill,
      fillColor
    );
    _Constant__WEBPACK_IMPORTED_MODULE_1__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EFrameCommand.RENDER_FRAME, null);
    if (_Constant__WEBPACK_IMPORTED_MODULE_1__.systemConfig.enbaleOperationMessagesNotify) {
      _Constant__WEBPACK_IMPORTED_MODULE_1__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EOutEventCommand.OPERATION_CHANGED, (0,_utils_CreateOperationProfile__WEBPACK_IMPORTED_MODULE_5__.createOperationProfileChangedData)(_config_OperationProfile__WEBPACK_IMPORTED_MODULE_6__.EOperationAction.CREATE_ELEMENT, {}));
    }
    return targetShapeItem.model.elementItemId;
  }
  /************************************************************************************************************************/
  /************************************************************************************************************************/
  /************************************************************************************************************************/
  /**
   * 获取图元 JSON 数据
   */
  getD2ElementShapeItemJSONData(elementItemId, markShapeType) {
    let targetElement = null;
    if (!markShapeType) {
      targetElement = _utils_Helper__WEBPACK_IMPORTED_MODULE_3__.Helper.getAllElementShapes().filter((elementItem) => {
        return elementItem.model.elementItemId === elementItemId;
      })[0];
    } else {
      targetElement = _utils_Helper__WEBPACK_IMPORTED_MODULE_3__.Helper.getMarkedElementShapeItem(elementItemId, markShapeType);
    }
    if (!targetElement) {
      return null;
    }
    if (targetElement instanceof _objects_shapes_primitive2d_D2TextShape__WEBPACK_IMPORTED_MODULE_11__.D2TextShape) {
      const jsonData = targetElement.toJSON();
      if (!jsonData.hasMeta) {
        return __spreadProps(__spreadValues({}, jsonData), {
          content: void 0,
          fontFamily: void 0,
          fontSize: void 0,
          fontStyle: void 0,
          fontWeight: void 0,
          vertexData: void 0
        });
      }
      return __spreadProps(__spreadValues({}, jsonData), {
        vertexData: void 0
      });
    }
    return targetElement.toJSON();
  }
  /**
   * 设置图元状态 - 显示/非显示
   */
  setD2ElementShapeItemVisible(elementItemId, visible, markShapeType) {
    let targetElement = null;
    if (!markShapeType) {
      targetElement = _utils_Helper__WEBPACK_IMPORTED_MODULE_3__.Helper.getAllElementShapes().filter((elementItem) => {
        return elementItem.model.elementItemId === elementItemId;
      })[0];
    } else {
      targetElement = _utils_Helper__WEBPACK_IMPORTED_MODULE_3__.Helper.getMarkedElementShapeItem(elementItemId, markShapeType);
    }
    if (!targetElement) {
      return;
    }
    if (visible) {
      targetElement.setVisible();
    } else {
      targetElement.setUnVisible();
    }
    _Constant__WEBPACK_IMPORTED_MODULE_1__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EFrameCommand.RENDER_FRAME, null);
    if (_Constant__WEBPACK_IMPORTED_MODULE_1__.systemConfig.enbaleOperationMessagesNotify) {
      _Constant__WEBPACK_IMPORTED_MODULE_1__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EOutEventCommand.OPERATION_CHANGED, (0,_utils_CreateOperationProfile__WEBPACK_IMPORTED_MODULE_5__.createOperationProfileChangedData)(_config_OperationProfile__WEBPACK_IMPORTED_MODULE_6__.EOperationAction.MODIFY_ELEMENT, {}));
    }
  }
  /**
   * 设置图元状态 - 高亮/非高亮
   */
  setD2ElementShapeItemHightlight(elementItemId, hightlight, markShapeType) {
    let targetElement = null;
    if (!markShapeType) {
      targetElement = _utils_Helper__WEBPACK_IMPORTED_MODULE_3__.Helper.getAllElementShapes().filter((elementItem) => {
        return elementItem.model.elementItemId === elementItemId;
      })[0];
    } else {
      targetElement = _utils_Helper__WEBPACK_IMPORTED_MODULE_3__.Helper.getMarkedElementShapeItem(elementItemId, markShapeType);
    }
    if (!targetElement) {
      return;
    }
    if (hightlight) {
      targetElement.setHightlight();
    } else {
      targetElement.setUnHightlight();
    }
    _Constant__WEBPACK_IMPORTED_MODULE_1__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EFrameCommand.RENDER_FRAME, null);
    if (_Constant__WEBPACK_IMPORTED_MODULE_1__.systemConfig.enbaleOperationMessagesNotify) {
      _Constant__WEBPACK_IMPORTED_MODULE_1__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EOutEventCommand.OPERATION_CHANGED, (0,_utils_CreateOperationProfile__WEBPACK_IMPORTED_MODULE_5__.createOperationProfileChangedData)(_config_OperationProfile__WEBPACK_IMPORTED_MODULE_6__.EOperationAction.MODIFY_ELEMENT, {}));
    }
  }
  /**
   * 设置图元结构线线宽颜色
   */
  setD2ElementShapeItemStrokeColor(elementItemId, color, markShapeType) {
    let targetElement = null;
    if (!markShapeType) {
      targetElement = _utils_Helper__WEBPACK_IMPORTED_MODULE_3__.Helper.getAllElementShapes().filter((elementItem) => {
        return elementItem.model.elementItemId === elementItemId;
      })[0];
    } else {
      targetElement = _utils_Helper__WEBPACK_IMPORTED_MODULE_3__.Helper.getMarkedElementShapeItem(elementItemId, markShapeType);
    }
    if (!targetElement) {
      return;
    }
    if (typeof targetElement.strokeColor !== "undefined") {
      ;
      targetElement.strokeColor = color;
      _Constant__WEBPACK_IMPORTED_MODULE_1__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EFrameCommand.RENDER_FRAME, null);
      if (_Constant__WEBPACK_IMPORTED_MODULE_1__.systemConfig.enbaleOperationMessagesNotify) {
        _Constant__WEBPACK_IMPORTED_MODULE_1__.messageTool.messageBus.publish(
          _config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EOutEventCommand.OPERATION_CHANGED,
          (0,_utils_CreateOperationProfile__WEBPACK_IMPORTED_MODULE_5__.createOperationProfileChangedData)(_config_OperationProfile__WEBPACK_IMPORTED_MODULE_6__.EOperationAction.MODIFY_ELEMENT, {})
        );
      }
    }
  }
  /**
   * 设置图元填充颜色
   */
  setD2ElementShapeItemFillColor(elementItemId, color, markShapeType) {
    let targetElement = null;
    if (!markShapeType) {
      targetElement = _utils_Helper__WEBPACK_IMPORTED_MODULE_3__.Helper.getAllElementShapes().filter((elementItem) => {
        return elementItem.model.elementItemId === elementItemId;
      })[0];
    } else {
      targetElement = _utils_Helper__WEBPACK_IMPORTED_MODULE_3__.Helper.getMarkedElementShapeItem(elementItemId, markShapeType);
    }
    if (!targetElement) {
      return;
    }
    if (typeof targetElement.fillColor !== "undefined") {
      if (color === null) {
        ;
        targetElement.isFill = false;
        return;
      }
      ;
      targetElement.fillColor = color;
      targetElement.isFill = true;
      _Constant__WEBPACK_IMPORTED_MODULE_1__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EFrameCommand.RENDER_FRAME, null);
      if (_Constant__WEBPACK_IMPORTED_MODULE_1__.systemConfig.enbaleOperationMessagesNotify) {
        _Constant__WEBPACK_IMPORTED_MODULE_1__.messageTool.messageBus.publish(
          _config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EOutEventCommand.OPERATION_CHANGED,
          (0,_utils_CreateOperationProfile__WEBPACK_IMPORTED_MODULE_5__.createOperationProfileChangedData)(_config_OperationProfile__WEBPACK_IMPORTED_MODULE_6__.EOperationAction.MODIFY_ELEMENT, {})
        );
      }
    }
  }
  /**
   * 设置图元结构线端点圆角样式
   */
  setD2ElementShapeItemLineCap(elementItemId, lineCap, markShapeType) {
    let targetElement = null;
    if (!markShapeType) {
      targetElement = _utils_Helper__WEBPACK_IMPORTED_MODULE_3__.Helper.getAllElementShapes().filter((elementItem) => {
        return elementItem.model.elementItemId === elementItemId;
      })[0];
    } else {
      targetElement = _utils_Helper__WEBPACK_IMPORTED_MODULE_3__.Helper.getMarkedElementShapeItem(elementItemId, markShapeType);
    }
    if (!targetElement) {
      return;
    }
    if (typeof targetElement.lineCap !== "undefined") {
      ;
      targetElement.lineCap = lineCap;
      _Constant__WEBPACK_IMPORTED_MODULE_1__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EFrameCommand.RENDER_FRAME, null);
      if (_Constant__WEBPACK_IMPORTED_MODULE_1__.systemConfig.enbaleOperationMessagesNotify) {
        _Constant__WEBPACK_IMPORTED_MODULE_1__.messageTool.messageBus.publish(
          _config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EOutEventCommand.OPERATION_CHANGED,
          (0,_utils_CreateOperationProfile__WEBPACK_IMPORTED_MODULE_5__.createOperationProfileChangedData)(_config_OperationProfile__WEBPACK_IMPORTED_MODULE_6__.EOperationAction.MODIFY_ELEMENT, {})
        );
      }
    }
  }
  /**
   * 设置图元结构线线段虚实样式
   */
  setD2ElementShapeItemSolid(elementItemId, isSolid, markShapeType) {
    let targetElement = null;
    if (!markShapeType) {
      targetElement = _utils_Helper__WEBPACK_IMPORTED_MODULE_3__.Helper.getAllElementShapes().filter((elementItem) => {
        return elementItem.model.elementItemId === elementItemId;
      })[0];
    } else {
      targetElement = _utils_Helper__WEBPACK_IMPORTED_MODULE_3__.Helper.getMarkedElementShapeItem(elementItemId, markShapeType);
    }
    if (!targetElement) {
      return;
    }
    if (typeof targetElement.isSolid !== "undefined") {
      ;
      targetElement.isSolid = isSolid;
      _Constant__WEBPACK_IMPORTED_MODULE_1__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EFrameCommand.RENDER_FRAME, null);
      if (_Constant__WEBPACK_IMPORTED_MODULE_1__.systemConfig.enbaleOperationMessagesNotify) {
        _Constant__WEBPACK_IMPORTED_MODULE_1__.messageTool.messageBus.publish(
          _config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EOutEventCommand.OPERATION_CHANGED,
          (0,_utils_CreateOperationProfile__WEBPACK_IMPORTED_MODULE_5__.createOperationProfileChangedData)(_config_OperationProfile__WEBPACK_IMPORTED_MODULE_6__.EOperationAction.MODIFY_ELEMENT, {})
        );
      }
    }
  }
  /**
   * 设置图元名称
   */
  setD2ElementShapeItemName(elementItemId, elementItemName, markShapeType) {
    let targetElement = null;
    if (!markShapeType) {
      targetElement = _utils_Helper__WEBPACK_IMPORTED_MODULE_3__.Helper.getAllElementShapes().filter((elementItem) => {
        return elementItem.model.elementItemId === elementItemId;
      })[0];
    } else {
      targetElement = _utils_Helper__WEBPACK_IMPORTED_MODULE_3__.Helper.getMarkedElementShapeItem(elementItemId, markShapeType);
    }
    if (!targetElement) {
      return;
    }
    ;
    targetElement.elementItemName = elementItemName;
    if (_Constant__WEBPACK_IMPORTED_MODULE_1__.systemConfig.enbaleOperationMessagesNotify) {
      _Constant__WEBPACK_IMPORTED_MODULE_1__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EOutEventCommand.OPERATION_CHANGED, (0,_utils_CreateOperationProfile__WEBPACK_IMPORTED_MODULE_5__.createOperationProfileChangedData)(_config_OperationProfile__WEBPACK_IMPORTED_MODULE_6__.EOperationAction.MODIFY_ELEMENT, {}));
    }
  }
  /**
   * 删除图元
   */
  deleteD2ElementShapeItemById(elementItemId, markShapeType) {
    let targetElement = null;
    if (!markShapeType) {
      targetElement = _utils_Helper__WEBPACK_IMPORTED_MODULE_3__.Helper.getAllElementShapes().filter((elementItem) => {
        return elementItem.model.elementItemId === elementItemId;
      })[0];
    } else {
      targetElement = _utils_Helper__WEBPACK_IMPORTED_MODULE_3__.Helper.getMarkedElementShapeItem(elementItemId, markShapeType);
    }
    if (!targetElement) {
      return;
    }
    if (!markShapeType) {
      _utils_Helper__WEBPACK_IMPORTED_MODULE_3__.Helper.deleteElementShapeItem(targetElement);
    } else {
      _utils_Helper__WEBPACK_IMPORTED_MODULE_3__.Helper.deleteMarkedElementShapeItem(targetElement.elementItemId, markShapeType);
    }
    _Constant__WEBPACK_IMPORTED_MODULE_1__.selectManager.clearSelectItemById(targetElement.elementItemId);
    _Constant__WEBPACK_IMPORTED_MODULE_1__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EFrameCommand.RENDER_FRAME, null);
    if (_Constant__WEBPACK_IMPORTED_MODULE_1__.systemConfig.enbaleOperationMessagesNotify) {
      _Constant__WEBPACK_IMPORTED_MODULE_1__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EOutEventCommand.OPERATION_CHANGED, (0,_utils_CreateOperationProfile__WEBPACK_IMPORTED_MODULE_5__.createOperationProfileChangedData)(_config_OperationProfile__WEBPACK_IMPORTED_MODULE_6__.EOperationAction.DELETE_ELEMENT, {}));
    }
  }
  /************************************************************************************************************************/
  /************************************************************************************************************************/
  /************************************************************************************************************************/
  /**
   * 为图元增加事件
   */
  bindD2ElementShapeItemEvent(elementItemId, eventName, callback) {
    const targetElement = _utils_Helper__WEBPACK_IMPORTED_MODULE_3__.Helper.getElementShapeItemById(elementItemId);
    if (!targetElement) {
      return null;
    }
    const eventHandlerId = _manager_EventsManager__WEBPACK_IMPORTED_MODULE_9__.EventsManager.getInstance().appendEventItem(elementItemId, eventName, callback);
    return eventHandlerId;
  }
  /**
   * 为图元移除指定事件
   */
  removeD2ElementShapeItemEvent(elementItemId, eventName, eventHandlerId) {
    _manager_EventsManager__WEBPACK_IMPORTED_MODULE_9__.EventsManager.getInstance().removeEventItem(elementItemId, eventName, eventHandlerId);
  }
  /**
   * 为图元清空所有事件
   */
  clearD2ElementShapeItemAllEvents(elementItemId) {
    _manager_EventsManager__WEBPACK_IMPORTED_MODULE_9__.EventsManager.getInstance().removeAllEvents(elementItemId);
  }
}


/***/ }),

/***/ "./src/controller/D2TextController.ts":
/*!********************************************!*\
  !*** ./src/controller/D2TextController.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2TextController: () => (/* binding */ D2TextController)
/* harmony export */ });
/* harmony import */ var _config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config/CommandEnum */ "./src/config/CommandEnum.ts");
/* harmony import */ var _Constant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Constant */ "./src/Constant.ts");
/* harmony import */ var _utils_CreateOperationProfile__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/CreateOperationProfile */ "./src/utils/CreateOperationProfile.ts");
/* harmony import */ var _config_OperationProfile__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../config/OperationProfile */ "./src/config/OperationProfile.ts");
/* harmony import */ var _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../engine/common/utils/Color */ "./src/engine/common/utils/Color.ts");
/* harmony import */ var _engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../engine/config/PrimitiveProfile */ "./src/engine/config/PrimitiveProfile.ts");
/* harmony import */ var _objects_shapes_manager_primitive2d_D2TextShapeManager__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../objects/shapes/manager/primitive2d/D2TextShapeManager */ "./src/objects/shapes/manager/primitive2d/D2TextShapeManager.ts");
/* harmony import */ var _engine_common_utils_Utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../engine/common/utils/Utils */ "./src/engine/common/utils/Utils.ts");
/* harmony import */ var _utils_Helper__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/Helper */ "./src/utils/Helper.ts");
/* harmony import */ var _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../engine/common/geometry/vector/Vector2 */ "./src/engine/common/geometry/vector/Vector2.ts");
/* harmony import */ var _geometry_primitives_TextLayout__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../geometry/primitives/TextLayout */ "./src/geometry/primitives/TextLayout.ts");

var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};











class D2TextController {
  constructor() {
  }
  /**
   * 创建 D2-Text-Shape
   */
  createD2TextElementItem(layerItemId, startX, startY, content, fontFamily = "auto", fontStyle = _engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_5__.ED2FontStyle.NORMAL, fontSize = 10, fontWeight = 100, strokeColor = _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_4__.Color.WHITE, alpha = 1, bgColor = null, paddingSurrounded = { top: 1, right: 1, bottom: 1, left: 1 }) {
    const checkResult = _utils_Helper__WEBPACK_IMPORTED_MODULE_8__.Helper.checkDrawLayer(layerItemId);
    if (checkResult.code !== 0) {
      console.error(`error: target layer does not exist or has been deleted.`);
      return null;
    }
    const elementItemId = _Constant__WEBPACK_IMPORTED_MODULE_1__.globalIdenManager.getElementIden();
    const targetShapeItem = _objects_shapes_manager_primitive2d_D2TextShapeManager__WEBPACK_IMPORTED_MODULE_6__.D2TextShapeManager.getInstance().createShapeItem(
      elementItemId,
      layerItemId,
      new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_9__.Vector2(startX, startY),
      content,
      fontFamily,
      fontStyle,
      fontSize,
      fontWeight,
      strokeColor,
      alpha,
      bgColor,
      paddingSurrounded
    );
    _Constant__WEBPACK_IMPORTED_MODULE_1__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EFrameCommand.RENDER_FRAME, null);
    if (_Constant__WEBPACK_IMPORTED_MODULE_1__.systemConfig.enbaleOperationMessagesNotify) {
      _Constant__WEBPACK_IMPORTED_MODULE_1__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EOutEventCommand.OPERATION_CHANGED, (0,_utils_CreateOperationProfile__WEBPACK_IMPORTED_MODULE_2__.createOperationProfileChangedData)(_config_OperationProfile__WEBPACK_IMPORTED_MODULE_3__.EOperationAction.CREATE_ELEMENT, {}));
    }
    return targetShapeItem.model.elementItemId;
  }
  /**
   * 创建 D2-Text-Shape
   */
  createD2TextElementItemByVertexData(layerItemId, vertexDataArray, startX, startY, strokeColor = _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_4__.Color.WHITE, alpha = 1, bgColor = null, paddingSurrounded = { top: 1, right: 1, bottom: 1, left: 1 }) {
    const checkResult = _utils_Helper__WEBPACK_IMPORTED_MODULE_8__.Helper.checkDrawLayer(layerItemId);
    if (checkResult.code !== 0) {
      console.error(`error: target layer does not exist or has been deleted.`);
      return null;
    }
    const { bbox2: bbox22, vertexDataArray: vertexDataArray2 } = _geometry_primitives_TextLayout__WEBPACK_IMPORTED_MODULE_10__.TextLayout.translateVertexData([startX, startY], vertexDataArray);
    const elementItemId = _Constant__WEBPACK_IMPORTED_MODULE_1__.globalIdenManager.getElementIden();
    const targetShapeItem = _objects_shapes_manager_primitive2d_D2TextShapeManager__WEBPACK_IMPORTED_MODULE_6__.D2TextShapeManager.getInstance().createShapeItemByVertexData(
      elementItemId,
      layerItemId,
      bbox22,
      vertexDataArray2,
      new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_9__.Vector2(startX, startY),
      strokeColor,
      alpha,
      bgColor,
      paddingSurrounded
    );
    _Constant__WEBPACK_IMPORTED_MODULE_1__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EFrameCommand.RENDER_FRAME, null);
    if (_Constant__WEBPACK_IMPORTED_MODULE_1__.systemConfig.enbaleOperationMessagesNotify) {
      _Constant__WEBPACK_IMPORTED_MODULE_1__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EOutEventCommand.OPERATION_CHANGED, (0,_utils_CreateOperationProfile__WEBPACK_IMPORTED_MODULE_2__.createOperationProfileChangedData)(_config_OperationProfile__WEBPACK_IMPORTED_MODULE_3__.EOperationAction.CREATE_ELEMENT, {}));
    }
    return targetShapeItem.model.elementItemId;
  }
  /**
   * 创建 D2-Text 顶点数据
   */
  createD2TextVertexDataItem(_0) {
    return __async(this, arguments, function* (content, fontFamily = "auto", fontStyle = _engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_5__.ED2FontStyle.NORMAL, fontSize = 10, fontWeight = 100) {
      return new Promise((resolve, reject) => {
        const hashIden = (0,_engine_common_utils_Utils__WEBPACK_IMPORTED_MODULE_7__.getHashIden)();
        _Constant__WEBPACK_IMPORTED_MODULE_1__.textFontService.addVectorizeTextTask(
          hashIden,
          content,
          fontSize,
          [0, 0],
          {
            fontFamily,
            fontWeight,
            fontStyle
          },
          (hashIden2, bbox2, vertexDataArray) => {
            resolve({
              content,
              fontSize,
              fontFamily,
              fontWeight,
              fontStyle,
              bbox2,
              vertexDataArray
            });
          }
        );
      });
    });
  }
  /************************************************************************************************************************/
  /************************************************************************************************************************/
  /************************************************************************************************************************/
  /**
   * 设置文本图元字符串内容
   */
  setElementItemContent(elementItemId, elementItemContent) {
    let targetElement = null;
    targetElement = _objects_shapes_manager_primitive2d_D2TextShapeManager__WEBPACK_IMPORTED_MODULE_6__.D2TextShapeManager.getInstance().getItemById(elementItemId);
    if (!targetElement) {
      return;
    }
    if (!targetElement.model.hasMeta) {
      throw new Error(`primitives created directly from vertex data are prohibited from accessing metadata.`);
    }
    targetElement.content = elementItemContent;
    _objects_shapes_manager_primitive2d_D2TextShapeManager__WEBPACK_IMPORTED_MODULE_6__.D2TextShapeManager.getInstance().refreshGraphicsPostions(targetElement.model);
    if (_Constant__WEBPACK_IMPORTED_MODULE_1__.systemConfig.enbaleOperationMessagesNotify) {
      _Constant__WEBPACK_IMPORTED_MODULE_1__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EOutEventCommand.OPERATION_CHANGED, (0,_utils_CreateOperationProfile__WEBPACK_IMPORTED_MODULE_2__.createOperationProfileChangedData)(_config_OperationProfile__WEBPACK_IMPORTED_MODULE_3__.EOperationAction.MODIFY_ELEMENT, {}));
    }
  }
}


/***/ }),

/***/ "./src/controller/DrawLayerController.ts":
/*!***********************************************!*\
  !*** ./src/controller/DrawLayerController.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DrawLayerController: () => (/* binding */ DrawLayerController)
/* harmony export */ });
/* harmony import */ var _config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config/CommandEnum */ "./src/config/CommandEnum.ts");
/* harmony import */ var _Constant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Constant */ "./src/Constant.ts");
/* harmony import */ var _objects_shapes_manager_DrawLayerShapeManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../objects/shapes/manager/DrawLayerShapeManager */ "./src/objects/shapes/manager/DrawLayerShapeManager.ts");
/* harmony import */ var _utils_Helper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/Helper */ "./src/utils/Helper.ts");
/* harmony import */ var _utils_CreateOperationProfile__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/CreateOperationProfile */ "./src/utils/CreateOperationProfile.ts");
/* harmony import */ var _config_OperationProfile__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../config/OperationProfile */ "./src/config/OperationProfile.ts");







class DrawLayerController {
  constructor() {
  }
  /**
   * 获取所有绘制图层结果
   */
  getAllDrawLayerResults() {
    return _utils_Helper__WEBPACK_IMPORTED_MODULE_3__.Helper.getAllDrawLayerShapes().map((layerItem) => {
      return {
        layerItemId: layerItem.model.layerItemId,
        layerItemName: layerItem.model.layerItemName,
        layerItemStatus: layerItem.status,
        layerItemType: layerItem.model.layerItemType,
        layerItemOpacity: layerItem.model.layerItemOpacity
      };
    });
  }
  /**
   * 创建单个绘制图层
   */
  createDrawLayerShapeItem(layerItemName = "Untitled Layer") {
    const drawLayerShapeItem = _objects_shapes_manager_DrawLayerShapeManager__WEBPACK_IMPORTED_MODULE_2__.DrawLayerShapeManager.getInstance().createContentShapeItem(layerItemName);
    _Constant__WEBPACK_IMPORTED_MODULE_1__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EFrameCommand.RENDER_FRAME, null);
    if (_Constant__WEBPACK_IMPORTED_MODULE_1__.systemConfig.enbaleOperationMessagesNotify) {
      _Constant__WEBPACK_IMPORTED_MODULE_1__.messageTool.messageBus.publish(
        _config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EOutEventCommand.OPERATION_CHANGED,
        (0,_utils_CreateOperationProfile__WEBPACK_IMPORTED_MODULE_4__.createOperationProfileChangedData)(_config_OperationProfile__WEBPACK_IMPORTED_MODULE_5__.EOperationAction.CREATED_DRAWLAYER, {
          targetItemId: drawLayerShapeItem.model.layerItemId
        })
      );
    }
    return drawLayerShapeItem.model.layerItemId;
  }
  /**
   * 删除单个绘制图层
   */
  deleteDrawLayerShapeItem(layerItemId) {
    _objects_shapes_manager_DrawLayerShapeManager__WEBPACK_IMPORTED_MODULE_2__.DrawLayerShapeManager.getInstance().deleteContentShapeItem(layerItemId);
    _Constant__WEBPACK_IMPORTED_MODULE_1__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EFrameCommand.RENDER_FRAME, { elementPriority: true });
    if (_Constant__WEBPACK_IMPORTED_MODULE_1__.systemConfig.enbaleOperationMessagesNotify) {
      _Constant__WEBPACK_IMPORTED_MODULE_1__.messageTool.messageBus.publish(
        _config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EOutEventCommand.OPERATION_CHANGED,
        (0,_utils_CreateOperationProfile__WEBPACK_IMPORTED_MODULE_4__.createOperationProfileChangedData)(_config_OperationProfile__WEBPACK_IMPORTED_MODULE_5__.EOperationAction.DELETED_DRAWLAYER, {
          targetItemId: layerItemId
        })
      );
    }
  }
  /**
   * 获取第一个被选中的绘制图层的图层 ID
   */
  getActiveDrawLayerShapeItemId() {
    return _objects_shapes_manager_DrawLayerShapeManager__WEBPACK_IMPORTED_MODULE_2__.DrawLayerShapeManager.getInstance().getActiveItem().layerItemId;
  }
  /**
   * 设置指定图层 ID 对应的图层为选中状态
   */
  setActiveDrawLayerShapeItem(layerItemId) {
    _objects_shapes_manager_DrawLayerShapeManager__WEBPACK_IMPORTED_MODULE_2__.DrawLayerShapeManager.getInstance().setActiveItem(layerItemId);
    _Constant__WEBPACK_IMPORTED_MODULE_1__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EFrameCommand.RENDER_FRAME, null);
    if (_Constant__WEBPACK_IMPORTED_MODULE_1__.systemConfig.enbaleOperationMessagesNotify) {
      _Constant__WEBPACK_IMPORTED_MODULE_1__.messageTool.messageBus.publish(
        _config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EOutEventCommand.OPERATION_CHANGED,
        (0,_utils_CreateOperationProfile__WEBPACK_IMPORTED_MODULE_4__.createOperationProfileChangedData)(_config_OperationProfile__WEBPACK_IMPORTED_MODULE_5__.EOperationAction.SWITCH_ACTIVE_DRAWLAYER, {
          targetItemId: layerItemId
        })
      );
    }
  }
  /**
   * 清除所有选中的绘制图层的选中状态
   */
  clearAllDrawLayersSelectedStatus() {
    _objects_shapes_manager_DrawLayerShapeManager__WEBPACK_IMPORTED_MODULE_2__.DrawLayerShapeManager.getInstance().selectedLayersId = /* @__PURE__ */ new Set([]);
    if (_Constant__WEBPACK_IMPORTED_MODULE_1__.systemConfig.enbaleOperationMessagesNotify) {
      _Constant__WEBPACK_IMPORTED_MODULE_1__.messageTool.messageBus.publish(
        _config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EOutEventCommand.OPERATION_CHANGED,
        (0,_utils_CreateOperationProfile__WEBPACK_IMPORTED_MODULE_4__.createOperationProfileChangedData)(_config_OperationProfile__WEBPACK_IMPORTED_MODULE_5__.EOperationAction.CLEAR_ALL_ACTIVE_DRAWLAYER, {})
      );
    }
  }
  /**
   * 删除指定图层 ID 对应的绘制图层中的所有图元
   */
  deleteDrawLayerElements(layerItemId) {
    const allElementShapes = _utils_Helper__WEBPACK_IMPORTED_MODULE_3__.Helper.getAllElementShapes();
    for (let i = 0; i < allElementShapes.length; i++) {
      if (allElementShapes[i].model.layerItemId !== layerItemId) {
        continue;
      }
      _utils_Helper__WEBPACK_IMPORTED_MODULE_3__.Helper.deleteElementShapeItem(allElementShapes[i]);
      _Constant__WEBPACK_IMPORTED_MODULE_1__.selectManager.clearSelectItemById(allElementShapes[i].elementItemId);
    }
    _Constant__WEBPACK_IMPORTED_MODULE_1__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EFrameCommand.RENDER_FRAME, null);
    if (_Constant__WEBPACK_IMPORTED_MODULE_1__.systemConfig.enbaleOperationMessagesNotify) {
      _Constant__WEBPACK_IMPORTED_MODULE_1__.messageTool.messageBus.publish(
        _config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EOutEventCommand.OPERATION_CHANGED,
        (0,_utils_CreateOperationProfile__WEBPACK_IMPORTED_MODULE_4__.createOperationProfileChangedData)(_config_OperationProfile__WEBPACK_IMPORTED_MODULE_5__.EOperationAction.CLEAR_ALL_DRAWLAYER_ELEMENTS, {
          targetItemId: layerItemId
        })
      );
    }
  }
}


/***/ }),

/***/ "./src/controller/Environment.ts":
/*!***************************************!*\
  !*** ./src/controller/Environment.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Environment: () => (/* binding */ Environment)
/* harmony export */ });
/* harmony import */ var _config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config/CommandEnum */ "./src/config/CommandEnum.ts");
/* harmony import */ var _Constant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Constant */ "./src/Constant.ts");
/* harmony import */ var _engine_common_Camera__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../engine/common/Camera */ "./src/engine/common/Camera.ts");
/* harmony import */ var _engine_common_geometry_vector_Vector3__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../engine/common/geometry/vector/Vector3 */ "./src/engine/common/geometry/vector/Vector3.ts");
/* harmony import */ var _utils_CreateCanvasProfile__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/CreateCanvasProfile */ "./src/utils/CreateCanvasProfile.ts");

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};





class Environment {
  constructor() {
    this._launcher = null;
    this._camera = _engine_common_Camera__WEBPACK_IMPORTED_MODULE_2__.Camera.getInstance();
    this._canvasElement = null;
    this._origin = new _engine_common_geometry_vector_Vector3__WEBPACK_IMPORTED_MODULE_3__.Vector3(0, 0, 1);
    this._canvasHeight = 0;
    this._canvasWidth = 0;
    this._canvasLeft = 0;
    this._canvasTop = 0;
  }
  get launcher() {
    return this._launcher;
  }
  get origin() {
    return this._origin;
  }
  set origin(value) {
    this._origin = value;
  }
  get canvasWidth() {
    return this._canvasWidth;
  }
  set canvasWidth(value) {
    this._canvasWidth = value;
  }
  get canvasHeight() {
    return this._canvasHeight;
  }
  set canvasHeight(value) {
    this._canvasHeight = value;
  }
  get canvasLeft() {
    return this._canvasLeft;
  }
  set canvasLeft(value) {
    this._canvasLeft = value;
  }
  get canvasTop() {
    return this._canvasTop;
  }
  set canvasTop(value) {
    this._canvasTop = value;
  }
  get canvasElement() {
    return this._canvasElement;
  }
  set canvasElement(value) {
    this._canvasElement = value;
  }
  setLauncherHandler(handler) {
    this._launcher = handler;
  }
  /**
   * 更新/设置画布尺寸
   */
  updateCanvasRectSize(canvasWidth, canvasHeight, canvasLeft, canvasTop) {
    this.canvasElement.width = canvasWidth;
    this.canvasElement.height = canvasHeight;
    this._canvasWidth = canvasWidth;
    this._canvasHeight = canvasHeight;
    this._canvasLeft = canvasLeft;
    this._canvasTop = canvasTop;
    this.origin = new _engine_common_geometry_vector_Vector3__WEBPACK_IMPORTED_MODULE_3__.Vector3(canvasWidth / 2, -canvasHeight / 2, 0);
    this._camera.updateRect(canvasWidth, canvasHeight);
    _Constant__WEBPACK_IMPORTED_MODULE_1__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EFrameCommand.UPDATE_CANVAS_RECT, { canvasWidth: this.canvasWidth, canvasHeight: this.canvasHeight });
    _Constant__WEBPACK_IMPORTED_MODULE_1__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EFrameCommand.UPDATE_CANVAS_ORIGIN, __spreadValues({}, this.origin.toJSON()));
    _Constant__WEBPACK_IMPORTED_MODULE_1__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EFrameCommand.RENDER_FRAME, null);
    _Constant__WEBPACK_IMPORTED_MODULE_1__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EOutEventCommand.CANVASPROFILE_CHANGED, (0,_utils_CreateCanvasProfile__WEBPACK_IMPORTED_MODULE_4__.createCanvasProfileChangedData)({}));
  }
  /**
   * 设置画布上的鼠标样式
   */
  updateCanvasMouseCursor(cursor) {
    this.canvasElement.style.cursor = cursor;
  }
  /**
   * 设置画布背景颜色
   */
  updateCanvasBackgroudColor() {
    this.canvasElement.style.backgroundColor = "rgba(0, 0, 0, 1)";
  }
}


/***/ }),

/***/ "./src/controller/FilterController.ts":
/*!********************************************!*\
  !*** ./src/controller/FilterController.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FilterController: () => (/* binding */ FilterController)
/* harmony export */ });
/* harmony import */ var _Constant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Constant */ "./src/Constant.ts");
/* harmony import */ var _objects_shapes_manager_DrawLayerShapeManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../objects/shapes/manager/DrawLayerShapeManager */ "./src/objects/shapes/manager/DrawLayerShapeManager.ts");



class FilterController {
  constructor() {
  }
  /**
   * 获取点选图元集合
   */
  pointSelectBeforeFilter(x, y) {
    const selectedDrawLayerShapeItem = _objects_shapes_manager_DrawLayerShapeManager__WEBPACK_IMPORTED_MODULE_1__.DrawLayerShapeManager.getInstance().getActiveItem();
    const results = /* @__PURE__ */ new Set();
    if (!selectedDrawLayerShapeItem) {
      return results;
    }
    const rtreeResults = _Constant__WEBPACK_IMPORTED_MODULE_0__.rtree.search({ x, y, w: 0, h: 0 });
    for (let i = 0; i < rtreeResults.length; i++) {
      const rtreeResultItem = rtreeResults[i];
      const rtreeItem = rtreeResultItem.leaf;
      const elementItem = rtreeItem.target;
      if (elementItem.isSelect(x, y) && elementItem.model.layerItemId === selectedDrawLayerShapeItem.layerItemId) {
        results.add(elementItem);
      }
    }
    return results;
  }
  /**
   * 获取框选图元集合
   */
  boxSelectBeforeFilter(bbox2) {
    const selectedDrawLayerShapeItem = _objects_shapes_manager_DrawLayerShapeManager__WEBPACK_IMPORTED_MODULE_1__.DrawLayerShapeManager.getInstance().getActiveItem();
    const results = /* @__PURE__ */ new Set();
    if (!selectedDrawLayerShapeItem) {
      return results;
    }
    const rtreeResults = _Constant__WEBPACK_IMPORTED_MODULE_0__.rtree.search({ x: bbox2.minX, y: bbox2.minY, w: bbox2.width, h: bbox2.height });
    for (let i = 0; i < rtreeResults.length; i++) {
      const rtreeResultItem = rtreeResults[i];
      const rtreeItem = rtreeResultItem.leaf;
      const elementItem = rtreeItem.target;
      const elementItemBBox2 = elementItem.model.bbox2;
      if (elementItemBBox2.isBeWrappedByBBox2(bbox2) && elementItem.model.layerItemId === selectedDrawLayerShapeItem.layerItemId) {
        results.add(elementItem);
      }
    }
    return results;
  }
}


/***/ }),

/***/ "./src/controller/Launcher.ts":
/*!************************************!*\
  !*** ./src/controller/Launcher.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Launcher: () => (/* binding */ Launcher)
/* harmony export */ });
/* harmony import */ var _config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config/CommandEnum */ "./src/config/CommandEnum.ts");
/* harmony import */ var _Constant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Constant */ "./src/Constant.ts");
/* harmony import */ var _engine_common_geometry_vector_Vector3__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../engine/common/geometry/vector/Vector3 */ "./src/engine/common/geometry/vector/Vector3.ts");
/* harmony import */ var _presenter_DrawLayerPresenter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../presenter/DrawLayerPresenter */ "./src/presenter/DrawLayerPresenter.ts");
/* harmony import */ var _presenter_ElementPresenter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../presenter/ElementPresenter */ "./src/presenter/ElementPresenter.ts");
/* harmony import */ var _engine_common_createScene__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../engine/common/createScene */ "./src/engine/common/createScene.ts");

var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};






class Launcher {
  constructor(canvasElement) {
    this._canvasElement = canvasElement;
    this._isShouldHandleElementsPriority = false;
    this._isShouldUpdateCanvasView = false;
    _Constant__WEBPACK_IMPORTED_MODULE_1__.messageTool.messageBus.subscribe(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EFrameCommand.RENDER_FRAME, (params) => {
      this._isShouldHandleElementsPriority = !params ? false : !!params.elementPriority;
      this._isShouldUpdateCanvasView = true;
    });
    _Constant__WEBPACK_IMPORTED_MODULE_1__.messageTool.messageBus.subscribe(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EFrameCommand.UPDATE_CANVAS_RECT, (data) => {
      this._scene.updateCanvasRect(data.canvasWidth, data.canvasHeight);
      _Constant__WEBPACK_IMPORTED_MODULE_1__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EFrameCommand.RENDER_FRAME, null);
    });
    _Constant__WEBPACK_IMPORTED_MODULE_1__.messageTool.messageBus.subscribe(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EFrameCommand.UPDATE_CANVAS_ORIGIN, (data) => {
      this._scene.updateCanvasOrigin(new _engine_common_geometry_vector_Vector3__WEBPACK_IMPORTED_MODULE_2__.Vector3(data.x, data.y, data.z));
      _Constant__WEBPACK_IMPORTED_MODULE_1__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EFrameCommand.RENDER_FRAME, null);
    });
  }
  get scene() {
    return this._scene;
  }
  init() {
    return __async(this, null, function* () {
      this._scene = yield (0,_engine_common_createScene__WEBPACK_IMPORTED_MODULE_5__.createScene)(_Constant__WEBPACK_IMPORTED_MODULE_1__.systemConfig.coreEngineType, this._canvasElement);
      this._drawLayerPresenter = new _presenter_DrawLayerPresenter__WEBPACK_IMPORTED_MODULE_3__.DrawLayerPresenter(this._scene);
      this._elementPresenter = new _presenter_ElementPresenter__WEBPACK_IMPORTED_MODULE_4__.ElementPresenter(this._scene);
      _Constant__WEBPACK_IMPORTED_MODULE_1__.modifyController.setLayerPresenter(this._drawLayerPresenter);
      _Constant__WEBPACK_IMPORTED_MODULE_1__.modifyController.setElementPresenter(this._elementPresenter);
    });
  }
  renderFrame(timeStamp) {
    if (this._isShouldUpdateCanvasView) {
      _Constant__WEBPACK_IMPORTED_MODULE_1__.modifyController.notify(this._isShouldHandleElementsPriority);
      this._scene.render(timeStamp);
      this._isShouldUpdateCanvasView = false;
      this._isShouldHandleElementsPriority = false;
    }
  }
}


/***/ }),

/***/ "./src/controller/OperationController.ts":
/*!***********************************************!*\
  !*** ./src/controller/OperationController.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   OperationController: () => (/* binding */ OperationController)
/* harmony export */ });
/* harmony import */ var _config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config/CommandEnum */ "./src/config/CommandEnum.ts");
/* harmony import */ var _config_OperationProfile__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config/OperationProfile */ "./src/config/OperationProfile.ts");
/* harmony import */ var _Constant__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Constant */ "./src/Constant.ts");
/* harmony import */ var _tool_history_command_CommandProxy__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../tool/history/command/CommandProxy */ "./src/tool/history/command/CommandProxy.ts");
/* harmony import */ var _utils_CreateOperationProfile__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/CreateOperationProfile */ "./src/utils/CreateOperationProfile.ts");






class OperationController {
  constructor() {
  }
  addHistroyRecord(elementItemId, action, groupId = String(performance.now())) {
    const commandItem = _tool_history_command_CommandProxy__WEBPACK_IMPORTED_MODULE_3__.CommandProxy.getCommandInstance(elementItemId, action, groupId);
    _Constant__WEBPACK_IMPORTED_MODULE_2__.historyManager.add(commandItem);
  }
  undo() {
    _Constant__WEBPACK_IMPORTED_MODULE_2__.historyManager.undo();
    _Constant__WEBPACK_IMPORTED_MODULE_2__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EFrameCommand.CLEAR_ALL_SELECTS, null);
    _Constant__WEBPACK_IMPORTED_MODULE_2__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EFrameCommand.RENDER_FRAME, null);
    if (_Constant__WEBPACK_IMPORTED_MODULE_2__.systemConfig.enbaleOperationMessagesNotify) {
      _Constant__WEBPACK_IMPORTED_MODULE_2__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EOutEventCommand.OPERATION_CHANGED, (0,_utils_CreateOperationProfile__WEBPACK_IMPORTED_MODULE_4__.createOperationProfileChangedData)(_config_OperationProfile__WEBPACK_IMPORTED_MODULE_1__.EOperationAction.HISTORY_UNDO, {}));
    }
  }
  redo() {
    _Constant__WEBPACK_IMPORTED_MODULE_2__.historyManager.redo();
    _Constant__WEBPACK_IMPORTED_MODULE_2__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EFrameCommand.CLEAR_ALL_SELECTS, null);
    _Constant__WEBPACK_IMPORTED_MODULE_2__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EFrameCommand.RENDER_FRAME, null);
    if (_Constant__WEBPACK_IMPORTED_MODULE_2__.systemConfig.enbaleOperationMessagesNotify) {
      _Constant__WEBPACK_IMPORTED_MODULE_2__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EOutEventCommand.OPERATION_CHANGED, (0,_utils_CreateOperationProfile__WEBPACK_IMPORTED_MODULE_4__.createOperationProfileChangedData)(_config_OperationProfile__WEBPACK_IMPORTED_MODULE_1__.EOperationAction.HISTORY_REDO, {}));
    }
  }
  hasHistoryUndoRecord() {
    return _Constant__WEBPACK_IMPORTED_MODULE_2__.historyManager.hasUndo();
  }
  hasHistoryRedoRecord() {
    return _Constant__WEBPACK_IMPORTED_MODULE_2__.historyManager.hasRedo();
  }
  resetCanvasContent() {
    return _Constant__WEBPACK_IMPORTED_MODULE_2__.canvasController.resetCanvasContent();
  }
}


/***/ }),

/***/ "./src/controller/SelectManage.ts":
/*!****************************************!*\
  !*** ./src/controller/SelectManage.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SelectManager: () => (/* binding */ SelectManager)
/* harmony export */ });
/* harmony import */ var _config_DrawLayerProfile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config/DrawLayerProfile */ "./src/config/DrawLayerProfile.ts");
/* harmony import */ var _Constant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Constant */ "./src/Constant.ts");
/* harmony import */ var _objects_assist_primitive2d_D2AssistLineShape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../objects/assist/primitive2d/D2AssistLineShape */ "./src/objects/assist/primitive2d/D2AssistLineShape.ts");
/* harmony import */ var _manager_Manage__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../manager/Manage */ "./src/manager/Manage.ts");
/* harmony import */ var _config_CommandEnum__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../config/CommandEnum */ "./src/config/CommandEnum.ts");
/* harmony import */ var _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../engine/common/utils/Color */ "./src/engine/common/utils/Color.ts");
/* harmony import */ var _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../engine/common/geometry/vector/Vector2 */ "./src/engine/common/geometry/vector/Vector2.ts");
/* harmony import */ var _engine_common_geometry_bbox_BBox2__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../engine/common/geometry/bbox/BBox2 */ "./src/engine/common/geometry/bbox/BBox2.ts");
/* harmony import */ var _manager_EventsManager__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../manager/EventsManager */ "./src/manager/EventsManager.ts");
/* harmony import */ var _config_OperationProfile__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../config/OperationProfile */ "./src/config/OperationProfile.ts");
/* harmony import */ var _engine_common_Camera__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../engine/common/Camera */ "./src/engine/common/Camera.ts");
/* harmony import */ var _engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../engine/config/PrimitiveProfile */ "./src/engine/config/PrimitiveProfile.ts");













class SelectManager extends _manager_Manage__WEBPACK_IMPORTED_MODULE_3__.Manager {
  constructor() {
    super();
    this._camera = _engine_common_Camera__WEBPACK_IMPORTED_MODULE_10__.Camera.getInstance();
    this._selectionBoxLines = [];
    this._isBoxSelection = false;
    this._leftDownRealScenePhysicsX = 0;
    this._leftDownRealScenePhysicsY = 0;
    this._strokeWidth = 0.5;
    this._segSize = 2;
    this._gapSize = 1.5;
    _Constant__WEBPACK_IMPORTED_MODULE_1__.messageTool.messageBus.subscribe(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_4__.EFrameCommand.CLEAR_ALL_SELECTS, this.clearAllSelectItems.bind(this));
  }
  get camera() {
    return this._camera;
  }
  /**
   * 获取所有被选中的图元
   */
  getAllSelectItems() {
    const selects = [];
    for (let [key, item] of this.items) {
      selects.push(item);
    }
    return selects;
  }
  /**
   * 清除所有选中图元的记录
   */
  clearAllSelectItems() {
    this.setSelectStatus(/* @__PURE__ */ new Set([]));
    _Constant__WEBPACK_IMPORTED_MODULE_1__.handlerControl.clearProcessor();
  }
  /**
   * 在所有选中图元记录中删除指定图元 ID 对应的图元
   */
  clearSelectItemById(elementItemId) {
    if (this.items.has(elementItemId)) {
      const elementItem = this.items.get(elementItemId);
      this.items.delete(elementItem.elementItemId);
      elementItem.setUnSelect();
      _Constant__WEBPACK_IMPORTED_MODULE_1__.handlerControl.clearProcessor();
    }
  }
  keyDownHandler(inputInfo) {
    _Constant__WEBPACK_IMPORTED_MODULE_1__.handlerControl.keyDownHandler(inputInfo);
  }
  keyUpHandler(inputInfo) {
    _Constant__WEBPACK_IMPORTED_MODULE_1__.handlerControl.keyUpHandler(inputInfo);
  }
  mouseLeftDownHandler(inputInfo) {
    const eventsManager = _manager_EventsManager__WEBPACK_IMPORTED_MODULE_8__.EventsManager.getInstance();
    this._isBoxSelection = false;
    this._leftDownRealScenePhysicsX = inputInfo.leftDownRealScenePhysicsX;
    this._leftDownRealScenePhysicsY = inputInfo.leftDownRealScenePhysicsY;
    if (_Constant__WEBPACK_IMPORTED_MODULE_1__.systemConfig.interactive.enableCanvasSelection) {
      const clickSelect = _Constant__WEBPACK_IMPORTED_MODULE_1__.handlerControl.mouseLeftDownSelect(inputInfo);
      const selectResults = this.pointSelect(inputInfo);
      if (clickSelect) {
        selectResults.add(clickSelect);
      } else {
        _Constant__WEBPACK_IMPORTED_MODULE_1__.handlerControl.clearProcessor();
      }
      if (this.items.size <= 0) {
        this.setSelectStatus(selectResults);
      } else {
        let hit = false;
        for (let [key, item] of this.items) {
          if (selectResults.has(item)) {
            hit = true;
            break;
          }
        }
        if (!hit) {
          this.setSelectStatus(selectResults);
        }
      }
      _Constant__WEBPACK_IMPORTED_MODULE_1__.handlerControl.updateProcessor(inputInfo, clickSelect);
      for (let elementItem of selectResults) {
        eventsManager.triggerEventHandlers(elementItem.elementItemId, _config_OperationProfile__WEBPACK_IMPORTED_MODULE_9__.EPointerEventName.POINTER_DOWN);
      }
    }
  }
  mouseMiddleDownHandler(inputInfo) {
    this.destorySelectionBox();
  }
  mouseRightDownHandler(inputInfo) {
    this.destorySelectionBox();
  }
  mouseLeftUpHandler(inputInfo) {
    this.destorySelectionBox();
    _Constant__WEBPACK_IMPORTED_MODULE_1__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_4__.EFrameCommand.REFRESH_RTREE, null);
    _Constant__WEBPACK_IMPORTED_MODULE_1__.handlerControl.mouseLeftUpHandler(inputInfo);
    if (_Constant__WEBPACK_IMPORTED_MODULE_1__.systemConfig.interactive.enableCanvasSelection) {
      if (this._isBoxSelection) {
        const selectResults = this.boxSelect(inputInfo);
        this.setSelectStatus(selectResults);
      }
    }
    this._leftDownRealScenePhysicsX = -Number.MAX_SAFE_INTEGER;
    this._leftDownRealScenePhysicsY = -Number.MAX_SAFE_INTEGER;
    _Constant__WEBPACK_IMPORTED_MODULE_1__.handlerControl.updateProcessor(inputInfo, null);
  }
  mouseMoveHandler(inputInfo) {
    if (inputInfo.leftMouseDown) {
      if (_Constant__WEBPACK_IMPORTED_MODULE_1__.systemConfig.interactive.enableCanvasSelection) {
        if (this.items.size <= 0) {
          if (!inputInfo.middleMouseDown && !inputInfo.rightMouseDown) {
            this._isBoxSelection = true;
            this.updateSelectionBox(inputInfo);
          } else {
            this._isBoxSelection = false;
            this.destorySelectionBox();
          }
        } else {
          this._isBoxSelection = false;
          this.destorySelectionBox();
          _Constant__WEBPACK_IMPORTED_MODULE_1__.handlerControl.mouseMoveHandler(inputInfo);
        }
      }
    } else {
      _Constant__WEBPACK_IMPORTED_MODULE_1__.handlerControl.mouseUpMoveHandler(inputInfo);
    }
  }
  /**
   * 获取点选图元集合(已过滤)
   */
  pointSelect(inputInfo) {
    const sourceResults = _Constant__WEBPACK_IMPORTED_MODULE_1__.filterController.pointSelectBeforeFilter(
      inputInfo.leftDownRealScenePhysicsX,
      inputInfo.leftDownRealScenePhysicsY
    );
    return sourceResults;
  }
  /**
   * 获取框选图元集合(已过滤)
   */
  boxSelect(inputInfo) {
    const rangeBBox2 = new _engine_common_geometry_bbox_BBox2__WEBPACK_IMPORTED_MODULE_7__.BBox2(
      this._leftDownRealScenePhysicsX,
      this._leftDownRealScenePhysicsY,
      inputInfo.moveRealScenePhysicsX,
      inputInfo.moveRealScenePhysicsY
    );
    const sourceResults = _Constant__WEBPACK_IMPORTED_MODULE_1__.filterController.boxSelectBeforeFilter(rangeBBox2);
    return sourceResults;
  }
  /**
   * 设置图元的选中样式
   * 		添加进选中图元集合
   * 		设置图元的选中样式
   */
  setSelectStatus(selectedItems) {
    for (let [key, item] of this.items) {
      item.setUnSelect();
    }
    this.items.clear();
    for (let selectedItem of selectedItems) {
      selectedItem.setSelect();
      this.items.set(selectedItem.elementItemId, selectedItem);
    }
  }
  /**
   * 创建或更新框选辅助虚线框
   */
  updateSelectionBox(inputInfo) {
    if (this._selectionBoxLines.length <= 0) {
      const line1 = (0,_objects_assist_primitive2d_D2AssistLineShape__WEBPACK_IMPORTED_MODULE_2__.buildD2AssistLineShape)(
        _config_DrawLayerProfile__WEBPACK_IMPORTED_MODULE_0__.EDrawLayerCode.MaskLayer,
        new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_6__.Vector2(inputInfo.leftDownRealScenePhysicsX, inputInfo.leftDownRealScenePhysicsY),
        new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_6__.Vector2(inputInfo.moveRealScenePhysicsX, inputInfo.leftDownRealScenePhysicsY),
        this._strokeWidth,
        _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_5__.Color.LIGHT_STEE_BLUE,
        1,
        false,
        _engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_11__.ECanvas2DLineCap.ROUND
      );
      const line2 = (0,_objects_assist_primitive2d_D2AssistLineShape__WEBPACK_IMPORTED_MODULE_2__.buildD2AssistLineShape)(
        _config_DrawLayerProfile__WEBPACK_IMPORTED_MODULE_0__.EDrawLayerCode.MaskLayer,
        new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_6__.Vector2(inputInfo.moveRealScenePhysicsX, inputInfo.leftDownRealScenePhysicsY),
        new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_6__.Vector2(inputInfo.moveRealScenePhysicsX, inputInfo.moveRealScenePhysicsY),
        this._strokeWidth,
        _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_5__.Color.LIGHT_STEE_BLUE,
        1,
        false,
        _engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_11__.ECanvas2DLineCap.ROUND
      );
      const line3 = (0,_objects_assist_primitive2d_D2AssistLineShape__WEBPACK_IMPORTED_MODULE_2__.buildD2AssistLineShape)(
        _config_DrawLayerProfile__WEBPACK_IMPORTED_MODULE_0__.EDrawLayerCode.MaskLayer,
        new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_6__.Vector2(inputInfo.leftDownRealScenePhysicsX, inputInfo.moveRealScenePhysicsY),
        new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_6__.Vector2(inputInfo.moveRealScenePhysicsX, inputInfo.moveRealScenePhysicsY),
        this._strokeWidth,
        _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_5__.Color.LIGHT_STEE_BLUE,
        1,
        false,
        _engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_11__.ECanvas2DLineCap.ROUND
      );
      const line4 = (0,_objects_assist_primitive2d_D2AssistLineShape__WEBPACK_IMPORTED_MODULE_2__.buildD2AssistLineShape)(
        _config_DrawLayerProfile__WEBPACK_IMPORTED_MODULE_0__.EDrawLayerCode.MaskLayer,
        new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_6__.Vector2(inputInfo.leftDownRealScenePhysicsX, inputInfo.leftDownRealScenePhysicsY),
        new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_6__.Vector2(inputInfo.leftDownRealScenePhysicsX, inputInfo.moveRealScenePhysicsY),
        this._strokeWidth,
        _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_5__.Color.LIGHT_STEE_BLUE,
        1,
        false,
        _engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_11__.ECanvas2DLineCap.ROUND
      );
      line1.segSize = line2.segSize = line3.segSize = line4.segSize = this._segSize;
      line1.gapSize = line2.gapSize = line3.gapSize = line4.gapSize = this._gapSize;
      this._selectionBoxLines.push(line1);
      this._selectionBoxLines.push(line2);
      this._selectionBoxLines.push(line3);
      this._selectionBoxLines.push(line4);
    } else {
      this._selectionBoxLines[0].endPoint = new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_6__.Vector2(inputInfo.moveRealScenePhysicsX, inputInfo.leftDownRealScenePhysicsY);
      this._selectionBoxLines[1].startPoint = new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_6__.Vector2(inputInfo.moveRealScenePhysicsX, inputInfo.leftDownRealScenePhysicsY);
      this._selectionBoxLines[1].endPoint = new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_6__.Vector2(inputInfo.moveRealScenePhysicsX, inputInfo.moveRealScenePhysicsY);
      this._selectionBoxLines[2].startPoint = new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_6__.Vector2(inputInfo.leftDownRealScenePhysicsX, inputInfo.moveRealScenePhysicsY);
      this._selectionBoxLines[2].endPoint = new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_6__.Vector2(inputInfo.moveRealScenePhysicsX, inputInfo.moveRealScenePhysicsY);
      this._selectionBoxLines[3].endPoint = new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_6__.Vector2(inputInfo.leftDownRealScenePhysicsX, inputInfo.moveRealScenePhysicsY);
    }
  }
  /**
   * 销毁框选辅助虚线框
   */
  destorySelectionBox() {
    for (let i = 0; i < this._selectionBoxLines.length; i++) {
      this._selectionBoxLines[i].setDelete();
    }
    this._selectionBoxLines.length = 0;
  }
}


/***/ }),

/***/ "./src/controller/systemConfig/CanvasAidedDesign.ts":
/*!**********************************************************!*\
  !*** ./src/controller/systemConfig/CanvasAidedDesign.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CanvasAidedDesign: () => (/* binding */ CanvasAidedDesign)
/* harmony export */ });
/* harmony import */ var _engine_common_AxisParam__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../engine/common/AxisParam */ "./src/engine/common/AxisParam.ts");


class CanvasAidedDesign {
  constructor() {
    this._alignGrid = false;
  }
  set enableGrid(value) {
    _engine_common_AxisParam__WEBPACK_IMPORTED_MODULE_0__.AxisParam.getInstance().isShowGrid = value;
  }
  get enableGrid() {
    return _engine_common_AxisParam__WEBPACK_IMPORTED_MODULE_0__.AxisParam.getInstance().isShowGrid;
  }
  set enableMultiGrid(value) {
    if (!_engine_common_AxisParam__WEBPACK_IMPORTED_MODULE_0__.AxisParam.getInstance().isShowGrid && value) {
      console.warn(`when enabling bold grids, the universal grid must be enabled first.`);
    }
    _engine_common_AxisParam__WEBPACK_IMPORTED_MODULE_0__.AxisParam.getInstance().isShowMultiGrid = value;
  }
  get enableMultiGrid() {
    return _engine_common_AxisParam__WEBPACK_IMPORTED_MODULE_0__.AxisParam.getInstance().isShowMultiGrid;
  }
  set enableGridDot(value) {
    _engine_common_AxisParam__WEBPACK_IMPORTED_MODULE_0__.AxisParam.getInstance().isShowGridDot = value;
  }
  get enableGridDot() {
    return _engine_common_AxisParam__WEBPACK_IMPORTED_MODULE_0__.AxisParam.getInstance().isShowGridDot;
  }
  set enableAxis(value) {
    _engine_common_AxisParam__WEBPACK_IMPORTED_MODULE_0__.AxisParam.getInstance().isShowAxis = value;
  }
  get enableAxis() {
    return _engine_common_AxisParam__WEBPACK_IMPORTED_MODULE_0__.AxisParam.getInstance().isShowAxis;
  }
  set alignGrid(value) {
    this._alignGrid = value;
  }
  get alignGrid() {
    return this._alignGrid;
  }
  get gridColor() {
    return _engine_common_AxisParam__WEBPACK_IMPORTED_MODULE_0__.AxisParam.getInstance().gridColor;
  }
  set gridColor(value) {
    _engine_common_AxisParam__WEBPACK_IMPORTED_MODULE_0__.AxisParam.getInstance().gridColor = value;
  }
  get gridAlpha() {
    return _engine_common_AxisParam__WEBPACK_IMPORTED_MODULE_0__.AxisParam.getInstance().gridAlpha;
  }
  set gridAlpha(value) {
    _engine_common_AxisParam__WEBPACK_IMPORTED_MODULE_0__.AxisParam.getInstance().gridAlpha = value;
  }
  get multiGridColor() {
    return _engine_common_AxisParam__WEBPACK_IMPORTED_MODULE_0__.AxisParam.getInstance().multiGridColor;
  }
  set multiGridColor(value) {
    _engine_common_AxisParam__WEBPACK_IMPORTED_MODULE_0__.AxisParam.getInstance().multiGridColor = value;
  }
  get multiGridAlpha() {
    return _engine_common_AxisParam__WEBPACK_IMPORTED_MODULE_0__.AxisParam.getInstance().multiGridAlpha;
  }
  set multiGridAlpha(value) {
    _engine_common_AxisParam__WEBPACK_IMPORTED_MODULE_0__.AxisParam.getInstance().multiGridAlpha = value;
  }
  get gridDotColor() {
    return _engine_common_AxisParam__WEBPACK_IMPORTED_MODULE_0__.AxisParam.getInstance().gridDotColor;
  }
  set gridDotColor(value) {
    _engine_common_AxisParam__WEBPACK_IMPORTED_MODULE_0__.AxisParam.getInstance().gridDotColor = value;
  }
  get gridDotAlpha() {
    return _engine_common_AxisParam__WEBPACK_IMPORTED_MODULE_0__.AxisParam.getInstance().gridAlpha;
  }
  set gridDotAlpha(value) {
    _engine_common_AxisParam__WEBPACK_IMPORTED_MODULE_0__.AxisParam.getInstance().gridAlpha = value;
  }
  get axisColor() {
    return _engine_common_AxisParam__WEBPACK_IMPORTED_MODULE_0__.AxisParam.getInstance().axisColor;
  }
  set axisColor(value) {
    _engine_common_AxisParam__WEBPACK_IMPORTED_MODULE_0__.AxisParam.getInstance().axisColor = value;
  }
  get axisAlpha() {
    return _engine_common_AxisParam__WEBPACK_IMPORTED_MODULE_0__.AxisParam.getInstance().axisAlpha;
  }
  set axisAlpha(value) {
    _engine_common_AxisParam__WEBPACK_IMPORTED_MODULE_0__.AxisParam.getInstance().axisAlpha = value;
  }
  toJSON() {
    return {
      enableGrid: this.enableGrid,
      enableMultiGrid: this.enableMultiGrid,
      enableGridDot: this.enableGridDot,
      enableAxis: this.enableAxis,
      /* ... */
      alignGrid: this.alignGrid,
      /* ... */
      gridColor: _engine_common_AxisParam__WEBPACK_IMPORTED_MODULE_0__.AxisParam.getInstance().gridColor,
      gridAlpha: _engine_common_AxisParam__WEBPACK_IMPORTED_MODULE_0__.AxisParam.getInstance().gridAlpha,
      multiGridColor: _engine_common_AxisParam__WEBPACK_IMPORTED_MODULE_0__.AxisParam.getInstance().multiGridColor,
      multiGridAlpha: _engine_common_AxisParam__WEBPACK_IMPORTED_MODULE_0__.AxisParam.getInstance().multiGridAlpha,
      gridDotColor: _engine_common_AxisParam__WEBPACK_IMPORTED_MODULE_0__.AxisParam.getInstance().gridDotColor,
      gridDotAlpha: _engine_common_AxisParam__WEBPACK_IMPORTED_MODULE_0__.AxisParam.getInstance().gridDotAlpha,
      axisColor: _engine_common_AxisParam__WEBPACK_IMPORTED_MODULE_0__.AxisParam.getInstance().axisColor,
      axisAlpha: _engine_common_AxisParam__WEBPACK_IMPORTED_MODULE_0__.AxisParam.getInstance().axisAlpha
    };
  }
}


/***/ }),

/***/ "./src/controller/systemConfig/Interactive.ts":
/*!****************************************************!*\
  !*** ./src/controller/systemConfig/Interactive.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Interactive: () => (/* binding */ Interactive)
/* harmony export */ });

class Interactive {
  constructor() {
    this._enableCanvasZoomChange = true;
    this._enableCanvasTranslate = true;
    this._enableCanvasSelection = true;
  }
  set enableCanvasZoomChange(value) {
    this._enableCanvasZoomChange = value;
  }
  get enableCanvasZoomChange() {
    return this._enableCanvasZoomChange;
  }
  set enableCanvasTranslate(value) {
    this._enableCanvasTranslate = value;
  }
  get enableCanvasTranslate() {
    return this._enableCanvasTranslate;
  }
  set enableCanvasSelection(value) {
    this._enableCanvasSelection = value;
  }
  get enableCanvasSelection() {
    return this._enableCanvasSelection;
  }
  toJSON() {
    return {
      enableCanvasZoomChange: this.enableCanvasZoomChange,
      enableCanvasTranslate: this.enableCanvasTranslate,
      enableCanvasSelection: this.enableCanvasSelection
    };
  }
}


/***/ }),

/***/ "./src/controller/systemConfig/SystemConfig.ts":
/*!*****************************************************!*\
  !*** ./src/controller/systemConfig/SystemConfig.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SystemConfig: () => (/* binding */ SystemConfig)
/* harmony export */ });
/* harmony import */ var _engine_config_CommonProfile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../engine/config/CommonProfile */ "./src/engine/config/CommonProfile.ts");
/* harmony import */ var _CanvasAidedDesign__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CanvasAidedDesign */ "./src/controller/systemConfig/CanvasAidedDesign.ts");
/* harmony import */ var _Interactive__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Interactive */ "./src/controller/systemConfig/Interactive.ts");
/* harmony import */ var _Theme__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Theme */ "./src/controller/systemConfig/Theme.ts");





class SystemConfig {
  constructor() {
    this._enbaleOperationMessagesNotify = true;
    this._coreEngineType = _engine_config_CommonProfile__WEBPACK_IMPORTED_MODULE_0__.ECoreEngineType.WEBGL2D;
    this._interactive = new _Interactive__WEBPACK_IMPORTED_MODULE_2__.Interactive();
    this._canvasAidedDesign = new _CanvasAidedDesign__WEBPACK_IMPORTED_MODULE_1__.CanvasAidedDesign();
    this._theme = new _Theme__WEBPACK_IMPORTED_MODULE_3__.Theme();
  }
  get enbaleOperationMessagesNotify() {
    return this._enbaleOperationMessagesNotify;
  }
  set enbaleOperationMessagesNotify(value) {
    this._enbaleOperationMessagesNotify = value;
  }
  get coreEngineType() {
    return this._coreEngineType;
  }
  set coreEngineType(value) {
    this._coreEngineType = value;
  }
  get interactive() {
    return this._interactive;
  }
  get canvasAidedDesign() {
    return this._canvasAidedDesign;
  }
  get theme() {
    return this._theme;
  }
  toJSON() {
    return {
      enbaleOperationMessagesNotify: this.enbaleOperationMessagesNotify,
      coreEngineType: this.coreEngineType,
      interactive: this.interactive.toJSON(),
      canvasAidedDesign: this.canvasAidedDesign.toJSON(),
      theme: this.theme.toJSON()
    };
  }
  update(moduleName, key, value) {
    if (moduleName === "Interactive") {
      if (typeof this.interactive[key] !== "undefined") {
        this.interactive[key] = value;
      }
      return;
    }
    if (moduleName === "CanvasAidedDesign") {
      if (typeof this.canvasAidedDesign[key] !== "undefined") {
        this.canvasAidedDesign[key] = value;
      }
      return;
    }
    if (moduleName === "Theme") {
      if (typeof this.theme[key] !== "undefined") {
        this.theme[key] = value;
      }
      return;
    }
  }
}


/***/ }),

/***/ "./src/controller/systemConfig/Theme.ts":
/*!**********************************************!*\
  !*** ./src/controller/systemConfig/Theme.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Theme: () => (/* binding */ Theme)
/* harmony export */ });
/* harmony import */ var _config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../config/CommandEnum */ "./src/config/CommandEnum.ts");
/* harmony import */ var _Constant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Constant */ "./src/Constant.ts");
/* harmony import */ var _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../engine/common/utils/Color */ "./src/engine/common/utils/Color.ts");




class Theme {
  constructor() {
    this._canvasBackgroundColor = _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_2__.Color.BLACK;
  }
  set canvasBackgroundColor(value) {
    this._canvasBackgroundColor = value;
    _Constant__WEBPACK_IMPORTED_MODULE_1__.environment.launcher.scene.canvasBackgroundColor = value;
    _Constant__WEBPACK_IMPORTED_MODULE_1__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EFrameCommand.RENDER_FRAME, null);
  }
  get canvasBackgroundColor() {
    return this._canvasBackgroundColor;
  }
  toJSON() {
    return {
      canvasBackgroundColor: this.canvasBackgroundColor
    };
  }
}


/***/ }),

/***/ "./src/engine/common/AxisParam.ts":
/*!****************************************!*\
  !*** ./src/engine/common/AxisParam.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AxisParam: () => (/* binding */ AxisParam)
/* harmony export */ });
/* harmony import */ var _Main__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Main */ "./src/Main.ts");
/* harmony import */ var _utils_Color__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/Color */ "./src/engine/common/utils/Color.ts");



class AxisParam {
  static getInstance() {
    if (AxisParam.instance === void 0) {
      AxisParam.instance = new AxisParam();
    }
    return AxisParam.instance;
  }
  constructor() {
    this._origin = _Main__WEBPACK_IMPORTED_MODULE_0__.Vector2.ORIGIN;
    this._isAntialias = true;
    this._isFlip = false;
    this._isShowGrid = true;
    this._isShowMultiGrid = true;
    this._isShowGridDot = true;
    this._isShowAxis = true;
    this._gridColor = _utils_Color__WEBPACK_IMPORTED_MODULE_1__.Color.GRAY;
    this._gridAlpha = 0.25;
    this._multiGridColor = _utils_Color__WEBPACK_IMPORTED_MODULE_1__.Color.DIM_GRAY;
    this._multiGridAlpha = 0.55;
    this._gridDotColor = _utils_Color__WEBPACK_IMPORTED_MODULE_1__.Color.DIM_GRAY;
    this._gridDotAlpha = 0.5;
    this._axisColor = _utils_Color__WEBPACK_IMPORTED_MODULE_1__.Color.WHITE;
    this._axisAlpha = 0.65;
    this._axisStepX = 0.5;
    this._axisStepY = 0.5;
    this._axisSnapX = 0.5;
    this._axisSnapY = 0.5;
    this._pattern = true;
    this._multiRatio = 5;
  }
  get origin() {
    return this._origin;
  }
  set origin(value) {
    this._origin = value;
  }
  get isAntialias() {
    return this._isAntialias;
  }
  set isAntialias(value) {
    this._isAntialias = value;
  }
  get isShowGrid() {
    return this._isShowGrid;
  }
  set isShowGrid(value) {
    this._isShowGrid = value;
  }
  get isShowMultiGrid() {
    return this._isShowMultiGrid;
  }
  set isShowMultiGrid(value) {
    this._isShowMultiGrid = value;
  }
  get isShowGridDot() {
    return this._isShowGridDot;
  }
  set isShowGridDot(value) {
    this._isShowGridDot = value;
  }
  get isShowAxis() {
    return this._isShowAxis;
  }
  set isShowAxis(value) {
    this._isShowAxis = value;
  }
  get isFlip() {
    return this._isFlip;
  }
  set isFlip(value) {
    this._isFlip = value;
  }
  get gridColor() {
    return this._gridColor;
  }
  set gridColor(value) {
    this._gridColor = value;
  }
  get gridAlpha() {
    return this._gridAlpha;
  }
  set gridAlpha(value) {
    this._gridAlpha = value;
  }
  get multiGridColor() {
    return this._multiGridColor;
  }
  set multiGridColor(value) {
    this._multiGridColor = value;
  }
  get multiGridAlpha() {
    return this._multiGridAlpha;
  }
  set multiGridAlpha(value) {
    this._multiGridAlpha = value;
  }
  get gridDotColor() {
    return this._gridDotColor;
  }
  set gridDotColor(value) {
    this._gridDotColor = value;
  }
  get gridDotAlpha() {
    return this._gridDotAlpha;
  }
  set gridDotAlpha(value) {
    this._gridDotAlpha = value;
  }
  get axisColor() {
    return this._axisColor;
  }
  set axisColor(value) {
    this._axisColor = value;
  }
  get axisAlpha() {
    return this._axisAlpha;
  }
  set axisAlpha(value) {
    this._axisAlpha = value;
  }
  get axisStepX() {
    return this._axisStepX;
  }
  set axisStepX(value) {
    this._axisStepX = value;
  }
  get axisStepY() {
    return this._axisStepY;
  }
  set axisStepY(value) {
    this._axisStepY = value;
  }
  get axisSnapX() {
    return this._axisSnapX;
  }
  set axisSnapX(value) {
    this._axisSnapX = value;
  }
  get axisSnapY() {
    return this._axisSnapY;
  }
  set axisSnapY(value) {
    this._axisSnapY = value;
  }
  get pattern() {
    return this._pattern;
  }
  set pattern(value) {
    this._pattern = value;
  }
  get multiRatio() {
    return this._multiRatio;
  }
  set multiRatio(value) {
    this._multiRatio = value;
  }
}


/***/ }),

/***/ "./src/engine/common/Camera.ts":
/*!*************************************!*\
  !*** ./src/engine/common/Camera.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Camera: () => (/* binding */ Camera),
/* harmony export */   EProjectionType: () => (/* binding */ EProjectionType)
/* harmony export */ });
/* harmony import */ var _geometry_matrix_CanvasMatrix4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./geometry/matrix/CanvasMatrix4 */ "./src/engine/common/geometry/matrix/CanvasMatrix4.ts");
/* harmony import */ var _geometry_matrix_Matrix4__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./geometry/matrix/Matrix4 */ "./src/engine/common/geometry/matrix/Matrix4.ts");
/* harmony import */ var _geometry_vector_Vector3__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./geometry/vector/Vector3 */ "./src/engine/common/geometry/vector/Vector3.ts");




var EProjectionType = /* @__PURE__ */ ((EProjectionType2) => {
  EProjectionType2["ORTH"] = "ORHT";
  EProjectionType2["PERS"] = "PERS";
  return EProjectionType2;
})(EProjectionType || {});
class Camera {
  static getInstance() {
    if (Camera.instance === void 0) {
      Camera.instance = new Camera(1920, 1080);
    }
    return Camera.instance;
  }
  constructor(width = 1920, height = 1080) {
    this._width = width;
    this._height = height;
    this._isNeedUpdate = false;
    this._lookForEyePosition = new _geometry_vector_Vector3__WEBPACK_IMPORTED_MODULE_2__.Vector3(0, 0, 0.1);
    this._lookForAtPosition = new _geometry_vector_Vector3__WEBPACK_IMPORTED_MODULE_2__.Vector3(0, 0, 0);
    this._projectionType = null;
    this._orthoProjection = {
      left: -1,
      right: 1,
      bottom: -1,
      top: 1,
      near: -100,
      far: 100
    };
    this._persProjection = {
      fovy: 89.999999,
      aspect: 1,
      near: 1,
      far: 50
    };
    this._rectProjectionMatrix4 = _geometry_matrix_Matrix4__WEBPACK_IMPORTED_MODULE_1__.Matrix4.ORIGIN;
    this._viewMatrix4 = _geometry_matrix_Matrix4__WEBPACK_IMPORTED_MODULE_1__.Matrix4.ORIGIN;
    this._scaleRatio = 1;
  }
  get width() {
    return this._width;
  }
  get height() {
    return this._height;
  }
  setProjectionType(projectionType) {
    if (this._projectionType === null && projectionType !== null) {
      this._projectionType = projectionType;
    }
  }
  updateRect(width, height) {
    this._width = width;
    this._height = height;
    this._isNeedUpdate = true;
    this._orthoProjection.left = -width / 2;
    this._orthoProjection.right = width / 2;
    this._orthoProjection.top = height / 2;
    this._orthoProjection.bottom = -height / 2;
  }
  getCenterSourcePixelPosition() {
    return new _geometry_vector_Vector3__WEBPACK_IMPORTED_MODULE_2__.Vector3(this.width / 2, -this.height / 2, 0);
  }
  getZoomRatio() {
    if (this._projectionType === "ORHT" /* ORTH */) {
      return this._scaleRatio;
    }
    return Math.sqrt(this._viewMatrix4.data[0] * this._viewMatrix4.data[0] + this._viewMatrix4.data[1] * this._viewMatrix4.data[1]);
  }
  getZoomMatrix4() {
    const scale = this.getZoomRatio();
    return _geometry_matrix_CanvasMatrix4__WEBPACK_IMPORTED_MODULE_0__.CanvasMatrix4.setScale(scale, scale, scale);
  }
  getInverseZoomMatrix4() {
    const scale = this.getZoomRatio();
    return _geometry_matrix_CanvasMatrix4__WEBPACK_IMPORTED_MODULE_0__.CanvasMatrix4.setScale(1 / scale, 1 / scale, 1 / scale);
  }
  setZoomRatio(value) {
    if (this._projectionType === "ORHT" /* ORTH */) {
      this._scaleRatio = value;
    }
    this._isNeedUpdate = true;
  }
  setMoveIncrement(vector3) {
    this._lookForEyePosition.x -= vector3.x;
    this._lookForEyePosition.y -= vector3.y;
    this._lookForAtPosition.x -= vector3.x;
    this._lookForAtPosition.y -= vector3.y;
    this._isNeedUpdate = true;
  }
  setMoveTo(vector3) {
    this._lookForEyePosition.x = -vector3.x;
    this._lookForEyePosition.y = -vector3.y;
    this._lookForAtPosition.x = -vector3.x;
    this._lookForAtPosition.y = -vector3.y;
    this._isNeedUpdate = true;
  }
  /**
   * 获取视线矩阵
   */
  getLookMatrix4() {
    return _geometry_matrix_CanvasMatrix4__WEBPACK_IMPORTED_MODULE_0__.CanvasMatrix4.setLookAt(
      new _geometry_vector_Vector3__WEBPACK_IMPORTED_MODULE_2__.Vector3(this._lookForEyePosition.x, this._lookForEyePosition.y, this._lookForEyePosition.z),
      new _geometry_vector_Vector3__WEBPACK_IMPORTED_MODULE_2__.Vector3(this._lookForAtPosition.x, this._lookForAtPosition.y, this._lookForAtPosition.z),
      new _geometry_vector_Vector3__WEBPACK_IMPORTED_MODULE_2__.Vector3(0, 1, 0)
    );
  }
  /**
   * 获取透视矩阵
   */
  getProjectionMatrix4() {
    let projectionMatrix4 = null;
    if (this._projectionType === "ORHT" /* ORTH */) {
      projectionMatrix4 = this.getRectProjectionMatrix4();
      const scaleMatrix4 = _geometry_matrix_CanvasMatrix4__WEBPACK_IMPORTED_MODULE_0__.CanvasMatrix4.setScale(this._scaleRatio, this._scaleRatio, this._scaleRatio);
      projectionMatrix4 = projectionMatrix4.multiply4(scaleMatrix4);
    } else {
      projectionMatrix4 = _geometry_matrix_CanvasMatrix4__WEBPACK_IMPORTED_MODULE_0__.CanvasMatrix4.setPerspective(
        this._persProjection.fovy,
        this._persProjection.aspect,
        this._persProjection.near,
        this._persProjection.far
      );
    }
    return projectionMatrix4;
  }
  /**
   * 获取变换矩阵
   */
  getViewMatrix4(prevUpdate = false) {
    if (prevUpdate) {
      this._isNeedUpdate = true;
      this.updateViewMatrix4();
    }
    return this._viewMatrix4;
  }
  /**
   * 获取 Canvas 透视矩阵
   */
  getRectProjectionMatrix4() {
    return _geometry_matrix_CanvasMatrix4__WEBPACK_IMPORTED_MODULE_0__.CanvasMatrix4.setOrtho(
      this._orthoProjection.left,
      this._orthoProjection.right,
      this._orthoProjection.bottom,
      this._orthoProjection.top,
      this._orthoProjection.near,
      this._orthoProjection.far
    );
  }
  updateViewMatrix4() {
    if (this._isNeedUpdate) {
      const lookMatrix4 = this.getLookMatrix4();
      const projectionMatrix4 = this.getProjectionMatrix4();
      this._viewMatrix4 = lookMatrix4.multiply4(projectionMatrix4);
      this._isNeedUpdate = false;
    }
  }
}


/***/ }),

/***/ "./src/engine/common/InsConfig.ts":
/*!****************************************!*\
  !*** ./src/engine/common/InsConfig.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   InsConfig: () => (/* binding */ InsConfig)
/* harmony export */ });

class InsConfig {
}
InsConfig.DPI = [100, 100];


/***/ }),

/***/ "./src/engine/common/Light.ts":
/*!************************************!*\
  !*** ./src/engine/common/Light.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EIluType: () => (/* binding */ EIluType),
/* harmony export */   Light: () => (/* binding */ Light)
/* harmony export */ });
/* harmony import */ var _geometry_vector_Vector3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./geometry/vector/Vector3 */ "./src/engine/common/geometry/vector/Vector3.ts");
/* harmony import */ var _utils_Color__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/Color */ "./src/engine/common/utils/Color.ts");



var EIluType = /* @__PURE__ */ ((EIluType2) => {
  EIluType2["SPOT"] = "SPOT";
  EIluType2["PARA"] = "PARA";
  return EIluType2;
})(EIluType || {});
class Light {
  static getInstance() {
    if (Light.instance === void 0) {
      Light.instance = new Light();
    }
    return Light.instance;
  }
  constructor() {
    this._iluType = "PARA" /* PARA */;
    this._direction = new _geometry_vector_Vector3__WEBPACK_IMPORTED_MODULE_0__.Vector3(-1, -2, -3);
    this._position = new _geometry_vector_Vector3__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, 0, 0);
    this._color = _utils_Color__WEBPACK_IMPORTED_MODULE_1__.Color.WHITE;
    this._ambient = _utils_Color__WEBPACK_IMPORTED_MODULE_1__.Color.WHITE;
  }
  get iluType() {
    return this._iluType;
  }
  set iluType(value) {
    this._iluType = value;
  }
  get direction() {
    return this._direction;
  }
  set direction(value) {
    this._direction = value;
  }
  get position() {
    return this._position;
  }
  set position(value) {
    this._position = value;
  }
  get color() {
    return this._color;
  }
  set color(value) {
    this._color = value;
  }
  get ambient() {
    return this._ambient;
  }
  set ambient(value) {
    this._ambient = value;
  }
}


/***/ }),

/***/ "./src/engine/common/Plane.ts":
/*!************************************!*\
  !*** ./src/engine/common/Plane.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Plane: () => (/* binding */ Plane)
/* harmony export */ });
/* harmony import */ var _utils_Color__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/Color */ "./src/engine/common/utils/Color.ts");


class Plane {
  constructor(sceneInstance, planeId) {
    this._scene = sceneInstance;
    this._planeId = planeId;
  }
  get scene() {
    return this._scene;
  }
  get planeId() {
    return this._planeId;
  }
  getColorData(alpha = 1) {
    const color = _utils_Color__WEBPACK_IMPORTED_MODULE_0__.Color.RED;
    const data = new Float32Array(4);
    data[0] = color.r;
    data[1] = color.g;
    data[2] = color.b;
    data[3] = alpha * color.a;
    return data;
  }
  getColorAlpha() {
    return 1;
  }
}


/***/ }),

/***/ "./src/engine/common/PrimitiveObject.ts":
/*!**********************************************!*\
  !*** ./src/engine/common/PrimitiveObject.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PrimitiveObject: () => (/* binding */ PrimitiveObject)
/* harmony export */ });

class PrimitiveObject {
  constructor() {
    this._primitiveItemBitIndex = void 0;
  }
  get primitiveItemBitIndex() {
    return this._primitiveItemBitIndex;
  }
  set primitiveItemBitIndex(value) {
    this._primitiveItemBitIndex = value;
  }
}


/***/ }),

/***/ "./src/engine/common/Renderer.ts":
/*!***************************************!*\
  !*** ./src/engine/common/Renderer.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Renderer: () => (/* binding */ Renderer)
/* harmony export */ });
/* harmony import */ var _geometry_vector_Vector3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./geometry/vector/Vector3 */ "./src/engine/common/geometry/vector/Vector3.ts");


class Renderer {
  constructor(canvasElement) {
    this._canvasElement = canvasElement;
    this._ctx = null;
    this._gl = null;
    this._width = 0;
    this._height = 0;
    this._origin = _geometry_vector_Vector3__WEBPACK_IMPORTED_MODULE_0__.Vector3.ORIGIN;
  }
  get ctx() {
    return this._ctx;
  }
  set ctx(value) {
    this._ctx = value;
  }
  get gl() {
    return this._gl;
  }
  set gl(value) {
    this._gl = value;
  }
  get canvasElement() {
    return this._canvasElement;
  }
  get width() {
    return this._width;
  }
  get height() {
    return this._height;
  }
  get origin() {
    return this._origin;
  }
  set origin(value) {
    this._origin = value;
  }
  updateRect(width, height) {
    this._width = width;
    this._height = height;
  }
  updateOrigin(origin) {
    this._origin = origin;
  }
}


/***/ }),

/***/ "./src/engine/common/Scene.ts":
/*!************************************!*\
  !*** ./src/engine/common/Scene.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Scene: () => (/* binding */ Scene)
/* harmony export */ });
/* harmony import */ var _utils_Color__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/Color */ "./src/engine/common/utils/Color.ts");


class Scene {
  constructor() {
    this._canvasBackgroundColor = new _utils_Color__WEBPACK_IMPORTED_MODULE_0__.Color(0, 0, 0, 1);
    this._camera = null;
    this._is3D = false;
  }
  get renderer() {
    return this._renderer;
  }
  set renderer(value) {
    this._renderer = value;
  }
  get canvasBackgroundColor() {
    return this._canvasBackgroundColor;
  }
  set canvasBackgroundColor(value) {
    this._canvasBackgroundColor = value;
  }
  get camera() {
    return this._camera;
  }
  set camera(value) {
    this._camera = value;
  }
  get is3D() {
    return this._is3D;
  }
  set is3D(value) {
    this._is3D = value;
  }
}


/***/ }),

/***/ "./src/engine/common/algorithm/RBTree/RBTree.ts":
/*!******************************************************!*\
  !*** ./src/engine/common/algorithm/RBTree/RBTree.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   RBTree: () => (/* binding */ RBTree),
/* harmony export */   RBTreeNode: () => (/* binding */ RBTreeNode),
/* harmony export */   createRBTree: () => (/* binding */ createRBTree)
/* harmony export */ });

var ERBTREE_COLOR = /* @__PURE__ */ ((ERBTREE_COLOR2) => {
  ERBTREE_COLOR2["RED"] = "RED";
  ERBTREE_COLOR2["BLACK"] = "BLACK";
  return ERBTREE_COLOR2;
})(ERBTREE_COLOR || {});
function defaultCompare(a, b) {
  if (a < b) {
    return -1;
  }
  if (a > b) {
    return 1;
  }
  return 0;
}
function cloneNode(node) {
  return new RBTreeNode(node.color, node.key, node.value, node.left, node.right, node.count);
}
function repaint(color, node) {
  return new RBTreeNode(color, node.key, node.value, node.left, node.right, node.count);
}
function recount(node) {
  node.count = 1 + (node.left ? node.left.count : 0) + (node.right ? node.right.count : 0);
}
function doVisit(lo, hi, compare, visit, node) {
  let l = compare(lo, node.key);
  let h = compare(hi, node.key);
  let v = void 0;
  if (l <= 0) {
    if (node.left) {
      v = doVisit(lo, hi, compare, visit, node.left);
      if (v) {
        return v;
      }
    }
    if (h > 0) {
      v = visit(node.key, node.value);
      if (v) {
        return v;
      }
    }
  }
  if (h > 0 && node.right) {
    return doVisit(lo, hi, compare, visit, node.right);
  }
}
function doVisitHalf(lo, compare, visit, node) {
  const l = compare(lo, node.key);
  if (l <= 0) {
    if (node.left) {
      const v2 = doVisitHalf(lo, compare, visit, node.left);
      if (v2) {
        return v2;
      }
    }
    const v = visit(node.key, node.value);
    if (v) {
      return v;
    }
  }
  if (node.right) {
    return doVisitHalf(lo, compare, visit, node.right);
  }
}
function doVisitFull(visit, node) {
  if (node.left) {
    const v2 = doVisitFull(visit, node.left);
    if (v2) {
      return v2;
    }
  }
  const v = visit(node.key, node.value);
  if (v) {
    return v;
  }
  if (node.right) {
    return doVisitFull(visit, node.right);
  }
}
function swapNode(n, v) {
  n.key = v.key;
  n.value = v.value;
  n.left = v.left;
  n.right = v.right;
  n.color = v.color;
  n.count = v.count;
}
function fixDoubleBlack(stack) {
  let n = null;
  let p = null;
  let s = null;
  let z = null;
  for (let i = stack.length - 1; i >= 0; --i) {
    n = stack[i];
    if (i === 0) {
      n.color = "BLACK" /* BLACK */;
      return;
    }
    p = stack[i - 1];
    if (p.left === n) {
      s = p.right;
      if (s.right && s.right.color === "RED" /* RED */) {
        s = p.right = cloneNode(s);
        z = s.right = cloneNode(s.right);
        p.right = s.left;
        s.left = p;
        s.right = z;
        s.color = p.color;
        n.color = "BLACK" /* BLACK */;
        p.color = "BLACK" /* BLACK */;
        z.color = "BLACK" /* BLACK */;
        recount(p);
        recount(s);
        if (i > 1) {
          let pp = stack[i - 2];
          if (pp.left === p) {
            pp.left = s;
          } else {
            pp.right = s;
          }
        }
        stack[i - 1] = s;
        return;
      } else if (s.left && s.left.color === "RED" /* RED */) {
        s = p.right = cloneNode(s);
        z = s.left = cloneNode(s.left);
        p.right = z.left;
        s.left = z.right;
        z.left = p;
        z.right = s;
        z.color = p.color;
        p.color = "BLACK" /* BLACK */;
        s.color = "BLACK" /* BLACK */;
        n.color = "BLACK" /* BLACK */;
        recount(p);
        recount(s);
        recount(z);
        if (i > 1) {
          let pp = stack[i - 2];
          if (pp.left === p) {
            pp.left = z;
          } else {
            pp.right = z;
          }
        }
        stack[i - 1] = z;
        return;
      }
      if (s.color === "BLACK" /* BLACK */) {
        if (p.color === "RED" /* RED */) {
          p.color = "BLACK" /* BLACK */;
          p.right = repaint("RED" /* RED */, s);
          return;
        } else {
          p.right = repaint("RED" /* RED */, s);
          continue;
        }
      } else {
        s = cloneNode(s);
        p.right = s.left;
        s.left = p;
        s.color = p.color;
        p.color = "RED" /* RED */;
        recount(p);
        recount(s);
        if (i > 1) {
          let pp = stack[i - 2];
          if (pp.left === p) {
            pp.left = s;
          } else {
            pp.right = s;
          }
        }
        stack[i - 1] = s;
        stack[i] = p;
        if (i + 1 < stack.length) {
          stack[i + 1] = n;
        } else {
          stack.push(n);
        }
        i = i + 2;
      }
    } else {
      s = p.left;
      if (s.left && s.left.color === "RED" /* RED */) {
        s = p.left = cloneNode(s);
        z = s.left = cloneNode(s.left);
        p.left = s.right;
        s.right = p;
        s.left = z;
        s.color = p.color;
        n.color = "BLACK" /* BLACK */;
        p.color = "BLACK" /* BLACK */;
        z.color = "BLACK" /* BLACK */;
        recount(p);
        recount(s);
        if (i > 1) {
          let pp = stack[i - 2];
          if (pp.right === p) {
            pp.right = s;
          } else {
            pp.left = s;
          }
        }
        stack[i - 1] = s;
        return;
      } else if (s.right && s.right.color === "RED" /* RED */) {
        s = p.left = cloneNode(s);
        z = s.right = cloneNode(s.right);
        p.left = z.right;
        s.right = z.left;
        z.right = p;
        z.left = s;
        z.color = p.color;
        p.color = "BLACK" /* BLACK */;
        s.color = "BLACK" /* BLACK */;
        n.color = "BLACK" /* BLACK */;
        recount(p);
        recount(s);
        recount(z);
        if (i > 1) {
          let pp = stack[i - 2];
          if (pp.right === p) {
            pp.right = z;
          } else {
            pp.left = z;
          }
        }
        stack[i - 1] = z;
        return;
      }
      if (s.color === "BLACK" /* BLACK */) {
        if (p.color === "RED" /* RED */) {
          p.color = "BLACK" /* BLACK */;
          p.left = repaint("RED" /* RED */, s);
          return;
        } else {
          p.left = repaint("RED" /* RED */, s);
          continue;
        }
      } else {
        s = cloneNode(s);
        p.left = s.right;
        s.right = p;
        s.color = p.color;
        p.color = "RED" /* RED */;
        recount(p);
        recount(s);
        if (i > 1) {
          let pp = stack[i - 2];
          if (pp.right === p) {
            pp.right = s;
          } else {
            pp.left = s;
          }
        }
        stack[i - 1] = s;
        stack[i] = p;
        if (i + 1 < stack.length) {
          stack[i + 1] = n;
        } else {
          stack.push(n);
        }
        i = i + 2;
      }
    }
  }
}
class RBTreeNode {
  constructor(color, key, value, left, right, count) {
    this._color = color;
    this._key = key;
    this._value = value;
    this._left = left;
    this._right = right;
    this._count = count;
  }
  get color() {
    return this._color;
  }
  set color(value) {
    this._color = value;
  }
  get key() {
    return this._key;
  }
  set key(value) {
    this._key = value;
  }
  get value() {
    return this._value;
  }
  set value(value) {
    this._value = value;
  }
  get left() {
    return this._left;
  }
  set left(value) {
    this._left = value;
  }
  get right() {
    return this._right;
  }
  set right(value) {
    this._right = value;
  }
  get count() {
    return this._count;
  }
  set count(value) {
    this._count = value;
  }
}
class RBTree {
  constructor(compare, root) {
    this._compare = compare;
    this._root = root;
  }
  get compare() {
    return this._compare;
  }
  set compare(value) {
    this._compare = value;
  }
  get root() {
    return this._root;
  }
  set root(value) {
    this._root = value;
  }
  get keys() {
    const result = [];
    this.forEach((k, v) => {
      result.push(k);
    });
    return result;
  }
  get values() {
    const result = [];
    this.forEach((k, v) => {
      result.push(v);
    });
    return result;
  }
  get length() {
    if (this.root) {
      return this.root.count;
    }
    return 0;
  }
  get begin() {
    let stack = [];
    let n = this.root;
    while (n) {
      stack.push(n);
      n = n.left;
    }
    return new RedBlackTreeIterator(this, stack);
  }
  get end() {
    let stack = [];
    let n = this.root;
    while (n) {
      stack.push(n);
      n = n.right;
    }
    return new RedBlackTreeIterator(this, stack);
  }
  forEach(visit, lo, hi) {
    if (!this.root) {
      return;
    }
    switch (arguments.length) {
      case 1:
        return doVisitFull(visit, this.root);
      case 2:
        return doVisitHalf(lo, this.compare, visit, this.root);
      case 3:
        if (this.compare(lo, hi) >= 0) {
          return;
        }
        return doVisit(lo, hi, this.compare, visit, this.root);
    }
  }
  insert(key, value) {
    let cmp = this.compare;
    let n = this.root;
    let n_stack = [];
    let d_stack = [];
    while (n) {
      let d = cmp(key, n.key);
      n_stack.push(n);
      d_stack.push(d);
      if (d <= 0) {
        n = n.left;
      } else {
        n = n.right;
      }
    }
    n_stack.push(new RBTreeNode("RED" /* RED */, key, value, null, null, 1));
    for (let s = n_stack.length - 2; s >= 0; --s) {
      let n2 = n_stack[s];
      if (d_stack[s] <= 0) {
        n_stack[s] = new RBTreeNode(n2.color, n2.key, n2.value, n_stack[s + 1], n2.right, n2.count + 1);
      } else {
        n_stack[s] = new RBTreeNode(n2.color, n2.key, n2.value, n2.left, n_stack[s + 1], n2.count + 1);
      }
    }
    for (let s = n_stack.length - 1; s > 1; --s) {
      let p = n_stack[s - 1];
      let n2 = n_stack[s];
      if (p.color === "BLACK" /* BLACK */ || n2.color === "BLACK" /* BLACK */) {
        break;
      }
      let pp = n_stack[s - 2];
      if (pp.left === p) {
        if (p.left === n2) {
          let y = pp.right;
          if (y && y.color === "RED" /* RED */) {
            p.color = "BLACK" /* BLACK */;
            pp.right = repaint("BLACK" /* BLACK */, y);
            pp.color = "RED" /* RED */;
            s -= 1;
          } else {
            pp.color = "RED" /* RED */;
            pp.left = p.right;
            p.color = "BLACK" /* BLACK */;
            p.right = pp;
            n_stack[s - 2] = p;
            n_stack[s - 1] = n2;
            recount(pp);
            recount(p);
            if (s >= 3) {
              let ppp = n_stack[s - 3];
              if (ppp.left === pp) {
                ppp.left = p;
              } else {
                ppp.right = p;
              }
            }
            break;
          }
        } else {
          let y = pp.right;
          if (y && y.color === "RED" /* RED */) {
            p.color = "BLACK" /* BLACK */;
            pp.right = repaint("BLACK" /* BLACK */, y);
            pp.color = "RED" /* RED */;
            s -= 1;
          } else {
            p.right = n2.left;
            pp.color = "RED" /* RED */;
            pp.left = n2.right;
            n2.color = "BLACK" /* BLACK */;
            n2.left = p;
            n2.right = pp;
            n_stack[s - 2] = n2;
            n_stack[s - 1] = p;
            recount(pp);
            recount(p);
            recount(n2);
            if (s >= 3) {
              let ppp = n_stack[s - 3];
              if (ppp.left === pp) {
                ppp.left = n2;
              } else {
                ppp.right = n2;
              }
            }
            break;
          }
        }
      } else {
        if (p.right === n2) {
          let y = pp.left;
          if (y && y.color === "RED" /* RED */) {
            p.color = "BLACK" /* BLACK */;
            pp.left = repaint("BLACK" /* BLACK */, y);
            pp.color = "RED" /* RED */;
            s -= 1;
          } else {
            pp.color = "RED" /* RED */;
            pp.right = p.left;
            p.color = "BLACK" /* BLACK */;
            p.left = pp;
            n_stack[s - 2] = p;
            n_stack[s - 1] = n2;
            recount(pp);
            recount(p);
            if (s >= 3) {
              let ppp = n_stack[s - 3];
              if (ppp.right === pp) {
                ppp.right = p;
              } else {
                ppp.left = p;
              }
            }
            break;
          }
        } else {
          let y = pp.left;
          if (y && y.color === "RED" /* RED */) {
            p.color = "BLACK" /* BLACK */;
            pp.left = repaint("BLACK" /* BLACK */, y);
            pp.color = "RED" /* RED */;
            s -= 1;
          } else {
            p.left = n2.right;
            pp.color = "RED" /* RED */;
            pp.right = n2.left;
            n2.color = "BLACK" /* BLACK */;
            n2.right = p;
            n2.left = pp;
            n_stack[s - 2] = n2;
            n_stack[s - 1] = p;
            recount(pp);
            recount(p);
            recount(n2);
            if (s >= 3) {
              let ppp = n_stack[s - 3];
              if (ppp.right === pp) {
                ppp.right = n2;
              } else {
                ppp.left = n2;
              }
            }
            break;
          }
        }
      }
    }
    n_stack[0].color = "BLACK" /* BLACK */;
    return new RBTree(cmp, n_stack[0]);
  }
  at(idx) {
    if (idx < 0) {
      return new RedBlackTreeIterator(this, []);
    }
    let n = this.root;
    let stack = [];
    while (true) {
      stack.push(n);
      if (n.left) {
        if (idx < n.left.count) {
          n = n.left;
          continue;
        }
        idx -= n.left.count;
      }
      if (!idx) {
        return new RedBlackTreeIterator(this, stack);
      }
      idx -= 1;
      if (n.right) {
        if (idx >= n.right.count) {
          break;
        }
        n = n.right;
      } else {
        break;
      }
    }
    return new RedBlackTreeIterator(this, []);
  }
  ge(key) {
    let cmp = this.compare;
    let n = this.root;
    let stack = [];
    let last_ptr = 0;
    while (n) {
      let d = cmp(key, n.key);
      stack.push(n);
      if (d <= 0) {
        last_ptr = stack.length;
      }
      if (d <= 0) {
        n = n.left;
      } else {
        n = n.right;
      }
    }
    stack.length = last_ptr;
    return new RedBlackTreeIterator(this, stack);
  }
  gt(key) {
    let cmp = this.compare;
    let n = this.root;
    let stack = [];
    let last_ptr = 0;
    while (n) {
      let d = cmp(key, n.key);
      stack.push(n);
      if (d < 0) {
        last_ptr = stack.length;
      }
      if (d < 0) {
        n = n.left;
      } else {
        n = n.right;
      }
    }
    stack.length = last_ptr;
    return new RedBlackTreeIterator(this, stack);
  }
  lt(key) {
    let cmp = this.compare;
    let n = this.root;
    let stack = [];
    let last_ptr = 0;
    while (n) {
      let d = cmp(key, n.key);
      stack.push(n);
      if (d > 0) {
        last_ptr = stack.length;
      }
      if (d <= 0) {
        n = n.left;
      } else {
        n = n.right;
      }
    }
    stack.length = last_ptr;
    return new RedBlackTreeIterator(this, stack);
  }
  le(key) {
    let cmp = this.compare;
    let n = this.root;
    let stack = [];
    let last_ptr = 0;
    while (n) {
      let d = cmp(key, n.key);
      stack.push(n);
      if (d >= 0) {
        last_ptr = stack.length;
      }
      if (d < 0) {
        n = n.left;
      } else {
        n = n.right;
      }
    }
    stack.length = last_ptr;
    return new RedBlackTreeIterator(this, stack);
  }
  find(key) {
    let cmp = this.compare;
    let n = this.root;
    let stack = [];
    while (n) {
      let d = cmp(key, n.key);
      stack.push(n);
      if (d === 0) {
        return new RedBlackTreeIterator(this, stack);
      }
      if (d <= 0) {
        n = n.left;
      } else {
        n = n.right;
      }
    }
    return new RedBlackTreeIterator(this, []);
  }
  remove(key) {
    const iter = this.find(key);
    if (iter) {
      return iter.remove();
    }
    return this;
  }
  get(key) {
    let cmp = this.compare;
    let n = this.root;
    while (n) {
      let d = cmp(key, n.key);
      if (d === 0) {
        return n.value;
      }
      if (d <= 0) {
        n = n.left;
      } else {
        n = n.right;
      }
    }
    return;
  }
}
class RedBlackTreeIterator {
  constructor(tree, stack) {
    this._tree = tree;
    this._stack = stack;
  }
  get tree() {
    return this._tree;
  }
  set tree(value) {
    this._tree = value;
  }
  get stack() {
    return this._stack;
  }
  set stack(value) {
    this._stack = value;
  }
  get valid() {
    return this._stack.length > 0;
  }
  get hasPrev() {
    let stack = this.stack;
    if (stack.length === 0) {
      return false;
    }
    if (stack[stack.length - 1].left) {
      return true;
    }
    for (let s = stack.length - 1; s > 0; --s) {
      if (stack[s - 1].right === stack[s]) {
        return true;
      }
    }
    return false;
  }
  get hasNext() {
    let stack = this._stack;
    if (stack.length === 0) {
      return false;
    }
    if (stack[stack.length - 1].right) {
      return true;
    }
    for (let s = stack.length - 1; s > 0; --s) {
      if (stack[s - 1].left === stack[s]) {
        return true;
      }
    }
    return false;
  }
  clone() {
    return new RedBlackTreeIterator(this.tree, this._stack.slice());
  }
  remove() {
    let stack = this.stack;
    if (stack.length === 0) {
      return this.tree;
    }
    let cstack = new Array(stack.length);
    let n = stack[stack.length - 1];
    cstack[cstack.length - 1] = new RBTreeNode(n.color, n.key, n.value, n.left, n.right, n.count);
    for (let i = stack.length - 2; i >= 0; --i) {
      let n2 = stack[i];
      if (n2.left === stack[i + 1]) {
        cstack[i] = new RBTreeNode(n2.color, n2.key, n2.value, cstack[i + 1], n2.right, n2.count);
      } else {
        cstack[i] = new RBTreeNode(n2.color, n2.key, n2.value, n2.left, cstack[i + 1], n2.count);
      }
    }
    n = cstack[cstack.length - 1];
    if (n.left && n.right) {
      let split = cstack.length;
      n = n.left;
      while (n.right) {
        cstack.push(n);
        n = n.right;
      }
      let v = cstack[split - 1];
      cstack.push(new RBTreeNode(n.color, v.key, v.value, n.left, n.right, n.count));
      cstack[split - 1].key = n.key;
      cstack[split - 1].value = n.value;
      for (let i = cstack.length - 2; i >= split; --i) {
        n = cstack[i];
        cstack[i] = new RBTreeNode(n.color, n.key, n.value, n.left, cstack[i + 1], n.count);
      }
      cstack[split - 1].left = cstack[split];
    }
    n = cstack[cstack.length - 1];
    if (n.color === "RED" /* RED */) {
      let p = cstack[cstack.length - 2];
      if (p.left === n) {
        p.left = null;
      } else if (p.right === n) {
        p.right = null;
      }
      cstack.pop();
      for (let i = 0; i < cstack.length; ++i) {
        cstack[i].count--;
      }
      return new RBTree(this.tree.compare, cstack[0]);
    } else {
      if (n.left || n.right) {
        if (n.left) {
          swapNode(n, n.left);
        } else if (n.right) {
          swapNode(n, n.right);
        }
        n.color = "BLACK" /* BLACK */;
        for (let i = 0; i < cstack.length - 1; ++i) {
          cstack[i].count--;
        }
        return new RBTree(this.tree.compare, cstack[0]);
      } else if (cstack.length === 1) {
        return new RBTree(this.tree.compare, null);
      } else {
        for (let i = 0; i < cstack.length; ++i) {
          cstack[i].count--;
        }
        let parent = cstack[cstack.length - 2];
        fixDoubleBlack(cstack);
        if (parent.left === n) {
          parent.left = null;
        } else {
          parent.right = null;
        }
      }
    }
    return new RBTree(this.tree.compare, cstack[0]);
  }
  next() {
    let stack = this._stack;
    if (stack.length === 0) {
      return;
    }
    let n = stack[stack.length - 1];
    if (n.right) {
      n = n.right;
      while (n) {
        stack.push(n);
        n = n.left;
      }
    } else {
      stack.pop();
      while (stack.length > 0 && stack[stack.length - 1].right === n) {
        n = stack[stack.length - 1];
        stack.pop();
      }
    }
  }
  prev() {
    let stack = this._stack;
    if (stack.length === 0) {
      return;
    }
    let n = stack[stack.length - 1];
    if (n.left) {
      n = n.left;
      while (n) {
        stack.push(n);
        n = n.right;
      }
    } else {
      stack.pop();
      while (stack.length > 0 && stack[stack.length - 1].left === n) {
        n = stack[stack.length - 1];
        stack.pop();
      }
    }
  }
  update(value) {
    let stack = this._stack;
    if (stack.length === 0) {
      throw new Error("Can't update empty node!");
    }
    let cstack = new Array(stack.length);
    let n = stack[stack.length - 1];
    cstack[cstack.length - 1] = new RBTreeNode(n.color, n.key, value, n.left, n.right, n.count);
    for (let i = stack.length - 2; i >= 0; --i) {
      n = stack[i];
      if (n.left === stack[i + 1]) {
        cstack[i] = new RBTreeNode(n.color, n.key, n.value, cstack[i + 1], n.right, n.count);
      } else {
        cstack[i] = new RBTreeNode(n.color, n.key, n.value, n.left, cstack[i + 1], n.count);
      }
    }
    return new RBTree(this.tree.compare, cstack[0]);
  }
}
Object.defineProperty(RedBlackTreeIterator.prototype, "node", {
  get: function() {
    if (this.stack.length > 0) {
      return this.stack[this.stack.length - 1];
    }
    return null;
  },
  enumerable: true
});
Object.defineProperty(RedBlackTreeIterator.prototype, "key", {
  get: function() {
    if (this._stack.length > 0) {
      return this._stack[this._stack.length - 1].key;
    }
    return void 0;
  },
  enumerable: true
});
Object.defineProperty(RedBlackTreeIterator.prototype, "value", {
  get: function() {
    if (this._stack.length > 0) {
      return this._stack[this._stack.length - 1].value;
    }
    return void 0;
  },
  enumerable: true
});
Object.defineProperty(RedBlackTreeIterator.prototype, "index", {
  get: function() {
    let idx = 0;
    let stack = this._stack;
    if (stack.length === 0) {
      let r = this.tree.root;
      if (r) {
        return r.count;
      }
      return 0;
    } else if (stack[stack.length - 1].left) {
      idx = stack[stack.length - 1].left.count;
    }
    for (let s = stack.length - 2; s >= 0; --s) {
      if (stack[s + 1] === stack[s].right) {
        ++idx;
        if (stack[s].left) {
          idx += stack[s].left.count;
        }
      }
    }
    return idx;
  },
  enumerable: true
});
function createRBTree(compare) {
  return new RBTree(compare || defaultCompare, null);
}


/***/ }),

/***/ "./src/engine/common/algorithm/binarySearchBounds/binarySearchBounds.ts":
/*!******************************************************************************!*\
  !*** ./src/engine/common/algorithm/binarySearchBounds/binarySearchBounds.ts ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   bounds: () => (/* binding */ bounds)
/* harmony export */ });

function ge() {
  function A(a, l, h, y) {
    let i = h + 1;
    while (l <= h) {
      let m = l + h >>> 1;
      let x = a[m];
      if (x >= y) {
        i = m;
        h = m - 1;
      } else {
        l = m + 1;
      }
    }
    return i;
  }
  function P(a, l, h, y, c) {
    let i = h + 1;
    while (l <= h) {
      let m = l + h >>> 1;
      let x = a[m];
      if (c(x, y) >= 0) {
        i = m;
        h = m - 1;
      } else {
        l = m + 1;
      }
    }
    return i;
  }
  return function(a, y, c, l, h) {
    if (typeof c === "function") {
      return P(a, l === void 0 ? 0 : l | 0, h === void 0 ? a.length - 1 : h | 0, y, c);
    } else {
      return A(a, c === void 0 ? 0 : c | 0, l === void 0 ? a.length - 1 : l | 0, y);
    }
  };
}
function gt() {
  function A(a, l, h, y) {
    let i = h + 1;
    while (l <= h) {
      let m = l + h >>> 1;
      let x = a[m];
      if (x > y) {
        i = m;
        h = m - 1;
      } else {
        l = m + 1;
      }
    }
    return i;
  }
  function P(a, l, h, y, c) {
    let i = h + 1;
    while (l <= h) {
      let m = l + h >>> 1;
      let x = a[m];
      if (c(x, y) > 0) {
        i = m;
        h = m - 1;
      } else {
        l = m + 1;
      }
    }
    return i;
  }
  return function(a, y, c, l, h) {
    if (typeof c === "function") {
      return P(a, l === void 0 ? 0 : l | 0, h === void 0 ? a.length - 1 : h | 0, y, c);
    } else {
      return A(a, c === void 0 ? 0 : c | 0, l === void 0 ? a.length - 1 : l | 0, y);
    }
  };
}
function lt() {
  function A(a, l, h, y) {
    let i = l - 1;
    while (l <= h) {
      let m = l + h >>> 1;
      let x = a[m];
      if (x < y) {
        i = m;
        l = m + 1;
      } else {
        h = m - 1;
      }
    }
    return i;
  }
  function P(a, l, h, y, c) {
    let i = l - 1;
    while (l <= h) {
      let m = l + h >>> 1;
      let x = a[m];
      if (c(x, y) < 0) {
        i = m;
        l = m + 1;
      } else {
        h = m - 1;
      }
    }
    return i;
  }
  return function(a, y, c, l, h) {
    if (typeof c === "function") {
      return P(a, l === void 0 ? 0 : l | 0, h === void 0 ? a.length - 1 : h | 0, y, c);
    } else {
      return A(a, c === void 0 ? 0 : c | 0, l === void 0 ? a.length - 1 : l | 0, y);
    }
  };
}
function le() {
  function A(a, l, h, y) {
    let i = l - 1;
    while (l <= h) {
      let m = l + h >>> 1;
      let x = a[m];
      if (x <= y) {
        i = m;
        l = m + 1;
      } else {
        h = m - 1;
      }
    }
    return i;
  }
  function P(a, l, h, y, c) {
    let i = l - 1;
    while (l <= h) {
      let m = l + h >>> 1;
      let x = a[m];
      if (c(x, y) <= 0) {
        i = m;
        l = m + 1;
      } else {
        h = m - 1;
      }
    }
    return i;
  }
  return function(a, y, c, l, h) {
    if (typeof c === "function") {
      return P(a, l === void 0 ? 0 : l | 0, h === void 0 ? a.length - 1 : h | 0, y, c);
    } else {
      return A(a, c === void 0 ? 0 : c | 0, l === void 0 ? a.length - 1 : l | 0, y);
    }
  };
}
function eq() {
  function A(a, l, h, y) {
    let i = l - 1;
    while (l <= h) {
      let m = l + h >>> 1;
      let x = a[m];
      if (x === y) {
        return m;
      } else if (x <= y) {
        l = m + 1;
      } else {
        h = m - 1;
      }
    }
    return -1;
  }
  function P(a, l, h, y, c) {
    let i = l - 1;
    while (l <= h) {
      let m = l + h >>> 1;
      let x = a[m];
      let p = c(x, y);
      if (p === 0) {
        return m;
      } else if (p <= 0) {
        l = m + 1;
      } else {
        h = m - 1;
      }
    }
    return -1;
  }
  return function(a, y, c, l, h) {
    if (typeof c === "function") {
      return P(a, l === void 0 ? 0 : l | 0, h === void 0 ? a.length - 1 : h | 0, y, c);
    } else {
      return A(a, c === void 0 ? 0 : c | 0, l === void 0 ? a.length - 1 : l | 0, y);
    }
  };
}
const bounds = {
  ge: (...args) => {
    return ge()(...args);
  },
  gt: (...args) => {
    return gt()(...args);
  },
  lt: (...args) => {
    return lt()(...args);
  },
  le: (...args) => {
    return le()(...args);
  },
  eq: (...args) => {
    return eq()(...args);
  }
};


/***/ }),

/***/ "./src/engine/common/algorithm/intervalTree/intervalTree.ts":
/*!******************************************************************!*\
  !*** ./src/engine/common/algorithm/intervalTree/intervalTree.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EIntervalTreeSear: () => (/* binding */ EIntervalTreeSear),
/* harmony export */   IntervalTree: () => (/* binding */ IntervalTree),
/* harmony export */   makeIntervalTree: () => (/* binding */ makeIntervalTree)
/* harmony export */ });
/* harmony import */ var _binarySearchBounds_binarySearchBounds__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../binarySearchBounds/binarySearchBounds */ "./src/engine/common/algorithm/binarySearchBounds/binarySearchBounds.ts");


var EIntervalTreeSear = /* @__PURE__ */ ((EIntervalTreeSear2) => {
  EIntervalTreeSear2[EIntervalTreeSear2["NOT_FOUND"] = 0] = "NOT_FOUND";
  EIntervalTreeSear2[EIntervalTreeSear2["SUCCESS"] = 1] = "SUCCESS";
  EIntervalTreeSear2[EIntervalTreeSear2["EMPTY"] = 2] = "EMPTY";
  return EIntervalTreeSear2;
})(EIntervalTreeSear || {});
function reportLeftRange(arr, hi, cb) {
  for (let i = 0; i < arr.length && arr[i][0] <= hi; ++i) {
    let r = cb(arr[i]);
    if (r) {
      return r;
    }
  }
}
function reportRightRange(arr, lo, cb) {
  for (let i = arr.length - 1; i >= 0 && arr[i][1] >= lo; --i) {
    let r = cb(arr[i]);
    if (r) {
      return r;
    }
  }
}
function reportRange(arr, cb) {
  for (let i = 0; i < arr.length; ++i) {
    let r = cb(arr[i]);
    if (r) {
      return r;
    }
  }
}
function copy(a, b) {
  a.mid = b.mid;
  a.left = b.left;
  a.right = b.right;
  a.leftPoints = b.leftPoints;
  a.rightPoints = b.rightPoints;
  a.count = b.count;
}
function rebuild(node, intervals) {
  const ntree = createIntervalTree(intervals);
  node.mid = ntree.mid;
  node.left = ntree.left;
  node.right = ntree.right;
  node.leftPoints = ntree.leftPoints;
  node.rightPoints = ntree.rightPoints;
  node.count = ntree.count;
}
function rebuildWithInterval(node, interval) {
  const intervals = node.intervals([]);
  intervals.push(interval);
  rebuild(node, intervals);
}
function rebuildWithoutInterval(node, interval) {
  const intervals = node.intervals([]);
  const idx = intervals.indexOf(interval);
  if (idx < 0) {
    return 0 /* NOT_FOUND */;
  }
  intervals.splice(idx, 1);
  rebuild(node, intervals);
  return 1 /* SUCCESS */;
}
class IntervalTreeNode {
  constructor(mid, left, right, leftPoints, rightPoints) {
    this._mid = mid;
    this._left = left;
    this._right = right;
    this._leftPoints = leftPoints;
    this._rightPoints = rightPoints;
    this._count = (left ? left._count : 0) + (right ? right._count : 0) + leftPoints.length;
  }
  get mid() {
    return this._mid;
  }
  set mid(value) {
    this._mid = value;
  }
  get left() {
    return this._left;
  }
  set left(value) {
    this._left = value;
  }
  get right() {
    return this._right;
  }
  set right(value) {
    this._right = value;
  }
  get leftPoints() {
    return this._leftPoints;
  }
  set leftPoints(value) {
    this._leftPoints = value;
  }
  get rightPoints() {
    return this._rightPoints;
  }
  set rightPoints(value) {
    this._rightPoints = value;
  }
  get count() {
    return this._count;
  }
  set count(value) {
    this._count = value;
  }
  intervals(result) {
    result.push.apply(result, this.leftPoints);
    if (this.left) {
      this.left.intervals(result);
    }
    if (this.right) {
      this.right.intervals(result);
    }
    return result;
  }
  insert(interval) {
    let weight = this.count - this.leftPoints.length;
    this.count += 1;
    if (interval[1] < this.mid) {
      if (this.left) {
        if (4 * (this.left.count + 1) > 3 * (weight + 1)) {
          rebuildWithInterval(this, interval);
        } else {
          this.left.insert(interval);
        }
      } else {
        this.left = createIntervalTree([interval]);
      }
    } else if (interval[0] > this.mid) {
      if (this.right) {
        if (4 * (this.right.count + 1) > 3 * (weight + 1)) {
          rebuildWithInterval(this, interval);
        } else {
          this.right.insert(interval);
        }
      } else {
        this.right = createIntervalTree([interval]);
      }
    } else {
      const l = _binarySearchBounds_binarySearchBounds__WEBPACK_IMPORTED_MODULE_0__.bounds.ge(this.leftPoints, interval, (a, b) => {
        let d = a[0] - b[0];
        if (d) {
          return d;
        }
        return a[1] - b[1];
      });
      const r = _binarySearchBounds_binarySearchBounds__WEBPACK_IMPORTED_MODULE_0__.bounds.ge(this.rightPoints, interval, (a, b) => {
        const d = a[1] - b[1];
        if (d) {
          return d;
        }
        return a[0] - b[0];
      });
      this.leftPoints.splice(l, 0, interval);
      this.rightPoints.splice(r, 0, interval);
    }
  }
  remove(interval) {
    let weight = this.count - this.leftPoints.length;
    if (interval[1] < this.mid) {
      if (!this.left) {
        return 0 /* NOT_FOUND */;
      }
      let rw = this.right ? this.right.count : 0;
      if (4 * rw > 3 * (weight - 1)) {
        return rebuildWithoutInterval(this, interval);
      }
      let r = this.left.remove(interval);
      if (r === 2 /* EMPTY */) {
        this.left = null;
        this.count -= 1;
        return 1 /* SUCCESS */;
      } else if (r === 1 /* SUCCESS */) {
        this.count -= 1;
      }
      return r;
    } else if (interval[0] > this.mid) {
      if (!this.right) {
        return 0 /* NOT_FOUND */;
      }
      let lw = this.left ? this.left.count : 0;
      if (4 * lw > 3 * (weight - 1)) {
        return rebuildWithoutInterval(this, interval);
      }
      let r = this.right.remove(interval);
      if (r === 2 /* EMPTY */) {
        this.right = null;
        this.count -= 1;
        return 1 /* SUCCESS */;
      } else if (r === 1 /* SUCCESS */) {
        this.count -= 1;
      }
      return r;
    } else {
      if (this.count === 1) {
        if (this.leftPoints[0] === interval) {
          return 2 /* EMPTY */;
        } else {
          return 0 /* NOT_FOUND */;
        }
      }
      if (this.leftPoints.length === 1 && this.leftPoints[0] === interval) {
        if (this.left && this.right) {
          let p = this;
          let n = this.left;
          while (n.right) {
            p = n;
            n = n.right;
          }
          if (p === this) {
            n.right = this.right;
          } else {
            let l = this.left;
            let r = this.right;
            p.count -= n.count;
            p.right = n.left;
            n.left = l;
            n.right = r;
          }
          copy(this, n);
          this.count = (this.left ? this.left.count : 0) + (this.right ? this.right.count : 0) + this.leftPoints.length;
        } else if (this.left) {
          copy(this, this.left);
        } else {
          copy(this, this.right);
        }
        return 1 /* SUCCESS */;
      }
      for (let l = _binarySearchBounds_binarySearchBounds__WEBPACK_IMPORTED_MODULE_0__.bounds.ge(this.leftPoints, interval, (a, b) => {
        let d = a[0] - b[0];
        if (d) {
          return d;
        }
        return a[1] - b[1];
      }); l < this.leftPoints.length; ++l) {
        if (this.leftPoints[l][0] !== interval[0]) {
          break;
        }
        if (this.leftPoints[l] === interval) {
          this.count -= 1;
          this.leftPoints.splice(l, 1);
          for (let r = _binarySearchBounds_binarySearchBounds__WEBPACK_IMPORTED_MODULE_0__.bounds.ge(this.rightPoints, interval, (a, b) => {
            const d = a[1] - b[1];
            if (d) {
              return d;
            }
            return a[0] - b[0];
          }); r < this.rightPoints.length; ++r) {
            if (this.rightPoints[r][1] !== interval[1]) {
              break;
            } else if (this.rightPoints[r] === interval) {
              this.rightPoints.splice(r, 1);
              return 1 /* SUCCESS */;
            }
          }
        }
      }
      return 0 /* NOT_FOUND */;
    }
  }
  queryPoint(x, cb) {
    if (x < this.mid) {
      if (this.left) {
        let r = this.left.queryPoint(x, cb);
        if (r) {
          return r;
        }
      }
      return reportLeftRange(this.leftPoints, x, cb);
    } else if (x > this.mid) {
      if (this.right) {
        let r = this.right.queryPoint(x, cb);
        if (r) {
          return r;
        }
      }
      return reportRightRange(this.rightPoints, x, cb);
    } else {
      return reportRange(this.leftPoints, cb);
    }
  }
  queryInterval(lo, hi, cb) {
    if (lo < this.mid && this.left) {
      let r = this.left.queryInterval(lo, hi, cb);
      if (r) {
        return r;
      }
    }
    if (hi > this.mid && this.right) {
      let r = this.right.queryInterval(lo, hi, cb);
      if (r) {
        return r;
      }
    }
    if (hi < this.mid) {
      return reportLeftRange(this.leftPoints, hi, cb);
    } else if (lo > this.mid) {
      return reportRightRange(this.rightPoints, lo, cb);
    } else {
      return reportRange(this.leftPoints, cb);
    }
  }
}
class IntervalTree {
  constructor(root) {
    this._root = root;
  }
  get root() {
    return this._root;
  }
  set root(value) {
    this._root = value;
  }
  get count() {
    if (this.root) {
      return this.root.count;
    }
    return 0;
  }
  get intervals() {
    if (this.root) {
      return this.root.intervals([]);
    }
    return [];
  }
  insert(interval) {
    if (this.root) {
      this.root.insert(interval);
    } else {
      this.root = new IntervalTreeNode(interval[0], null, null, [interval], [interval]);
    }
  }
  remove(interval) {
    if (this.root) {
      const r = this.root.remove(interval);
      if (r === 2 /* EMPTY */) {
        this.root = null;
      }
      return r !== 0 /* NOT_FOUND */;
    }
    return false;
  }
  queryPoint(p, cb) {
    if (this.root) {
      return this.root.queryPoint(p, cb);
    }
  }
  queryInterval(lo, hi, cb) {
    if (lo <= hi && this.root) {
      return this.root.queryInterval(lo, hi, cb);
    }
  }
}
function createIntervalTree(intervals) {
  if (intervals.length === 0) {
    return null;
  }
  const pts = [];
  for (let i = 0; i < intervals.length; ++i) {
    pts.push(intervals[i][0], intervals[i][1]);
  }
  pts.sort((a, b) => {
    return a - b;
  });
  const mid = pts[pts.length >> 1];
  const leftIntervals = [];
  const rightIntervals = [];
  const centerIntervals = [];
  for (let i = 0; i < intervals.length; ++i) {
    let s = intervals[i];
    if (s[1] < mid) {
      leftIntervals.push(s);
    } else if (mid < s[0]) {
      rightIntervals.push(s);
    } else {
      centerIntervals.push(s);
    }
  }
  const leftPoints = centerIntervals;
  const rightPoints = centerIntervals.slice();
  leftPoints.sort((a, b) => {
    let d = a[0] - b[0];
    if (d) {
      return d;
    }
    return a[1] - b[1];
  });
  rightPoints.sort((a, b) => {
    const d = a[1] - b[1];
    if (d) {
      return d;
    }
    return a[0] - b[0];
  });
  return new IntervalTreeNode(mid, createIntervalTree(leftIntervals), createIntervalTree(rightIntervals), leftPoints, rightPoints);
}
function makeIntervalTree(intervals) {
  if (!intervals || intervals.length === 0) {
    return new IntervalTree(null);
  }
  return new IntervalTree(createIntervalTree(intervals));
}


/***/ }),

/***/ "./src/engine/common/algorithm/slabDecomposition/SlabDecomposition.ts":
/*!****************************************************************************!*\
  !*** ./src/engine/common/algorithm/slabDecomposition/SlabDecomposition.ts ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SlabDecomposition: () => (/* binding */ SlabDecomposition),
/* harmony export */   createSlabDecomposition: () => (/* binding */ createSlabDecomposition)
/* harmony export */ });
/* harmony import */ var _RBTree_RBTree__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../RBTree/RBTree */ "./src/engine/common/algorithm/RBTree/RBTree.ts");
/* harmony import */ var _orderSegments__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./orderSegments */ "./src/engine/common/algorithm/slabDecomposition/orderSegments.ts");



class SlabDecomposition {
  constructor(slabs, coordinates, horizontal) {
    this._slabs = slabs;
    this._coordinates = coordinates;
    this._horizontal = horizontal;
  }
  get slabs() {
    return this._slabs;
  }
  set slabs(value) {
    this._slabs = value;
  }
  get coordinates() {
    return this._coordinates;
  }
  set coordinates(value) {
    this._coordinates = value;
  }
  get horizontal() {
    return this._horizontal;
  }
  set horizontal(value) {
    this._horizontal = value;
  }
}
class IntervalSegment {
  constructor(y, index, start, closed) {
    this._y = y;
    this._index = index;
    this._start = start;
    this._closed = closed;
  }
  get y() {
    return this._y;
  }
  set y(value) {
    this._y = value;
  }
  get index() {
    return this._index;
  }
  set index(value) {
    this._index = value;
  }
  get start() {
    return this._start;
  }
  set start(value) {
    this._start = value;
  }
  get closed() {
    return this._closed;
  }
  set closed(value) {
    this._closed = value;
  }
}
class Event {
  constructor(x, segment, create, index) {
    this._x = x;
    this._segment = segment;
    this._create = create;
    this._index = index;
  }
  get x() {
    return this._x;
  }
  set x(value) {
    this._x = value;
  }
  get segment() {
    return this._segment;
  }
  set segment(value) {
    this._segment = value;
  }
  get create() {
    return this._create;
  }
  set create(value) {
    this._create = value;
  }
  get index() {
    return this._index;
  }
  set index(value) {
    this._index = value;
  }
}
function createSlabDecomposition(segments) {
  let numSegments = segments.length;
  let numEvents = 2 * numSegments;
  let events = new Array(numEvents);
  for (let i = 0; i < numSegments; ++i) {
    let s = segments[i];
    let f = s[0][0] < s[1][0];
    events[2 * i] = new Event(s[0][0], s, f, i);
    events[2 * i + 1] = new Event(s[1][0], s, !f, i);
  }
  events.sort((a, b) => {
    let d = a.x - b.x;
    if (d) {
      return d;
    }
    d = a.create - b.create;
    if (d) {
      return d;
    }
    return Math.min(a.segment[0][1], a.segment[1][1]) - Math.min(b.segment[0][1], b.segment[1][1]);
  });
  let tree = (0,_RBTree_RBTree__WEBPACK_IMPORTED_MODULE_0__.createRBTree)(_orderSegments__WEBPACK_IMPORTED_MODULE_1__.OrderSegments.process);
  let slabs = [];
  let lines = [];
  let horizontal = [];
  for (let i = 0; i < numEvents; ) {
    let x = events[i].x;
    let horiz = [];
    while (i < numEvents) {
      let e = events[i];
      if (e.x !== x) {
        break;
      }
      i += 1;
      if (e.segment[0][0] === e.x && e.segment[1][0] === e.x) {
        if (e.create) {
          if (e.segment[0][1] < e.segment[1][1]) {
            horiz.push(new IntervalSegment(e.segment[0][1], e.index, true, true));
            horiz.push(new IntervalSegment(e.segment[1][1], e.index, false, false));
          } else {
            horiz.push(new IntervalSegment(e.segment[1][1], e.index, true, false));
            horiz.push(new IntervalSegment(e.segment[0][1], e.index, false, true));
          }
        }
      } else {
        if (e.create) {
          tree = tree.insert(e.segment, e.index);
        } else {
          tree = tree.remove(e.segment);
        }
      }
    }
    slabs.push(tree.root);
    lines.push(x);
    horizontal.push(horiz);
  }
  return new SlabDecomposition(slabs, lines, horizontal);
}


/***/ }),

/***/ "./src/engine/common/algorithm/slabDecomposition/orderSegments.ts":
/*!************************************************************************!*\
  !*** ./src/engine/common/algorithm/slabDecomposition/orderSegments.ts ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   OrderSegments: () => (/* binding */ OrderSegments)
/* harmony export */ });
/* harmony import */ var _geometry_Orients__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../geometry/Orients */ "./src/engine/common/geometry/Orients.ts");


function horizontalOrder(a, b) {
  let bl;
  let br;
  if (b[0][0] < b[1][0]) {
    bl = b[0];
    br = b[1];
  } else if (b[0][0] > b[1][0]) {
    bl = b[1];
    br = b[0];
  } else {
    let alo = Math.min(a[0][1], a[1][1]);
    let ahi = Math.max(a[0][1], a[1][1]);
    let blo = Math.min(b[0][1], b[1][1]);
    let bhi = Math.max(b[0][1], b[1][1]);
    if (ahi < blo) {
      return ahi - blo;
    }
    if (alo > bhi) {
      return alo - bhi;
    }
    return ahi - bhi;
  }
  let al;
  let ar;
  if (a[0][1] < a[1][1]) {
    al = a[0];
    ar = a[1];
  } else {
    al = a[1];
    ar = a[0];
  }
  let d = (0,_geometry_Orients__WEBPACK_IMPORTED_MODULE_0__.orient)(br, bl, al);
  if (d) {
    return d;
  }
  d = (0,_geometry_Orients__WEBPACK_IMPORTED_MODULE_0__.orient)(br, bl, ar);
  if (d) {
    return d;
  }
  return ar[0] - br[0];
}
class OrderSegments {
  static process(b, a) {
    let al;
    let ar;
    if (a[0][0] < a[1][0]) {
      al = a[0];
      ar = a[1];
    } else if (a[0][0] > a[1][0]) {
      al = a[1];
      ar = a[0];
    } else {
      return horizontalOrder(a, b);
    }
    let bl;
    let br;
    if (b[0][0] < b[1][0]) {
      bl = b[0];
      br = b[1];
    } else if (b[0][0] > b[1][0]) {
      bl = b[1];
      br = b[0];
    } else {
      return -horizontalOrder(b, a);
    }
    let d1 = (0,_geometry_Orients__WEBPACK_IMPORTED_MODULE_0__.orient)(al, ar, br);
    let d2 = (0,_geometry_Orients__WEBPACK_IMPORTED_MODULE_0__.orient)(al, ar, bl);
    if (d1 < 0) {
      if (d2 <= 0) {
        return d1;
      }
    } else if (d1 > 0) {
      if (d2 >= 0) {
        return d1;
      }
    } else if (d2) {
      return d2;
    }
    d1 = (0,_geometry_Orients__WEBPACK_IMPORTED_MODULE_0__.orient)(br, bl, ar);
    d2 = (0,_geometry_Orients__WEBPACK_IMPORTED_MODULE_0__.orient)(br, bl, al);
    if (d1 < 0) {
      if (d2 <= 0) {
        return d1;
      }
    } else if (d1 > 0) {
      if (d2 >= 0) {
        return d1;
      }
    } else if (d2) {
      return d2;
    }
    return ar[0] - br[0];
  }
}


/***/ }),

/***/ "./src/engine/common/algorithm/triangulation/Triangulation.ts":
/*!********************************************************************!*\
  !*** ./src/engine/common/algorithm/triangulation/Triangulation.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Triangulation: () => (/* binding */ Triangulation),
/* harmony export */   createTriangulation: () => (/* binding */ createTriangulation)
/* harmony export */ });
/* harmony import */ var _binarySearchBounds_binarySearchBounds__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../binarySearchBounds/binarySearchBounds */ "./src/engine/common/algorithm/binarySearchBounds/binarySearchBounds.ts");


function removePair(list, j, k) {
  for (let i = 1, n = list.length; i < n; i += 2) {
    if (list[i - 1] === j && list[i] === k) {
      list[i - 1] = list[n - 2];
      list[i] = list[n - 1];
      list.length = n - 2;
      return;
    }
  }
}
class Triangulation {
  constructor(stars, edges) {
    this._stars = stars;
    this._edges = edges;
    this._e = [0, 0];
  }
  get stars() {
    return this._stars;
  }
  set stars(value) {
    this._stars = value;
  }
  get edges() {
    return this._edges;
  }
  set edges(value) {
    this._edges = value;
  }
  isConstraint(i, j) {
    this._e[0] = Math.min(i, j);
    this._e[1] = Math.max(i, j);
    return _binarySearchBounds_binarySearchBounds__WEBPACK_IMPORTED_MODULE_0__.bounds.eq(this.edges, this._e, (a, b) => {
      return a[0] - b[0] || a[1] - b[1];
    }) >= 0;
  }
  removeTriangle(i, j, k) {
    removePair(this.stars[i], j, k);
    removePair(this.stars[j], k, i);
    removePair(this.stars[k], i, j);
  }
  addTriangle(i, j, k) {
    this.stars[i].push(j, k);
    this.stars[j].push(k, i);
    this.stars[k].push(i, j);
  }
  opposite(j, i) {
    const list = this.stars[i];
    for (let k = 1, n = list.length; k < n; k += 2) {
      if (list[k] === j) {
        return list[k - 1];
      }
    }
    return -1;
  }
  flip(i, j) {
    const a = this.opposite(i, j);
    const b = this.opposite(j, i);
    this.removeTriangle(i, j, a);
    this.removeTriangle(j, i, b);
    this.addTriangle(i, b, a);
    this.addTriangle(j, a, b);
  }
  cells() {
    const result = [];
    for (let i = 0, n = this.stars.length; i < n; ++i) {
      for (let j = 0, m = this.stars[i].length; j < m; j += 2) {
        let s = this.stars[i][j];
        let t = this.stars[i][j + 1];
        if (i < Math.min(s, t)) {
          result.push([i, s, t]);
        }
      }
    }
    return result;
  }
}
function createTriangulation(numVerts, edges) {
  const stars = new Array(numVerts);
  for (let i = 0; i < numVerts; ++i) {
    stars[i] = [];
  }
  return new Triangulation(stars, edges);
}


/***/ }),

/***/ "./src/engine/common/createScene.ts":
/*!******************************************!*\
  !*** ./src/engine/common/createScene.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createScene: () => (/* binding */ createScene)
/* harmony export */ });
/* harmony import */ var _config_CommonProfile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config/CommonProfile */ "./src/engine/config/CommonProfile.ts");
/* harmony import */ var _webgl_SceneGL__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../webgl/SceneGL */ "./src/engine/webgl/SceneGL.ts");
/* harmony import */ var _AxisParam__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AxisParam */ "./src/engine/common/AxisParam.ts");
/* harmony import */ var _Camera__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Camera */ "./src/engine/common/Camera.ts");
/* harmony import */ var _Light__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Light */ "./src/engine/common/Light.ts");

var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};





function createScene(engineType, canvasElement) {
  return __async(this, null, function* () {
    _Camera__WEBPACK_IMPORTED_MODULE_3__.Camera.getInstance();
    _Light__WEBPACK_IMPORTED_MODULE_4__.Light.getInstance();
    _AxisParam__WEBPACK_IMPORTED_MODULE_2__.AxisParam.getInstance();
    if (engineType === _config_CommonProfile__WEBPACK_IMPORTED_MODULE_0__.ECoreEngineType.WEBGL2D) {
      _Camera__WEBPACK_IMPORTED_MODULE_3__.Camera.getInstance().setProjectionType(_Camera__WEBPACK_IMPORTED_MODULE_3__.EProjectionType.ORTH);
      return new _webgl_SceneGL__WEBPACK_IMPORTED_MODULE_1__.SceneGL(canvasElement, false);
    }
    return null;
  });
}


/***/ }),

/***/ "./src/engine/common/geometry/Euler.ts":
/*!*********************************************!*\
  !*** ./src/engine/common/geometry/Euler.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EEulerOrder: () => (/* binding */ EEulerOrder),
/* harmony export */   Euler: () => (/* binding */ Euler)
/* harmony export */ });

var EEulerOrder = /* @__PURE__ */ ((EEulerOrder2) => {
  EEulerOrder2["XYZ"] = "XYZ";
  EEulerOrder2["YXZ"] = "YXZ";
  EEulerOrder2["ZXY"] = "ZXY";
  EEulerOrder2["ZYX"] = "ZYX";
  EEulerOrder2["YZX"] = "YZX";
  EEulerOrder2["XZY"] = "XZY";
  return EEulerOrder2;
})(EEulerOrder || {});
class Euler {
  static initEuler() {
    return new Euler();
  }
  static setFromRotationMatrix(matrix4, order) {
    const euler = new Euler();
    const clamp = (value, min, max) => {
      return Math.max(min, Math.min(value, max));
    };
    const m11 = matrix4.data[0];
    const m12 = matrix4.data[4];
    const m13 = matrix4.data[8];
    const m21 = matrix4.data[1];
    const m22 = matrix4.data[5];
    const m23 = matrix4.data[9];
    const m31 = matrix4.data[2];
    const m32 = matrix4.data[6];
    const m33 = matrix4.data[10];
    const iOrder = order || euler.order;
    if (iOrder === "XYZ" /* XYZ */) {
      euler.y = Math.asin(clamp(m13, -1, 1));
      if (Math.abs(m13) < 0.99999) {
        euler.x = Math.atan2(-m23, m33);
        euler.z = Math.atan2(-m12, m11);
      } else {
        euler.x = Math.atan2(m32, m22);
        euler.z = 0;
      }
    } else if (iOrder === "YXZ" /* YXZ */) {
      euler.x = Math.asin(-clamp(m23, -1, 1));
      if (Math.abs(m23) < 0.99999) {
        euler.y = Math.atan2(m13, m33);
        euler.z = Math.atan2(m21, m22);
      } else {
        euler.y = Math.atan2(-m31, m11);
        euler.z = 0;
      }
    } else if (iOrder === "ZXY" /* ZXY */) {
      euler.x = Math.asin(clamp(m32, -1, 1));
      if (Math.abs(m32) < 0.99999) {
        euler.y = Math.atan2(-m31, m33);
        euler.z = Math.atan2(-m12, m22);
      } else {
        euler.y = 0;
        euler.z = Math.atan2(m21, m11);
      }
    } else if (iOrder === "ZYX" /* ZYX */) {
      euler.y = Math.asin(-clamp(m31, -1, 1));
      if (Math.abs(m31) < 0.99999) {
        euler.x = Math.atan2(m32, m33);
        euler.z = Math.atan2(m21, m11);
      } else {
        euler.x = 0;
        euler.z = Math.atan2(-m12, m22);
      }
    } else if (iOrder === "YZX" /* YZX */) {
      euler.z = Math.asin(clamp(m21, -1, 1));
      if (Math.abs(m21) < 0.99999) {
        euler.x = Math.atan2(-m23, m22);
        euler.y = Math.atan2(-m31, m11);
      } else {
        euler.x = 0;
        euler.y = Math.atan2(m13, m33);
      }
    } else if (iOrder === "XZY" /* XZY */) {
      euler.z = Math.asin(-clamp(m12, -1, 1));
      if (Math.abs(m12) < 0.99999) {
        euler.x = Math.atan2(m32, m22);
        euler.y = Math.atan2(m13, m11);
      } else {
        euler.x = Math.atan2(-m23, m33);
        euler.y = 0;
      }
    } else {
      console.warn("[Euler] unsupported order: " + iOrder);
    }
    euler.order = iOrder;
    return euler;
  }
  constructor(x = 0, y = 0, z = 0, order = "XYZ" /* XYZ */) {
    this._x = x;
    this._y = y;
    this._z = z;
    this._order = order;
  }
  get x() {
    return this._x;
  }
  set x(value) {
    this._x = value;
  }
  get y() {
    return this._y;
  }
  set y(value) {
    this._y = value;
  }
  get z() {
    return this._z;
  }
  set z(value) {
    this._z = value;
  }
  get order() {
    return this._order;
  }
  set order(value) {
    this._order = value;
  }
  resetBy(euler) {
    this.x = euler.x;
    this.y = euler.y;
    this.z = euler.z;
    this.order = euler.order;
  }
  toString() {
    return `Euler(${this.x}, ${this.y}, ${this.z}, ${this.order})`;
  }
}


/***/ }),

/***/ "./src/engine/common/geometry/Orients.ts":
/*!***********************************************!*\
  !*** ./src/engine/common/geometry/Orients.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   orient: () => (/* binding */ orient)
/* harmony export */ });
/* harmony import */ var _math_Twos__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/Twos */ "./src/engine/common/math/Twos.ts");


const EPSILON = 11102230246251565e-32;
const ERRBOUND3 = (3 + 16 * EPSILON) * EPSILON;
const ERRBOUND4 = (7 + 56 * EPSILON) * EPSILON;
function scalarScalar(a, b) {
  let x = a + b;
  let bv = x - a;
  let av = x - bv;
  let br = b - bv;
  let ar = a - av;
  let y = ar + br;
  if (y) {
    return [y, x];
  }
  return [x];
}
function linearExpansionSum(e, f) {
  let ne = e.length | 0;
  let nf = f.length | 0;
  if (ne === 1 && nf === 1) {
    return scalarScalar(e[0], f[0]);
  }
  let n = ne + nf;
  let g = new Array(n);
  let count = 0;
  let eptr = 0;
  let fptr = 0;
  let ei = e[eptr];
  let ea = Math.abs(ei);
  let fi = f[fptr];
  let fa = Math.abs(fi);
  let a;
  let b;
  if (ea < fa) {
    b = ei;
    eptr += 1;
    if (eptr < ne) {
      ei = e[eptr];
      ea = Math.abs(ei);
    }
  } else {
    b = fi;
    fptr += 1;
    if (fptr < nf) {
      fi = f[fptr];
      fa = Math.abs(fi);
    }
  }
  if (eptr < ne && ea < fa || fptr >= nf) {
    a = ei;
    eptr += 1;
    if (eptr < ne) {
      ei = e[eptr];
      ea = Math.abs(ei);
    }
  } else {
    a = fi;
    fptr += 1;
    if (fptr < nf) {
      fi = f[fptr];
      fa = Math.abs(fi);
    }
  }
  let x = a + b;
  let bv = x - a;
  let y = b - bv;
  let q0 = y;
  let q1 = x;
  let _x;
  let _bv;
  let _av;
  let _br;
  let _ar;
  while (eptr < ne && fptr < nf) {
    if (ea < fa) {
      a = ei;
      eptr += 1;
      if (eptr < ne) {
        ei = e[eptr];
        ea = Math.abs(ei);
      }
    } else {
      a = fi;
      fptr += 1;
      if (fptr < nf) {
        fi = f[fptr];
        fa = Math.abs(fi);
      }
    }
    b = q0;
    x = a + b;
    bv = x - a;
    y = b - bv;
    if (y) {
      g[count++] = y;
    }
    _x = q1 + x;
    _bv = _x - q1;
    _av = _x - _bv;
    _br = x - _bv;
    _ar = q1 - _av;
    q0 = _ar + _br;
    q1 = _x;
  }
  while (eptr < ne) {
    a = ei;
    b = q0;
    x = a + b;
    bv = x - a;
    y = b - bv;
    if (y) {
      g[count++] = y;
    }
    _x = q1 + x;
    _bv = _x - q1;
    _av = _x - _bv;
    _br = x - _bv;
    _ar = q1 - _av;
    q0 = _ar + _br;
    q1 = _x;
    eptr += 1;
    if (eptr < ne) {
      ei = e[eptr];
    }
  }
  while (fptr < nf) {
    a = fi;
    b = q0;
    x = a + b;
    bv = x - a;
    y = b - bv;
    if (y) {
      g[count++] = y;
    }
    _x = q1 + x;
    _bv = _x - q1;
    _av = _x - _bv;
    _br = x - _bv;
    _ar = q1 - _av;
    q0 = _ar + _br;
    q1 = _x;
    fptr += 1;
    if (fptr < nf) {
      fi = f[fptr];
    }
  }
  if (q0) {
    g[count++] = q0;
  }
  if (q1) {
    g[count++] = q1;
  }
  if (!count) {
    g[count++] = 0;
  }
  g.length = count;
  return g;
}
function robustSubtract(e, f) {
  let ne = e.length | 0;
  let nf = f.length | 0;
  if (ne === 1 && nf === 1) {
    return scalarScalar(e[0], -f[0]);
  }
  let n = ne + nf;
  let g = new Array(n);
  let count = 0;
  let eptr = 0;
  let fptr = 0;
  let ei = e[eptr];
  let ea = Math.abs(ei);
  let fi = -f[fptr];
  let fa = Math.abs(fi);
  let a;
  let b;
  if (ea < fa) {
    b = ei;
    eptr += 1;
    if (eptr < ne) {
      ei = e[eptr];
      ea = Math.abs(ei);
    }
  } else {
    b = fi;
    fptr += 1;
    if (fptr < nf) {
      fi = -f[fptr];
      fa = Math.abs(fi);
    }
  }
  if (eptr < ne && ea < fa || fptr >= nf) {
    a = ei;
    eptr += 1;
    if (eptr < ne) {
      ei = e[eptr];
      ea = Math.abs(ei);
    }
  } else {
    a = fi;
    fptr += 1;
    if (fptr < nf) {
      fi = -f[fptr];
      fa = Math.abs(fi);
    }
  }
  let x = a + b;
  let bv = x - a;
  let y = b - bv;
  let q0 = y;
  let q1 = x;
  let _x;
  let _bv;
  let _av;
  let _br;
  let _ar;
  while (eptr < ne && fptr < nf) {
    if (ea < fa) {
      a = ei;
      eptr += 1;
      if (eptr < ne) {
        ei = e[eptr];
        ea = Math.abs(ei);
      }
    } else {
      a = fi;
      fptr += 1;
      if (fptr < nf) {
        fi = -f[fptr];
        fa = Math.abs(fi);
      }
    }
    b = q0;
    x = a + b;
    bv = x - a;
    y = b - bv;
    if (y) {
      g[count++] = y;
    }
    _x = q1 + x;
    _bv = _x - q1;
    _av = _x - _bv;
    _br = x - _bv;
    _ar = q1 - _av;
    q0 = _ar + _br;
    q1 = _x;
  }
  while (eptr < ne) {
    a = ei;
    b = q0;
    x = a + b;
    bv = x - a;
    y = b - bv;
    if (y) {
      g[count++] = y;
    }
    _x = q1 + x;
    _bv = _x - q1;
    _av = _x - _bv;
    _br = x - _bv;
    _ar = q1 - _av;
    q0 = _ar + _br;
    q1 = _x;
    eptr += 1;
    if (eptr < ne) {
      ei = e[eptr];
    }
  }
  while (fptr < nf) {
    a = fi;
    b = q0;
    x = a + b;
    bv = x - a;
    y = b - bv;
    if (y) {
      g[count++] = y;
    }
    _x = q1 + x;
    _bv = _x - q1;
    _av = _x - _bv;
    _br = x - _bv;
    _ar = q1 - _av;
    q0 = _ar + _br;
    q1 = _x;
    fptr += 1;
    if (fptr < nf) {
      fi = -f[fptr];
    }
  }
  if (q0) {
    g[count++] = q0;
  }
  if (q1) {
    g[count++] = q1;
  }
  if (!count) {
    g[count++] = 0;
  }
  g.length = count;
  return g;
}
function scaleLinearExpansion(e, scale) {
  let n = e.length;
  if (n === 1) {
    let ts = (0,_math_Twos__WEBPACK_IMPORTED_MODULE_0__.twoProduct)(e[0], scale);
    if (ts[0]) {
      return ts;
    }
    return [ts[1]];
  }
  let g = new Array(2 * n);
  let q = [0.1, 0.1];
  let t = [0.1, 0.1];
  let count = 0;
  (0,_math_Twos__WEBPACK_IMPORTED_MODULE_0__.twoProduct)(e[0], scale, q);
  if (q[0]) {
    g[count++] = q[0];
  }
  for (let i = 1; i < n; ++i) {
    (0,_math_Twos__WEBPACK_IMPORTED_MODULE_0__.twoProduct)(e[i], scale, t);
    let pq = q[1];
    (0,_math_Twos__WEBPACK_IMPORTED_MODULE_0__.twoSum)(pq, t[0], q);
    if (q[0]) {
      g[count++] = q[0];
    }
    let a = t[1];
    let b = q[1];
    let x = a + b;
    let bv = x - a;
    let y = b - bv;
    q[1] = x;
    if (y) {
      g[count++] = y;
    }
  }
  if (q[1]) {
    g[count++] = q[1];
  }
  if (count === 0) {
    g[count++] = 0;
  }
  g.length = count;
  return g;
}
function orientation3Exact(...args) {
  const m0 = arguments[0];
  const m1 = arguments[1];
  const m2 = arguments[2];
  let p = linearExpansionSum(
    linearExpansionSum((0,_math_Twos__WEBPACK_IMPORTED_MODULE_0__.twoProduct)(m1[1], m2[0]), (0,_math_Twos__WEBPACK_IMPORTED_MODULE_0__.twoProduct)(-m2[1], m1[0])),
    linearExpansionSum((0,_math_Twos__WEBPACK_IMPORTED_MODULE_0__.twoProduct)(m0[1], m1[0]), (0,_math_Twos__WEBPACK_IMPORTED_MODULE_0__.twoProduct)(-m1[1], m0[0]))
  );
  let n = linearExpansionSum((0,_math_Twos__WEBPACK_IMPORTED_MODULE_0__.twoProduct)(m0[1], m2[0]), (0,_math_Twos__WEBPACK_IMPORTED_MODULE_0__.twoProduct)(-m2[1], m0[0]));
  let d = robustSubtract(p, n);
  return d[d.length - 1];
}
function orientation4Exact(...args) {
  const m0 = arguments[0];
  const m1 = arguments[1];
  const m2 = arguments[2];
  const m3 = arguments[4];
  let p = linearExpansionSum(
    linearExpansionSum(
      scaleLinearExpansion(linearExpansionSum((0,_math_Twos__WEBPACK_IMPORTED_MODULE_0__.twoProduct)(m2[1], m3[0]), (0,_math_Twos__WEBPACK_IMPORTED_MODULE_0__.twoProduct)(-m3[1], m2[0])), m1[2]),
      linearExpansionSum(
        scaleLinearExpansion(linearExpansionSum((0,_math_Twos__WEBPACK_IMPORTED_MODULE_0__.twoProduct)(m1[1], m3[0]), (0,_math_Twos__WEBPACK_IMPORTED_MODULE_0__.twoProduct)(-m3[1], m1[0])), -m2[2]),
        scaleLinearExpansion(linearExpansionSum((0,_math_Twos__WEBPACK_IMPORTED_MODULE_0__.twoProduct)(m1[1], m2[0]), (0,_math_Twos__WEBPACK_IMPORTED_MODULE_0__.twoProduct)(-m2[1], m1[0])), m3[2])
      )
    ),
    linearExpansionSum(
      scaleLinearExpansion(linearExpansionSum((0,_math_Twos__WEBPACK_IMPORTED_MODULE_0__.twoProduct)(m1[1], m3[0]), (0,_math_Twos__WEBPACK_IMPORTED_MODULE_0__.twoProduct)(-m3[1], m1[0])), m0[2]),
      linearExpansionSum(
        scaleLinearExpansion(linearExpansionSum((0,_math_Twos__WEBPACK_IMPORTED_MODULE_0__.twoProduct)(m0[1], m3[0]), (0,_math_Twos__WEBPACK_IMPORTED_MODULE_0__.twoProduct)(-m3[1], m0[0])), -m1[2]),
        scaleLinearExpansion(linearExpansionSum((0,_math_Twos__WEBPACK_IMPORTED_MODULE_0__.twoProduct)(m0[1], m1[0]), (0,_math_Twos__WEBPACK_IMPORTED_MODULE_0__.twoProduct)(-m1[1], m0[0])), m3[2])
      )
    )
  );
  let n = linearExpansionSum(
    linearExpansionSum(
      scaleLinearExpansion(linearExpansionSum((0,_math_Twos__WEBPACK_IMPORTED_MODULE_0__.twoProduct)(m2[1], m3[0]), (0,_math_Twos__WEBPACK_IMPORTED_MODULE_0__.twoProduct)(-m3[1], m2[0])), m0[2]),
      linearExpansionSum(
        scaleLinearExpansion(linearExpansionSum((0,_math_Twos__WEBPACK_IMPORTED_MODULE_0__.twoProduct)(m0[1], m3[0]), (0,_math_Twos__WEBPACK_IMPORTED_MODULE_0__.twoProduct)(-m3[1], m0[0])), -m2[2]),
        scaleLinearExpansion(linearExpansionSum((0,_math_Twos__WEBPACK_IMPORTED_MODULE_0__.twoProduct)(m0[1], m2[0]), (0,_math_Twos__WEBPACK_IMPORTED_MODULE_0__.twoProduct)(-m2[1], m0[0])), m3[2])
      )
    ),
    linearExpansionSum(
      scaleLinearExpansion(linearExpansionSum((0,_math_Twos__WEBPACK_IMPORTED_MODULE_0__.twoProduct)(m1[1], m2[0]), (0,_math_Twos__WEBPACK_IMPORTED_MODULE_0__.twoProduct)(-m2[1], m1[0])), m0[2]),
      linearExpansionSum(
        scaleLinearExpansion(linearExpansionSum((0,_math_Twos__WEBPACK_IMPORTED_MODULE_0__.twoProduct)(m0[1], m2[0]), (0,_math_Twos__WEBPACK_IMPORTED_MODULE_0__.twoProduct)(-m2[1], m0[0])), -m1[2]),
        scaleLinearExpansion(linearExpansionSum((0,_math_Twos__WEBPACK_IMPORTED_MODULE_0__.twoProduct)(m0[1], m1[0]), (0,_math_Twos__WEBPACK_IMPORTED_MODULE_0__.twoProduct)(-m1[1], m0[0])), m2[2])
      )
    )
  );
  let d = robustSubtract(p, n);
  return d[d.length - 1];
}
function orient(...args) {
  switch (arguments.length) {
    case 0: {
      return 0;
    }
    case 1: {
      return 0;
    }
    case 2: {
      return arguments[0] - arguments[0];
    }
    case 3: {
      const a = arguments[0];
      const b = arguments[1];
      const c = arguments[2];
      let l = (a[1] - c[1]) * (b[0] - c[0]);
      let r = (a[0] - c[0]) * (b[1] - c[1]);
      let det = l - r;
      let s = void 0;
      if (l > 0) {
        if (r <= 0) {
          return det;
        } else {
          s = l + r;
        }
      } else if (l < 0) {
        if (r >= 0) {
          return det;
        } else {
          s = -(l + r);
        }
      } else {
        return det;
      }
      let tol = ERRBOUND3 * s;
      if (det >= tol || det <= -tol) {
        return det;
      }
      return orientation3Exact(...args);
    }
  }
  return 0;
}


/***/ }),

/***/ "./src/engine/common/geometry/Quaternion.ts":
/*!**************************************************!*\
  !*** ./src/engine/common/geometry/Quaternion.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Quaternion: () => (/* binding */ Quaternion)
/* harmony export */ });
/* harmony import */ var _Euler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Euler */ "./src/engine/common/geometry/Euler.ts");
/* harmony import */ var _vector_Vector3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vector/Vector3 */ "./src/engine/common/geometry/vector/Vector3.ts");



class Quaternion {
  static initQuaternion() {
    return new Quaternion();
  }
  /**
   * @description 欧拉角转四元数
   * @function setFromEuler
   * @param {Euler} euler 欧拉角
   * @return {Quaternion}
   */
  static setFromEuler(euler) {
    const quaternion = new Quaternion();
    const x = euler.x;
    const y = euler.y;
    const z = euler.z;
    const order = euler.order;
    const cosx = Math.cos(x / 2);
    const cosy = Math.cos(y / 2);
    const cosz = Math.cos(z / 2);
    const sinx = Math.sin(x / 2);
    const siny = Math.sin(y / 2);
    const sinz = Math.sin(z / 2);
    if (order === _Euler__WEBPACK_IMPORTED_MODULE_0__.EEulerOrder.XYZ) {
      quaternion.x = sinx * cosy * cosz + cosx * siny * sinz;
      quaternion.y = cosx * siny * cosz - sinx * cosy * sinz;
      quaternion.z = cosx * cosy * sinz + sinx * siny * cosz;
      quaternion.w = cosx * cosy * cosz - sinx * siny * sinz;
    } else if (order === _Euler__WEBPACK_IMPORTED_MODULE_0__.EEulerOrder.YXZ) {
      quaternion.x = sinx * cosy * cosz + cosx * siny * sinz;
      quaternion.y = cosx * siny * cosz - sinx * cosy * sinz;
      quaternion.z = cosx * cosy * sinz - sinx * siny * cosz;
      quaternion.w = cosx * cosy * cosz + sinx * siny * sinz;
    } else if (order === _Euler__WEBPACK_IMPORTED_MODULE_0__.EEulerOrder.ZXY) {
      quaternion.x = sinx * cosy * cosz - cosx * siny * sinz;
      quaternion.y = cosx * siny * cosz + sinx * cosy * sinz;
      quaternion.z = cosx * cosy * sinz + sinx * siny * cosz;
      quaternion.w = cosx * cosy * cosz - sinx * siny * sinz;
    } else if (order === _Euler__WEBPACK_IMPORTED_MODULE_0__.EEulerOrder.ZYX) {
      quaternion.x = sinx * cosy * cosz - cosx * siny * sinz;
      quaternion.y = cosx * siny * cosz + sinx * cosy * sinz;
      quaternion.z = cosx * cosy * sinz - sinx * siny * cosz;
      quaternion.w = cosx * cosy * cosz + sinx * siny * sinz;
    } else if (order === _Euler__WEBPACK_IMPORTED_MODULE_0__.EEulerOrder.YZX) {
      quaternion.x = sinx * cosy * cosz + cosx * siny * sinz;
      quaternion.y = cosx * siny * cosz + sinx * cosy * sinz;
      quaternion.z = cosx * cosy * sinz - sinx * siny * cosz;
      quaternion.w = cosx * cosy * cosz - sinx * siny * sinz;
    } else if (order === _Euler__WEBPACK_IMPORTED_MODULE_0__.EEulerOrder.XZY) {
      quaternion.x = sinx * cosy * cosz - cosx * siny * sinz;
      quaternion.y = cosx * siny * cosz - sinx * cosy * sinz;
      quaternion.z = cosx * cosy * sinz + sinx * siny * cosz;
      quaternion.w = cosx * cosy * cosz + sinx * siny * sinz;
    }
    return quaternion;
  }
  /**
   * @description 旋转轴向量旋转指定角度后对应的四元数
   * @function setFromAxisAngle
   * @param {number} radian 旋转弧度
   * @param {Vector3} axisVector3 旋转轴(向量)
   * @return {Quaternion}
   */
  static setFromAxisAngle(radian, axisVector3) {
    const quaternion = new Quaternion();
    const iAxisVector3 = axisVector3.copy().normalize();
    const halfRadian = radian / 2;
    const s = Math.sin(halfRadian);
    quaternion.x = iAxisVector3.x * s;
    quaternion.y = iAxisVector3.y * s;
    quaternion.z = iAxisVector3.z * s;
    quaternion.w = Math.cos(halfRadian);
    return quaternion;
  }
  /**
   * @description 旋转矩阵对应的四元数
   * @function setFromRotationMatrix
   * @param {Matrix4} matrix4 旋转矩阵
   * @return {Quaternion}
   */
  static setFromRotationMatrix(matrix4) {
    const quaternion = new Quaternion();
    const m11 = matrix4.data[0];
    const m12 = matrix4.data[4];
    const m13 = matrix4.data[8];
    const m21 = matrix4.data[1];
    const m22 = matrix4.data[5];
    const m23 = matrix4.data[9];
    const m31 = matrix4.data[2];
    const m32 = matrix4.data[6];
    const m33 = matrix4.data[10];
    let t = m11 + m22 + m33;
    let s = void 0;
    if (t > 0) {
      s = 0.5 / Math.sqrt(t + 1);
      quaternion.w = 0.25 / s;
      quaternion.x = (m32 - m23) * s;
      quaternion.y = (m13 - m31) * s;
      quaternion.z = (m21 - m12) * s;
    } else if (m11 > m22 && m11 > m33) {
      s = 2 * Math.sqrt(1 + m11 - m22 - m33);
      quaternion.w = (m32 - m23) / s;
      quaternion.x = 0.25 * s;
      quaternion.y = (m12 + m21) / s;
      quaternion.z = (m13 + m31) / s;
    } else if (m22 > m33) {
      s = 2 * Math.sqrt(1 + m22 - m11 - m33);
      quaternion.w = (m13 - m31) / s;
      quaternion.x = (m12 + m21) / s;
      quaternion.y = 0.25 * s;
      quaternion.z = (m23 + m32) / s;
    } else {
      s = 2 * Math.sqrt(1 + m33 - m11 - m22);
      quaternion.w = (m21 - m12) / s;
      quaternion.x = (m13 + m31) / s;
      quaternion.y = (m23 + m32) / s;
      quaternion.z = 0.25 * s;
    }
    return quaternion;
  }
  /**
   * @description 求 qs 到 qe 的四元数球面差值
   * @function setSlerp
   * @param {Quaternion} qs 起始四元数
   * @param {Quaternion} qe 结束四元数
   * @param {number} t 差值比率
   * @return {Quaternion}
   */
  static setSlerp(qs, qe, t) {
    const quaternion = qs.copy();
    if (t === 0) {
      return quaternion;
    }
    if (t === 1) {
      return Quaternion.copyBy(qe);
    }
    const x = quaternion.x;
    const y = quaternion.y;
    const z = quaternion.z;
    const w = quaternion.w;
    let cosHalfTheta = w * qe.w + x * qe.x + y * qe.y + z * qe.z;
    if (cosHalfTheta < 0) {
      quaternion.w = -qe.w;
      quaternion.x = -qe.x;
      quaternion.y = -qe.y;
      quaternion.z = -qe.z;
      cosHalfTheta = -cosHalfTheta;
    } else {
      quaternion.resetBy(qe);
    }
    if (cosHalfTheta >= 1) {
      quaternion.w = w;
      quaternion.x = x;
      quaternion.y = y;
      quaternion.z = z;
      return quaternion;
    }
    const sqrSinHalfTheta = 1 - cosHalfTheta * cosHalfTheta;
    if (sqrSinHalfTheta <= Number.EPSILON) {
      const s = 1 - t;
      quaternion.w = s * w + t * quaternion.w;
      quaternion.x = s * x + t * quaternion.x;
      quaternion.y = s * y + t * quaternion.y;
      quaternion.z = s * z + t * quaternion.z;
      return quaternion.normalize();
    }
    const sinHalfTheta = Math.sqrt(sqrSinHalfTheta);
    const halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);
    const ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta;
    const ratioB = Math.sin(t * halfTheta) / sinHalfTheta;
    quaternion.w = w * ratioA + quaternion.w * ratioB;
    quaternion.x = x * ratioA + quaternion.x * ratioB;
    quaternion.y = y * ratioA + quaternion.y * ratioB;
    quaternion.z = z * ratioA + quaternion.z * ratioB;
    return quaternion;
  }
  static fromRotation(radian, axisVector3) {
    const { x, y, z } = axisVector3;
    const cos = Math.cos(radian / 2);
    const sin = Math.sin(radian / 2);
    return new Quaternion(x * sin, y * sin, z * sin, cos);
  }
  static multiplyQuaternions(quaternion1, quaternion2) {
    const quaternion = new Quaternion();
    const qax = quaternion1.x;
    const qay = quaternion1.y;
    const qaz = quaternion1.z;
    const qaw = quaternion1.w;
    const qbx = quaternion2.x;
    const qby = quaternion2.y;
    const qbz = quaternion2.z;
    const qbw = quaternion2.w;
    quaternion.x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
    quaternion.y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
    quaternion.z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
    quaternion.w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;
    return quaternion;
  }
  static makeRotationFromQuaternion(quaternion) {
    const zero = new _vector_Vector3__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 0, 0);
    const one = new _vector_Vector3__WEBPACK_IMPORTED_MODULE_1__.Vector3(1, 1, 1);
    return QuaternionCompose(zero, quaternion, one);
  }
  static copyBy(quaternion) {
    const iQuaternion = new Quaternion();
    iQuaternion.x = quaternion.x;
    iQuaternion.y = quaternion.y;
    iQuaternion.z = quaternion.z;
    iQuaternion.w = quaternion.w;
    return iQuaternion;
  }
  constructor(x = 0, y = 0, z = 0, w = 1) {
    this._x = x;
    this._y = y;
    this._z = z;
    this._w = w;
  }
  get x() {
    return this._x;
  }
  set x(value) {
    this._x = value;
  }
  get y() {
    return this._y;
  }
  set y(value) {
    this._y = value;
  }
  get z() {
    return this._z;
  }
  set z(value) {
    this._z = value;
  }
  get w() {
    return this._w;
  }
  set w(value) {
    this._w = value;
  }
  get length() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
  }
  get lengthSq() {
    return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
  }
  resetBy(quaternion) {
    this.x = quaternion.x;
    this.y = quaternion.y;
    this.z = quaternion.z;
    this.w = quaternion.w;
  }
  /**
   * 求出当前四元数旋转到目标四元数所经过的角度
   */
  angleTo(targetQuaternion) {
    const clamp = (value, min, max) => {
      return Math.max(min, Math.min(value, max));
    };
    return 2 * Math.acos(Math.abs(clamp(this.dot(targetQuaternion), -1, 1)));
  }
  /**
   * 当前四元数的共轭四元数
   */
  conjugate() {
    this.x *= -1;
    this.y *= -1;
    this.z *= -1;
    return this;
  }
  /**
   * 当前四元数的逆四元数
   */
  inverse() {
    return this.conjugate();
  }
  /**
   * 当前四元数的点积
   */
  dot(quaternion) {
    return this.x * quaternion.x + this.y * quaternion.y + this.z * quaternion.z + this.w * quaternion.w;
  }
  normalize() {
    let len = this.length;
    if (len === 0) {
      this.x = 0;
      this.y = 0;
      this.z = 0;
      this.w = 1;
    } else {
      len = 1 / len;
      this.x *= len;
      this.y *= len;
      this.z *= len;
      this.w *= len;
    }
    return this;
  }
  multiply(quaternion) {
    return Quaternion.multiplyQuaternions(this, quaternion);
  }
  copy() {
    const quaternion = new Quaternion();
    quaternion.x = this.x;
    quaternion.y = this.y;
    quaternion.z = this.z;
    quaternion.w = this.w;
    return quaternion;
  }
  toString() {
    return `Quaternion(${this.x}, ${this.y}, ${this.z}, ${this.w})`;
  }
}
function QuaternionCompose(position, quaternion, scale) {
  const array = new Array(16);
  const x = quaternion.x;
  const y = quaternion.y;
  const z = quaternion.z;
  const w = quaternion.w;
  const x2 = x + x;
  const y2 = y + y;
  const z2 = z + z;
  const xx = x * x2;
  const xy = x * y2;
  const xz = x * z2;
  const yy = y * y2;
  const yz = y * z2;
  const zz = z * z2;
  const wx = w * x2;
  const wy = w * y2;
  const wz = w * z2;
  const sx = scale.x;
  const sy = scale.y;
  const sz = scale.z;
  array[0] = (1 - (yy + zz)) * sx;
  array[1] = (xy + wz) * sx;
  array[2] = (xz - wy) * sx;
  array[3] = 0;
  array[4] = (xy - wz) * sy;
  array[5] = (1 - (xx + zz)) * sy;
  array[6] = (yz + wx) * sy;
  array[7] = 0;
  array[8] = (xz + wy) * sz;
  array[9] = (yz - wx) * sz;
  array[10] = (1 - (xx + yy)) * sz;
  array[11] = 0;
  array[12] = position.x;
  array[13] = position.y;
  array[14] = position.z;
  array[15] = 1;
  return array;
}


/***/ }),

/***/ "./src/engine/common/geometry/bbox/BBox2.ts":
/*!**************************************************!*\
  !*** ./src/engine/common/geometry/bbox/BBox2.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BBox2: () => (/* binding */ BBox2)
/* harmony export */ });
/* harmony import */ var _vector_Vector2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../vector/Vector2 */ "./src/engine/common/geometry/vector/Vector2.ts");


class BBox2 {
  static isValid(bbox2) {
    return Number.isFinite(bbox2.minX) && Number.isFinite(bbox2.minY) && Number.isFinite(bbox2.maxX) && Number.isFinite(bbox2.maxY);
  }
  constructor(minX, minY, maxX, maxY) {
    this._data = new Float64Array(4);
    if (minX > maxX) {
      minX = [maxX, maxX = minX][0];
    }
    if (minY > maxY) {
      minY = [maxY, maxY = minY][0];
    }
    this._minX = minX;
    this._minY = minY;
    this._maxX = maxX;
    this._maxY = maxY;
  }
  get minX() {
    return this._minX;
  }
  set minX(value) {
    this._minX = value;
  }
  get minY() {
    return this._minY;
  }
  set minY(value) {
    this._minX = value;
  }
  get maxX() {
    return this._maxX;
  }
  set maxX(value) {
    this._maxX = value;
  }
  get maxY() {
    return this._maxY;
  }
  set maxY(value) {
    this._maxY = value;
  }
  get width() {
    return this.maxX - this.minX;
  }
  get height() {
    return this.maxY - this.minY;
  }
  get UpperLeftPoint() {
    return new _vector_Vector2__WEBPACK_IMPORTED_MODULE_0__.Vector2(this.minX, this.minY);
  }
  get UpperRightPoint() {
    return new _vector_Vector2__WEBPACK_IMPORTED_MODULE_0__.Vector2(this.maxX, this.minY);
  }
  get LowerLeftPoint() {
    return new _vector_Vector2__WEBPACK_IMPORTED_MODULE_0__.Vector2(this.minX, this.maxY);
  }
  get LowerRightPoint() {
    return new _vector_Vector2__WEBPACK_IMPORTED_MODULE_0__.Vector2(this.maxX, this.maxY);
  }
  get CenterPoint() {
    return new _vector_Vector2__WEBPACK_IMPORTED_MODULE_0__.Vector2(this.maxX - (this.maxX - this.minX) / 2, this.maxY - (this.maxY - this.minY) / 2);
  }
  get data() {
    this._data[0] = this.minX;
    this._data[1] = this.minY;
    this._data[2] = this.maxX;
    this._data[3] = this.maxY;
    return this._data;
  }
  /**
   * 判断当前 BBox2 实例是否包裹了传入的 vector2
   */
  isContainsPoint(vector2) {
    return this.isContainsX(vector2.x) && this.isContainsY(vector2.y);
  }
  /**
   * 判断当前 BBox2 实例是否包裹了传入的 bbox2
   */
  isConatinsBBox2(bbox2) {
    return this.maxX >= bbox2.maxX && this.minX <= bbox2.minX && this.maxY >= bbox2.maxY && this.minY <= bbox2.minY;
  }
  /**
   * 判断传入的 bbox2 是否包裹了当前 BBox2 实例
   */
  isBeWrappedByBBox2(bbox2) {
    return this.minX >= bbox2.minX && this.maxX <= bbox2.maxX && this.minY >= bbox2.minY && this.maxY <= bbox2.maxY;
  }
  /**
   * 判断当前 BBox2 实例与传入的 bbox2 边界范围是否相等
   */
  equals(bbox2) {
    if (this.minX === bbox2.minX && this.minY === bbox2.minY && this.maxX === bbox2.maxX && this.maxY === bbox2.maxY) {
      return true;
    }
    return false;
  }
  /**
   * 判断当前 BBox2 实例与传入的 bbox2 边界范围是否交叉
   */
  isIntersect(bbox2) {
    const _minX = Math.max(this.minX, bbox2.minX);
    const _maxX = Math.max(this.maxX, bbox2.maxX);
    if (_minX > _maxX) {
      return false;
    }
    const _minY = Math.max(this.minY, bbox2.minY);
    const _maxY = Math.max(this.maxY, bbox2.maxY);
    if (_minY > _maxY) {
      return false;
    }
    return true;
  }
  reset() {
    this.minX = Number.POSITIVE_INFINITY;
    this.maxX = Number.NEGATIVE_INFINITY;
    this.minY = Number.POSITIVE_INFINITY;
    this.maxY = Number.NEGATIVE_INFINITY;
  }
  toString() {
    return `BBox2 (${this.minX}, ${this.maxX}, ${this.minY}, ${this.maxY})`;
  }
  isContainsX(x) {
    return x >= this.minX && x <= this.maxX;
  }
  isContainsY(y) {
    return y >= this.minY && y <= this.maxY;
  }
}


/***/ }),

/***/ "./src/engine/common/geometry/matrix/CanvasMatrix4.ts":
/*!************************************************************!*\
  !*** ./src/engine/common/geometry/matrix/CanvasMatrix4.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CanvasMatrix4: () => (/* binding */ CanvasMatrix4)
/* harmony export */ });
/* harmony import */ var _Euler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Euler */ "./src/engine/common/geometry/Euler.ts");
/* harmony import */ var _vector_Vector3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../vector/Vector3 */ "./src/engine/common/geometry/vector/Vector3.ts");
/* harmony import */ var _Matrix4__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Matrix4 */ "./src/engine/common/geometry/matrix/Matrix4.ts");




class CanvasMatrix4 {
  static initMatrix() {
    return new _Matrix4__WEBPACK_IMPORTED_MODULE_2__.Matrix4();
  }
  static setFromArray(array) {
    if (array.length !== 16) {
      return new _Matrix4__WEBPACK_IMPORTED_MODULE_2__.Matrix4();
    }
    const matrix4 = new _Matrix4__WEBPACK_IMPORTED_MODULE_2__.Matrix4();
    for (let i = 0; i < 16; i++) {
      matrix4.data[i] = array[i];
    }
    return matrix4;
  }
  static copyMatrix(refMatrix4) {
    const matrix4 = new _Matrix4__WEBPACK_IMPORTED_MODULE_2__.Matrix4();
    for (let i = 0; i < refMatrix4.data.length; i++) {
      matrix4.data[i] = refMatrix4.data[i];
    }
    return matrix4;
  }
  /**
   * @description 创建旋转变换矩阵: 基于欧拉角
   * @function setRotationFromEuler
   * @param {Euler} euler 欧拉角
   * @return {Matrix4}
   */
  static setRotationFromEuler(euler) {
    const matrix4 = new _Matrix4__WEBPACK_IMPORTED_MODULE_2__.Matrix4();
    const { x, y, z, order } = euler;
    const a = Math.cos(x);
    const b = Math.sin(x);
    const c = Math.cos(y);
    const d = Math.sin(y);
    const e = Math.cos(z);
    const f = Math.sin(z);
    if (order === _Euler__WEBPACK_IMPORTED_MODULE_0__.EEulerOrder.XYZ) {
      const ae = a * e;
      const af = a * f;
      const be = b * e;
      const bf = b * f;
      matrix4.data[0] = c * e;
      matrix4.data[4] = -c * f;
      matrix4.data[8] = d;
      matrix4.data[1] = af + be * d;
      matrix4.data[5] = ae - bf * d;
      matrix4.data[9] = -b * c;
      matrix4.data[2] = bf - ae * d;
      matrix4.data[6] = be + af * d;
      matrix4.data[10] = a * c;
    } else if (order === _Euler__WEBPACK_IMPORTED_MODULE_0__.EEulerOrder.YXZ) {
      const ce = c * e;
      const cf = c * f;
      const de = d * e;
      const df = d * f;
      matrix4.data[0] = ce + df * b;
      matrix4.data[4] = de * b - cf;
      matrix4.data[8] = a * d;
      matrix4.data[1] = a * f;
      matrix4.data[5] = a * e;
      matrix4.data[9] = -b;
      matrix4.data[2] = cf * b - de;
      matrix4.data[6] = df + ce * b;
      matrix4.data[10] = a * c;
    } else if (order === _Euler__WEBPACK_IMPORTED_MODULE_0__.EEulerOrder.ZXY) {
      const ce = c * e;
      const cf = c * f;
      const de = d * e;
      const df = d * f;
      matrix4.data[0] = ce - df * b;
      matrix4.data[4] = -a * f;
      matrix4.data[8] = de + cf * b;
      matrix4.data[1] = cf + de * b;
      matrix4.data[5] = a * e;
      matrix4.data[9] = df - ce * b;
      matrix4.data[2] = -a * d;
      matrix4.data[6] = b;
      matrix4.data[10] = a * c;
    } else if (order === _Euler__WEBPACK_IMPORTED_MODULE_0__.EEulerOrder.ZYX) {
      const ae = a * e;
      const af = a * f;
      const be = b * e;
      const bf = b * f;
      matrix4.data[0] = c * e;
      matrix4.data[4] = be * d - af;
      matrix4.data[8] = ae * d + bf;
      matrix4.data[1] = c * f;
      matrix4.data[5] = bf * d + ae;
      matrix4.data[9] = af * d - be;
      matrix4.data[2] = -d;
      matrix4.data[6] = b * c;
      matrix4.data[10] = a * c;
    } else if (order === _Euler__WEBPACK_IMPORTED_MODULE_0__.EEulerOrder.YZX) {
      const ac = a * c;
      const ad = a * d;
      const bc = b * c;
      const bd = b * d;
      matrix4.data[0] = c * e;
      matrix4.data[4] = bd - ac * f;
      matrix4.data[8] = bc * f + ad;
      matrix4.data[1] = f;
      matrix4.data[5] = a * e;
      matrix4.data[9] = -b * e;
      matrix4.data[2] = -d * e;
      matrix4.data[6] = ad * f + bc;
      matrix4.data[10] = ac - bd * f;
    } else if (order === _Euler__WEBPACK_IMPORTED_MODULE_0__.EEulerOrder.XZY) {
      const ac = a * c;
      const ad = a * d;
      const bc = b * c;
      const bd = b * d;
      matrix4.data[0] = c * e;
      matrix4.data[4] = -f;
      matrix4.data[8] = d * e;
      matrix4.data[1] = ac * f + bd;
      matrix4.data[5] = a * e;
      matrix4.data[9] = ad * f - bc;
      matrix4.data[2] = bc * f - ad;
      matrix4.data[6] = b * e;
      matrix4.data[10] = bd * f + ac;
    }
    matrix4.data[3] = 0;
    matrix4.data[7] = 0;
    matrix4.data[11] = 0;
    matrix4.data[12] = 0;
    matrix4.data[13] = 0;
    matrix4.data[14] = 0;
    matrix4.data[15] = 1;
    return matrix4;
  }
  /**
   * @description 创建旋转变换矩阵: 基于四元数
   * @function setRotationFromQuaternion
   * @param {Quaternion} quaternion 四元数
   * @return {Matrix4}
   */
  static setRotationFromQuaternion(quaternion) {
    const matrix4 = new _Matrix4__WEBPACK_IMPORTED_MODULE_2__.Matrix4();
    const { x, y, z, w } = quaternion;
    const x2 = 2 * x;
    const y2 = 2 * y;
    const z2 = 2 * z;
    const xx = x * x2;
    const xy = x * y2;
    const xz = x * z2;
    const yy = y * y2;
    const yz = y * z2;
    const zz = z * z2;
    const wx = w * x2;
    const wy = w * y2;
    const wz = w * z2;
    matrix4.data[0] = 1 - (yy + zz);
    matrix4.data[1] = xy + wz;
    matrix4.data[2] = xz - wy;
    matrix4.data[3] = 0;
    matrix4.data[4] = xy - wz;
    matrix4.data[5] = 1 - (xx + zz);
    matrix4.data[6] = yz + wx;
    matrix4.data[7] = 0;
    matrix4.data[8] = xz + wy;
    matrix4.data[9] = yz - wx;
    matrix4.data[10] = 1 - (xx + yy);
    matrix4.data[11] = 0;
    matrix4.data[12] = 0;
    matrix4.data[13] = 0;
    matrix4.data[14] = 0;
    matrix4.data[15] = 1;
    return matrix4;
  }
  /**
   * @description 创建变换矩阵: 旋转矩阵
   * @function setRotate
   * @param {number} radian 旋转弧度
   * @param {Vector3} axisVector3 旋转轴(向量)
   * @return {Matrix4}
   */
  static setRotate(radian, axisVector3) {
    const matrix4 = new _Matrix4__WEBPACK_IMPORTED_MODULE_2__.Matrix4();
    const { x, y, z } = axisVector3;
    if (x === 0 && y === 0 && z === 0) {
      throw new Error("[CanvasMatrix4] the rotation vector cannot be a point.");
    }
    let vx = x;
    let vy = y;
    let vz = z;
    let s = Math.sin(radian);
    let c = Math.cos(radian);
    if (0 !== vx && 0 === vy && 0 === vz) {
      if (vx < 0) {
        s = -s;
      }
      matrix4.data[0] = 1;
      matrix4.data[4] = 0;
      matrix4.data[8] = 0;
      matrix4.data[12] = 0;
      matrix4.data[1] = 0;
      matrix4.data[5] = c;
      matrix4.data[9] = -s;
      matrix4.data[13] = 0;
      matrix4.data[2] = 0;
      matrix4.data[6] = s;
      matrix4.data[10] = c;
      matrix4.data[14] = 0;
      matrix4.data[3] = 0;
      matrix4.data[7] = 0;
      matrix4.data[11] = 0;
      matrix4.data[15] = 1;
    } else if (0 === vx && 0 !== vy && 0 === vz) {
      if (vy < 0) {
        s = -s;
      }
      matrix4.data[0] = c;
      matrix4.data[4] = 0;
      matrix4.data[8] = s;
      matrix4.data[12] = 0;
      matrix4.data[1] = 0;
      matrix4.data[5] = 1;
      matrix4.data[9] = 0;
      matrix4.data[13] = 0;
      matrix4.data[2] = -s;
      matrix4.data[6] = 0;
      matrix4.data[10] = c;
      matrix4.data[14] = 0;
      matrix4.data[3] = 0;
      matrix4.data[7] = 0;
      matrix4.data[11] = 0;
      matrix4.data[15] = 1;
    } else if (0 === vx && 0 === vy && 0 !== vz) {
      if (vz < 0) {
        s = -s;
      }
      matrix4.data[0] = c;
      matrix4.data[4] = -s;
      matrix4.data[8] = 0;
      matrix4.data[12] = 0;
      matrix4.data[1] = s;
      matrix4.data[5] = c;
      matrix4.data[9] = 0;
      matrix4.data[13] = 0;
      matrix4.data[2] = 0;
      matrix4.data[6] = 0;
      matrix4.data[10] = 1;
      matrix4.data[14] = 0;
      matrix4.data[3] = 0;
      matrix4.data[7] = 0;
      matrix4.data[11] = 0;
      matrix4.data[15] = 1;
    } else {
      const len = Math.sqrt(vx * vx + vy * vy + vz * vz);
      if (len !== 1) {
        const rlen = 1 / len;
        vx *= rlen;
        vy *= rlen;
        vz *= rlen;
      }
      let nc = 1 - c;
      let xy = vx * vy;
      let yz = vy * vz;
      let zx = vz * vx;
      let xs = vx * s;
      let ys = vy * s;
      let zs = vz * s;
      matrix4.data[0] = vx * vx * nc + c;
      matrix4.data[1] = xy * nc + zs;
      matrix4.data[2] = zx * nc - ys;
      matrix4.data[3] = 0;
      matrix4.data[4] = xy * nc - zs;
      matrix4.data[5] = vy * vy * nc + c;
      matrix4.data[6] = yz * nc + xs;
      matrix4.data[7] = 0;
      matrix4.data[8] = zx * nc + ys;
      matrix4.data[9] = yz * nc - xs;
      matrix4.data[10] = vz * vz * nc + c;
      matrix4.data[11] = 0;
      matrix4.data[12] = 0;
      matrix4.data[13] = 0;
      matrix4.data[14] = 0;
      matrix4.data[15] = 1;
    }
    return matrix4;
  }
  /**
   * @description 创建变换矩阵: 平移矩阵
   * @function setTranslate
   * @param {Vector3} directionVector3 位移(向量)
   * @return {Matrix4}
   */
  static setTranslate(directionVector3) {
    const matrix4 = new _Matrix4__WEBPACK_IMPORTED_MODULE_2__.Matrix4();
    const { x, y, z } = directionVector3;
    matrix4.data[0] = 1;
    matrix4.data[4] = 0;
    matrix4.data[8] = 0;
    matrix4.data[12] = x;
    matrix4.data[1] = 0;
    matrix4.data[5] = 1;
    matrix4.data[9] = 0;
    matrix4.data[13] = y;
    matrix4.data[2] = 0;
    matrix4.data[6] = 0;
    matrix4.data[10] = 1;
    matrix4.data[14] = z;
    matrix4.data[3] = 0;
    matrix4.data[7] = 0;
    matrix4.data[11] = 0;
    matrix4.data[15] = 1;
    return matrix4;
  }
  /**
   * @description 创建变换矩阵: 缩放矩阵
   * @function setScale
   * @param {number} x X 轴缩放倍率
   * @param {number} y Y 轴缩放倍率
   * @param {number} z Z 轴缩放倍率
   * @return {Matrix4}
   */
  static setScale(x, y, z) {
    const matrix4 = new _Matrix4__WEBPACK_IMPORTED_MODULE_2__.Matrix4();
    matrix4.data[0] = x;
    matrix4.data[4] = 0;
    matrix4.data[8] = 0;
    matrix4.data[12] = 0;
    matrix4.data[1] = 0;
    matrix4.data[5] = y;
    matrix4.data[9] = 0;
    matrix4.data[13] = 0;
    matrix4.data[2] = 0;
    matrix4.data[6] = 0;
    matrix4.data[10] = z;
    matrix4.data[14] = 0;
    matrix4.data[3] = 0;
    matrix4.data[7] = 0;
    matrix4.data[11] = 0;
    matrix4.data[15] = 1;
    return matrix4;
  }
  /**
   * @description 创建正交投影矩阵
   * @function setOrtho
   * @param {number} left 可视范围左侧裁剪位置(左侧边界)
   * @param {number} right 可视范围右侧裁剪位置(右侧边界)
   * @param {number} bottom 可视范围底部裁剪位置(底部边界)
   * @param {number} top 可视范围顶部裁剪位置(顶部边界)
   * @param {number} near 可视范围纵深方向近端裁剪位置(近端边界)
   * @param {number} far 可视范围纵深方向远端裁剪位置(远端边界)
   * @return {Matrix4}
   */
  static setOrtho(left, right, bottom, top, near, far) {
    const matrix4 = new _Matrix4__WEBPACK_IMPORTED_MODULE_2__.Matrix4();
    if (left === right || bottom === top || near === far) {
      throw "null frustum";
    }
    const rw = 1 / (right - left);
    const rh = 1 / (top - bottom);
    const rd = 1 / (far - near);
    matrix4.data[0] = 2 * rw;
    matrix4.data[1] = 0;
    matrix4.data[2] = 0;
    matrix4.data[3] = 0;
    matrix4.data[4] = 0;
    matrix4.data[5] = 2 * rh;
    matrix4.data[6] = 0;
    matrix4.data[7] = 0;
    matrix4.data[8] = 0;
    matrix4.data[9] = 0;
    matrix4.data[10] = -2 * rd;
    matrix4.data[11] = 0;
    matrix4.data[12] = -(right + left) * rw;
    matrix4.data[13] = -(top + bottom) * rh;
    matrix4.data[14] = -(far + near) * rd;
    matrix4.data[15] = 1;
    return matrix4;
  }
  static setOrthoRectView(aspect, near = 100, far = -100, padding = 1) {
    return this.setOrtho(-aspect * padding, aspect * padding, -padding, padding, near, far);
  }
  /**
   * @description 创建透视投影矩阵
   * @function setPerspective
   * @param {number} fovy 可视范围上下边界面构成的夹角
   * @param {number} aspect 可视范围宽高比
   * @param {number} near 可视范围纵深方向近端裁剪位置(近端边界)
   * @param {number} far 可视范围纵深方向远端裁剪位置(远端边界)
   * @return {Matrix4}
   */
  static setPerspective(fovy, aspect, near, far) {
    const matrix4 = new _Matrix4__WEBPACK_IMPORTED_MODULE_2__.Matrix4();
    if (near === far || aspect === 0) {
      throw "null frustum";
    }
    if (near <= 0) {
      throw "near <= 0";
    }
    if (far <= 0) {
      throw "far <= 0";
    }
    let _fovy = Math.PI * fovy / 180 / 2;
    let s = Math.sin(_fovy);
    if (s === 0) {
      throw "null frustum";
    }
    let rd = 1 / (far - near);
    let ct = Math.cos(_fovy) / s;
    matrix4.data[0] = ct / aspect;
    matrix4.data[1] = 0;
    matrix4.data[2] = 0;
    matrix4.data[3] = 0;
    matrix4.data[4] = 0;
    matrix4.data[5] = ct;
    matrix4.data[6] = 0;
    matrix4.data[7] = 0;
    matrix4.data[8] = 0;
    matrix4.data[9] = 0;
    matrix4.data[10] = -(far + near) * rd;
    matrix4.data[11] = -1;
    matrix4.data[12] = 0;
    matrix4.data[13] = 0;
    matrix4.data[14] = -2 * near * far * rd;
    matrix4.data[15] = 0;
    return matrix4;
  }
  /**
   * @description 创建透视投影矩阵
   * @function setOrtho
   * @param {number} left 可视范围左侧裁剪位置(左侧边界)
   * @param {number} right 可视范围右侧裁剪位置(右侧边界)
   * @param {number} bottom 可视范围底部裁剪位置(底部边界)
   * @param {number} top 可视范围顶部裁剪位置(顶部边界)
   * @param {number} near 可视范围纵深方向近端裁剪位置(近端边界)
   * @param {number} far 可视范围纵深方向远端裁剪位置(远端边界)
   * @return {Matrix4}
   */
  static setFrustum(left, right, bottom, top, near, far) {
    const matrix4 = new _Matrix4__WEBPACK_IMPORTED_MODULE_2__.Matrix4();
    if (left === right || top === bottom || near === far) {
      throw "null frustum";
    }
    if (near <= 0) {
      throw "near <= 0";
    }
    if (far <= 0) {
      throw "far <= 0";
    }
    const rw = 1 / (right - left);
    const rh = 1 / (top - bottom);
    const rd = 1 / (far - near);
    matrix4.data[0] = 2 * near * rw;
    matrix4.data[1] = 0;
    matrix4.data[2] = 0;
    matrix4.data[3] = 0;
    matrix4.data[4] = 0;
    matrix4.data[5] = 2 * near * rh;
    matrix4.data[6] = 0;
    matrix4.data[7] = 0;
    matrix4.data[8] = (right + left) * rw;
    matrix4.data[9] = (top + bottom) * rh;
    matrix4.data[10] = -(far + near) * rd;
    matrix4.data[11] = -1;
    matrix4.data[12] = 0;
    matrix4.data[13] = 0;
    matrix4.data[14] = -2 * near * far * rd;
    matrix4.data[15] = 0;
    return matrix4;
  }
  /**
   * @description 创建视图矩阵
   * @function setLookAt
   * @param {Vector3} eyeVector3 观察者视点位置
   * @param {Vector3} atVector3 观察目标点位置
   * @param {Vector3} upVector3 观察者上方向
   * @return {Matrix4}
   */
  static setLookAt(eyeVector3, atVector3, upVector3 = new _vector_Vector3__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 1, 0)) {
    const matrix4 = new _Matrix4__WEBPACK_IMPORTED_MODULE_2__.Matrix4();
    const { x: eyeX, y: eyeY, z: eyeZ } = eyeVector3;
    const { x: atX, y: atY, z: atZ } = atVector3;
    const { x: upX, y: upY, z: upZ } = upVector3;
    let fx = atX - eyeX;
    let fy = atY - eyeY;
    let fz = atZ - eyeZ;
    const rlf = 1 / Math.sqrt(fx * fx + fy * fy + fz * fz);
    fx *= rlf;
    fy *= rlf;
    fz *= rlf;
    let sx = fy * upZ - fz * upY;
    let sy = fz * upX - fx * upZ;
    let sz = fx * upY - fy * upX;
    const rls = 1 / Math.sqrt(sx * sx + sy * sy + sz * sz);
    sx *= rls;
    sy *= rls;
    sz *= rls;
    let ux = sy * fz - sz * fy;
    let uy = sz * fx - sx * fz;
    let uz = sx * fy - sy * fx;
    matrix4.data[0] = sx;
    matrix4.data[1] = ux;
    matrix4.data[2] = -fx;
    matrix4.data[3] = 0;
    matrix4.data[4] = sy;
    matrix4.data[5] = uy;
    matrix4.data[6] = -fy;
    matrix4.data[7] = 0;
    matrix4.data[8] = sz;
    matrix4.data[9] = uz;
    matrix4.data[10] = -fz;
    matrix4.data[11] = 0;
    matrix4.data[12] = 0;
    matrix4.data[13] = 0;
    matrix4.data[14] = 0;
    matrix4.data[15] = 1;
    return CanvasMatrix4.setTranslate(new _vector_Vector3__WEBPACK_IMPORTED_MODULE_1__.Vector3(-eyeX, -eyeY, -eyeZ)).multiply4(matrix4);
  }
  /**
   * @description 创建转置矩阵
   * @function setTranspose
   * @param {Matrix4} sourceMatrix4 矩阵
   * @return {Matrix4}
   */
  static setTranspose(sourceMatrix4) {
    const matrix4 = new _Matrix4__WEBPACK_IMPORTED_MODULE_2__.Matrix4();
    for (let i = 0; i < sourceMatrix4.data.length; i++) {
      matrix4.data[i] = sourceMatrix4.data[i];
    }
    let t = void 0;
    t = matrix4.data[1];
    matrix4.data[1] = matrix4.data[4];
    matrix4.data[4] = t;
    t = matrix4.data[2];
    matrix4.data[2] = matrix4.data[8];
    matrix4.data[8] = t;
    t = matrix4.data[3];
    matrix4.data[3] = matrix4.data[12];
    matrix4.data[12] = t;
    t = matrix4.data[6];
    matrix4.data[6] = matrix4.data[9];
    matrix4.data[9] = t;
    t = matrix4.data[7];
    matrix4.data[7] = matrix4.data[13];
    matrix4.data[13] = t;
    t = matrix4.data[11];
    matrix4.data[11] = matrix4.data[14];
    matrix4.data[14] = t;
    return matrix4;
  }
  /**
   * @description 创建逆矩阵
   * @function setInverse
   * @param {Matrix4} sourceMatrix4 矩阵
   * @return {Matrix4}
   */
  static setInverse(sourceMatrix4) {
    const invMatrix4 = new _Matrix4__WEBPACK_IMPORTED_MODULE_2__.Matrix4();
    const resultMatrix4 = new _Matrix4__WEBPACK_IMPORTED_MODULE_2__.Matrix4();
    invMatrix4.data[0] = sourceMatrix4.data[5] * sourceMatrix4.data[10] * sourceMatrix4.data[15] - sourceMatrix4.data[5] * sourceMatrix4.data[11] * sourceMatrix4.data[14] - sourceMatrix4.data[9] * sourceMatrix4.data[6] * sourceMatrix4.data[15] + sourceMatrix4.data[9] * sourceMatrix4.data[7] * sourceMatrix4.data[14] + sourceMatrix4.data[13] * sourceMatrix4.data[6] * sourceMatrix4.data[11] - sourceMatrix4.data[13] * sourceMatrix4.data[7] * sourceMatrix4.data[10];
    invMatrix4.data[4] = -sourceMatrix4.data[4] * sourceMatrix4.data[10] * sourceMatrix4.data[15] + sourceMatrix4.data[4] * sourceMatrix4.data[11] * sourceMatrix4.data[14] + sourceMatrix4.data[8] * sourceMatrix4.data[6] * sourceMatrix4.data[15] - sourceMatrix4.data[8] * sourceMatrix4.data[7] * sourceMatrix4.data[14] - sourceMatrix4.data[12] * sourceMatrix4.data[6] * sourceMatrix4.data[11] + sourceMatrix4.data[12] * sourceMatrix4.data[7] * sourceMatrix4.data[10];
    invMatrix4.data[8] = sourceMatrix4.data[4] * sourceMatrix4.data[9] * sourceMatrix4.data[15] - sourceMatrix4.data[4] * sourceMatrix4.data[11] * sourceMatrix4.data[13] - sourceMatrix4.data[8] * sourceMatrix4.data[5] * sourceMatrix4.data[15] + sourceMatrix4.data[8] * sourceMatrix4.data[7] * sourceMatrix4.data[13] + sourceMatrix4.data[12] * sourceMatrix4.data[5] * sourceMatrix4.data[11] - sourceMatrix4.data[12] * sourceMatrix4.data[7] * sourceMatrix4.data[9];
    invMatrix4.data[12] = -sourceMatrix4.data[4] * sourceMatrix4.data[9] * sourceMatrix4.data[14] + sourceMatrix4.data[4] * sourceMatrix4.data[10] * sourceMatrix4.data[13] + sourceMatrix4.data[8] * sourceMatrix4.data[5] * sourceMatrix4.data[14] - sourceMatrix4.data[8] * sourceMatrix4.data[6] * sourceMatrix4.data[13] - sourceMatrix4.data[12] * sourceMatrix4.data[5] * sourceMatrix4.data[10] + sourceMatrix4.data[12] * sourceMatrix4.data[6] * sourceMatrix4.data[9];
    invMatrix4.data[1] = -sourceMatrix4.data[1] * sourceMatrix4.data[10] * sourceMatrix4.data[15] + sourceMatrix4.data[1] * sourceMatrix4.data[11] * sourceMatrix4.data[14] + sourceMatrix4.data[9] * sourceMatrix4.data[2] * sourceMatrix4.data[15] - sourceMatrix4.data[9] * sourceMatrix4.data[3] * sourceMatrix4.data[14] - sourceMatrix4.data[13] * sourceMatrix4.data[2] * sourceMatrix4.data[11] + sourceMatrix4.data[13] * sourceMatrix4.data[3] * sourceMatrix4.data[10];
    invMatrix4.data[5] = sourceMatrix4.data[0] * sourceMatrix4.data[10] * sourceMatrix4.data[15] - sourceMatrix4.data[0] * sourceMatrix4.data[11] * sourceMatrix4.data[14] - sourceMatrix4.data[8] * sourceMatrix4.data[2] * sourceMatrix4.data[15] + sourceMatrix4.data[8] * sourceMatrix4.data[3] * sourceMatrix4.data[14] + sourceMatrix4.data[12] * sourceMatrix4.data[2] * sourceMatrix4.data[11] - sourceMatrix4.data[12] * sourceMatrix4.data[3] * sourceMatrix4.data[10];
    invMatrix4.data[9] = -sourceMatrix4.data[0] * sourceMatrix4.data[9] * sourceMatrix4.data[15] + sourceMatrix4.data[0] * sourceMatrix4.data[11] * sourceMatrix4.data[13] + sourceMatrix4.data[8] * sourceMatrix4.data[1] * sourceMatrix4.data[15] - sourceMatrix4.data[8] * sourceMatrix4.data[3] * sourceMatrix4.data[13] - sourceMatrix4.data[12] * sourceMatrix4.data[1] * sourceMatrix4.data[11] + sourceMatrix4.data[12] * sourceMatrix4.data[3] * sourceMatrix4.data[9];
    invMatrix4.data[13] = sourceMatrix4.data[0] * sourceMatrix4.data[9] * sourceMatrix4.data[14] - sourceMatrix4.data[0] * sourceMatrix4.data[10] * sourceMatrix4.data[13] - sourceMatrix4.data[8] * sourceMatrix4.data[1] * sourceMatrix4.data[14] + sourceMatrix4.data[8] * sourceMatrix4.data[2] * sourceMatrix4.data[13] + sourceMatrix4.data[12] * sourceMatrix4.data[1] * sourceMatrix4.data[10] - sourceMatrix4.data[12] * sourceMatrix4.data[2] * sourceMatrix4.data[9];
    invMatrix4.data[2] = sourceMatrix4.data[1] * sourceMatrix4.data[6] * sourceMatrix4.data[15] - sourceMatrix4.data[1] * sourceMatrix4.data[7] * sourceMatrix4.data[14] - sourceMatrix4.data[5] * sourceMatrix4.data[2] * sourceMatrix4.data[15] + sourceMatrix4.data[5] * sourceMatrix4.data[3] * sourceMatrix4.data[14] + sourceMatrix4.data[13] * sourceMatrix4.data[2] * sourceMatrix4.data[7] - sourceMatrix4.data[13] * sourceMatrix4.data[3] * sourceMatrix4.data[6];
    invMatrix4.data[6] = -sourceMatrix4.data[0] * sourceMatrix4.data[6] * sourceMatrix4.data[15] + sourceMatrix4.data[0] * sourceMatrix4.data[7] * sourceMatrix4.data[14] + sourceMatrix4.data[4] * sourceMatrix4.data[2] * sourceMatrix4.data[15] - sourceMatrix4.data[4] * sourceMatrix4.data[3] * sourceMatrix4.data[14] - sourceMatrix4.data[12] * sourceMatrix4.data[2] * sourceMatrix4.data[7] + sourceMatrix4.data[12] * sourceMatrix4.data[3] * sourceMatrix4.data[6];
    invMatrix4.data[10] = sourceMatrix4.data[0] * sourceMatrix4.data[5] * sourceMatrix4.data[15] - sourceMatrix4.data[0] * sourceMatrix4.data[7] * sourceMatrix4.data[13] - sourceMatrix4.data[4] * sourceMatrix4.data[1] * sourceMatrix4.data[15] + sourceMatrix4.data[4] * sourceMatrix4.data[3] * sourceMatrix4.data[13] + sourceMatrix4.data[12] * sourceMatrix4.data[1] * sourceMatrix4.data[7] - sourceMatrix4.data[12] * sourceMatrix4.data[3] * sourceMatrix4.data[5];
    invMatrix4.data[14] = -sourceMatrix4.data[0] * sourceMatrix4.data[5] * sourceMatrix4.data[14] + sourceMatrix4.data[0] * sourceMatrix4.data[6] * sourceMatrix4.data[13] + sourceMatrix4.data[4] * sourceMatrix4.data[1] * sourceMatrix4.data[14] - sourceMatrix4.data[4] * sourceMatrix4.data[2] * sourceMatrix4.data[13] - sourceMatrix4.data[12] * sourceMatrix4.data[1] * sourceMatrix4.data[6] + sourceMatrix4.data[12] * sourceMatrix4.data[2] * sourceMatrix4.data[5];
    invMatrix4.data[3] = -sourceMatrix4.data[1] * sourceMatrix4.data[6] * sourceMatrix4.data[11] + sourceMatrix4.data[1] * sourceMatrix4.data[7] * sourceMatrix4.data[10] + sourceMatrix4.data[5] * sourceMatrix4.data[2] * sourceMatrix4.data[11] - sourceMatrix4.data[5] * sourceMatrix4.data[3] * sourceMatrix4.data[10] - sourceMatrix4.data[9] * sourceMatrix4.data[2] * sourceMatrix4.data[7] + sourceMatrix4.data[9] * sourceMatrix4.data[3] * sourceMatrix4.data[6];
    invMatrix4.data[7] = sourceMatrix4.data[0] * sourceMatrix4.data[6] * sourceMatrix4.data[11] - sourceMatrix4.data[0] * sourceMatrix4.data[7] * sourceMatrix4.data[10] - sourceMatrix4.data[4] * sourceMatrix4.data[2] * sourceMatrix4.data[11] + sourceMatrix4.data[4] * sourceMatrix4.data[3] * sourceMatrix4.data[10] + sourceMatrix4.data[8] * sourceMatrix4.data[2] * sourceMatrix4.data[7] - sourceMatrix4.data[8] * sourceMatrix4.data[3] * sourceMatrix4.data[6];
    invMatrix4.data[11] = -sourceMatrix4.data[0] * sourceMatrix4.data[5] * sourceMatrix4.data[11] + sourceMatrix4.data[0] * sourceMatrix4.data[7] * sourceMatrix4.data[9] + sourceMatrix4.data[4] * sourceMatrix4.data[1] * sourceMatrix4.data[11] - sourceMatrix4.data[4] * sourceMatrix4.data[3] * sourceMatrix4.data[9] - sourceMatrix4.data[8] * sourceMatrix4.data[1] * sourceMatrix4.data[7] + sourceMatrix4.data[8] * sourceMatrix4.data[3] * sourceMatrix4.data[5];
    invMatrix4.data[15] = sourceMatrix4.data[0] * sourceMatrix4.data[5] * sourceMatrix4.data[10] - sourceMatrix4.data[0] * sourceMatrix4.data[6] * sourceMatrix4.data[9] - sourceMatrix4.data[4] * sourceMatrix4.data[1] * sourceMatrix4.data[10] + sourceMatrix4.data[4] * sourceMatrix4.data[2] * sourceMatrix4.data[9] + sourceMatrix4.data[8] * sourceMatrix4.data[1] * sourceMatrix4.data[6] - sourceMatrix4.data[8] * sourceMatrix4.data[2] * sourceMatrix4.data[5];
    let det = sourceMatrix4.data[0] * invMatrix4.data[0] + sourceMatrix4.data[1] * invMatrix4.data[4] + sourceMatrix4.data[2] * invMatrix4.data[8] + sourceMatrix4.data[3] * invMatrix4.data[12];
    if (det === 0) {
      return resultMatrix4;
    }
    det = 1 / det;
    for (let i = 0; i < invMatrix4.data.length; i++) {
      resultMatrix4.data[i] = invMatrix4.data[i] * det;
    }
    return resultMatrix4;
  }
}


/***/ }),

/***/ "./src/engine/common/geometry/matrix/Matrix.ts":
/*!*****************************************************!*\
  !*** ./src/engine/common/geometry/matrix/Matrix.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Matrix: () => (/* binding */ Matrix)
/* harmony export */ });
/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/Utils */ "./src/engine/common/utils/Utils.ts");


class Matrix {
  /**
   * 计算矩阵 A 与矩阵 B 的乘积
   * 		mA - 矩阵 A 的行数
   * 		nA - 矩阵 A 的列数
   * 		mB - 矩阵 B 的行数
   * 		nB - 矩阵 B 的列数
   */
  static matrixMul(mA, nA, mB, nB, A, B) {
    if (nA !== mB) {
      throw new Error("does not satisfy the condition of matrix multiplication: nA === mB");
    }
    const result = new Array(mA * nB);
    let ri = 0;
    let ai = 0;
    for (let riA = 0; riA < mA; riA++) {
      for (let ciB = 0; ciB < nB; ciB++) {
        let bi = ciB;
        let sum = 0;
        for (let ciA = 0; ciA < nA; ciA++) {
          sum += A[ai + ciA] * B[bi];
          bi += nB;
        }
        result[ri++] = sum;
      }
      ai += nA;
    }
    return result;
  }
  /**
   * 依据某个数值在矩阵中的"坐标"参数, 获取其在数组中的真实索引
   *      例如
   *          A =
   * 			    1  2  3
   *    		    4  5  6
   *      需要获取矩阵 A 中第 2 行第 2 列的项(item = 5)在数组中的索引
   *      即 index = Matrix.matrixAt(3, 1, 1)
   */
  static matrixAt(colLen, rowIndex, columnIndex) {
    return colLen * rowIndex + columnIndex;
  }
  static getMatrixRankResult(matrixArr, rowLen, colLen) {
    const copyMatrixArr = matrixArr.slice(0);
    let rank = Math.min(rowLen, colLen);
    for (let ri = 0; ri < rowLen; ri++) {
      if (copyMatrixArr[Matrix.matrixAt(colLen, ri, ri)] === 0) {
        let tmp = new Array(colLen);
        let ci = 0;
        for (ci = ri; ci < rowLen; ci++) {
          if (copyMatrixArr[Matrix.matrixAt(colLen, ci, ri)] !== 0) {
            (0,_utils_Utils__WEBPACK_IMPORTED_MODULE_0__.arrayCopy)(copyMatrixArr, Matrix.matrixAt(colLen, ci, 0), tmp, 0, colLen);
            (0,_utils_Utils__WEBPACK_IMPORTED_MODULE_0__.arrayCopy)(copyMatrixArr, Matrix.matrixAt(colLen, ri, 0), copyMatrixArr, Matrix.matrixAt(colLen, ci, 0), colLen);
            (0,_utils_Utils__WEBPACK_IMPORTED_MODULE_0__.arrayCopy)(tmp, 0, copyMatrixArr, Matrix.matrixAt(colLen, ri, 0), colLen);
            break;
          }
        }
        if (ci >= rowLen) {
          rank -= 1;
        }
      }
      if (rank < rowLen) {
        continue;
      }
      for (let rii = 0; rii < rowLen; rii++) {
        if (rii === ri) {
          continue;
        }
        let multiplier = copyMatrixArr[Matrix.matrixAt(colLen, rii, ri)] / copyMatrixArr[Matrix.matrixAt(colLen, ri, ri)];
        for (let cii = 0; cii < colLen; cii++) {
          copyMatrixArr[Matrix.matrixAt(colLen, rii, cii)] -= copyMatrixArr[Matrix.matrixAt(colLen, ri, cii)] * multiplier;
        }
      }
    }
    return {
      rank,
      updatedMatrixArr: copyMatrixArr
    };
  }
  constructor(m, n, data) {
    this._m = m;
    this._n = n;
    this._data = data;
  }
  get m() {
    return this._m;
  }
  get n() {
    return this._n;
  }
  get data() {
    return this._data;
  }
  /**
   * 将当前矩阵与矩阵 B 相乘
   */
  multiply(B) {
    const resultMatrixArr = Matrix.matrixMul(this.m, this.n, B.m, B.n, this.data, B.data);
    return new Matrix(this.m, B.n, resultMatrixArr);
  }
  /**
   * 计算当前矩阵的秩
   */
  getMatrixRankResult() {
    return Matrix.getMatrixRankResult(this.data, this.m, this.n).rank;
  }
  /**
   * 计算当前矩阵(满足条件时)的逆矩阵
   */
  getInverseMatrix() {
    const matrixArr = this.data.slice(0);
    if (this.m !== this.n) {
      throw new Error(`getInverseMatrix error: this.m !== this.n`);
    }
    const expandColLen = this.n * 2;
    const newMatrixArr = new Array(this.m * this.n).fill(0);
    let expandMatrixArr = this.initExpandMatrix(matrixArr);
    const { rank, updatedMatrixArr } = Matrix.getMatrixRankResult(expandMatrixArr, this.m, expandColLen);
    expandMatrixArr = updatedMatrixArr;
    if (rank !== this.m) {
      throw new Error(`getInverseMatrix error: rank !== this.m`);
    }
    expandMatrixArr = this.inverseMatrix(expandMatrixArr, this.m, expandColLen);
    for (let ri = 0; ri < this.m; ri++) {
      for (let ci = this.n; ci < expandColLen; ci++) {
        newMatrixArr[Matrix.matrixAt(this.n, ri, ci - this.n)] = expandMatrixArr[Matrix.matrixAt(expandColLen, ri, ci)];
      }
    }
    return new Matrix(this.m, this.n, newMatrixArr.slice(0));
  }
  hashCode() {
    let sum = 0;
    for (let num of this.data) {
      sum += num;
    }
    return sum;
  }
  /**
   * 以平铺模式生成矩阵字符串值
   */
  toString() {
    let b = [];
    b.push(`Matrix (`);
    for (let i = 0; i < this.data.length; i++) {
      b.push(String(this.data[i]));
      if (i >= this.data.length - 1) {
        continue;
      }
      b.push(", ");
    }
    b.push(`)`);
    return b.join("");
  }
  /**
   * 以格式化模式生成矩阵字符串值
   */
  toStringFormat() {
    let b = [];
    b.push(`Matrix (`);
    b.push(String(this.m));
    b.push(` x `);
    b.push(String(this.n));
    b.push(`)`);
    let idx = 0;
    for (let i = 0; i < this.m; i++) {
      for (let j = 0; j < this.n; j++) {
        let d = String(this.data[idx++]);
        if (j === 0) {
          b.push(`
`);
          b.push(`	`);
          b.push(d);
          continue;
        }
        b.push(", ");
        b.push(d);
      }
    }
    return b.join("");
  }
  /**
   * 矩阵转置
   */
  transpose() {
    const colLen = this.n;
    const rowLen = this.m;
    const transposeArr = [];
    for (let ci = 0; ci <= colLen - 1; ci++) {
      for (let ri = 0; ri <= rowLen - 1; ri++) {
        const index = ci + ri * colLen;
        transposeArr.push(this.data[index]);
      }
    }
    return new Matrix(this.n, this.m, transposeArr);
  }
  initExpandMatrix(matrixArr) {
    const rowLen = this.m;
    const colLen = this.n;
    const expandColLen = this.n * 2;
    const expandMatrixArr = new Array(rowLen * expandColLen);
    for (let ri = 0; ri < rowLen; ri++) {
      for (let ci = 0; ci < expandColLen; ci++) {
        if (ci < colLen) {
          expandMatrixArr[Matrix.matrixAt(expandColLen, ri, ci)] = matrixArr[Matrix.matrixAt(colLen, ri, ci)];
          continue;
        }
        if (ci === rowLen + ri) {
          expandMatrixArr[Matrix.matrixAt(expandColLen, ri, ci)] = 1;
          continue;
        }
        expandMatrixArr[Matrix.matrixAt(expandColLen, ri, ci)] = 0;
      }
    }
    return expandMatrixArr;
  }
  inverseMatrix(expandMatrixArr, rowLen, colLen) {
    const copyExpandMatrixArr = expandMatrixArr.slice(0);
    for (let ri = 0; ri < rowLen; ri++) {
      let firstItem = copyExpandMatrixArr[Matrix.matrixAt(colLen, ri, ri)];
      for (let ci = 0; ci < colLen; ci++) {
        copyExpandMatrixArr[Matrix.matrixAt(colLen, ri, ci)] /= firstItem;
      }
    }
    return copyExpandMatrixArr;
  }
}


/***/ }),

/***/ "./src/engine/common/geometry/matrix/Matrix3.ts":
/*!******************************************************!*\
  !*** ./src/engine/common/geometry/matrix/Matrix3.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Matrix3: () => (/* binding */ Matrix3)
/* harmony export */ });
/* harmony import */ var _Matrix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Matrix */ "./src/engine/common/geometry/matrix/Matrix.ts");


const VEN$MATRIX3_ORIGIN_DATA = [
  1,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  1
];
const _Matrix3 = class extends _Matrix__WEBPACK_IMPORTED_MODULE_0__.Matrix {
  constructor(data = [...VEN$MATRIX3_ORIGIN_DATA]) {
    super(3, 3, data);
    const a = this.data[0];
    const b = this.data[3];
    const d = this.data[1];
    const e = this.data[4];
    this._iScale = Math.sqrt(a * a + d * d);
    this._jScale = Math.sqrt(b * b + e * e);
  }
  /**
   * 平移矩阵(坐标)
   */
  static createTranslateMatrix3ByCoordinate(x, y) {
    return new _Matrix3(
      // prettier-ignore
      [
        1,
        0,
        0,
        0,
        1,
        0,
        x,
        y,
        1
      ]
    );
  }
  /**
   * 旋转矩阵(弧度)
   */
  static createRotateZMatrix3ByRadian(radian) {
    const cos = Math.cos(radian);
    const sin = Math.sin(radian);
    return new _Matrix3(
      // prettier-ignore
      [
        cos,
        sin,
        0,
        -sin,
        cos,
        0,
        0,
        0,
        1
      ]
    );
  }
  /**
   * 缩放矩阵(比例)
   */
  static createScaleMatrix3ByRatio(ratio) {
    return new _Matrix3(
      // prettier-ignore
      [
        ratio,
        0,
        0,
        0,
        ratio,
        0,
        0,
        0,
        1
      ]
    );
  }
  /**
   * 缩放矩阵(坐标)
   */
  static createScaleMatrix3ByCoordinate(x, y) {
    return new _Matrix3(
      // prettier-ignore
      [
        x,
        0,
        0,
        0,
        y,
        0,
        0,
        0,
        1
      ]
    );
  }
  get iScale() {
    return this._iScale;
  }
  get jScale() {
    return this._jScale;
  }
  multiply3(matrix3) {
    return new _Matrix3(_Matrix__WEBPACK_IMPORTED_MODULE_0__.Matrix.matrixMul(3, 3, 3, 3, this.data, matrix3.data));
  }
  /**
   * 平移变换
   */
  translateByVector2(vector2) {
    return this.multiply3(_Matrix3.createTranslateMatrix3ByCoordinate(vector2.x, vector2.y));
  }
  /**
   * 绕轴旋转变换
   */
  rotateZByRadian(radian) {
    return this.multiply3(_Matrix3.createRotateZMatrix3ByRadian(radian));
  }
  /**
   * 缩放变换
   */
  scaleByRatio(ratio) {
    return this.multiply3(_Matrix3.createScaleMatrix3ByRatio(ratio));
  }
  scaleByVector2(vector2) {
    return this.multiply3(_Matrix3.createScaleMatrix3ByCoordinate(vector2.x, vector2.y));
  }
  det() {
    return this.data[0] * this.data[4] - this.data[3] * this.data[1];
  }
  isMirrored() {
    return this.det() < 0;
  }
  resetBy(matrix3) {
    for (let i = 0; i < matrix3.data.length; i++) {
      this.data[i] = matrix3.data[i];
    }
  }
  /**
   * 矩阵转置
   */
  transpose() {
    return new _Matrix3(super.transpose().data);
  }
  /**
   * 计算当前矩阵(满足条件时)的逆矩阵
   */
  getInverseMatrix() {
    return new _Matrix3(super.getInverseMatrix().data);
  }
};
let Matrix3 = _Matrix3;
Matrix3.ORIGIN = new _Matrix3();


/***/ }),

/***/ "./src/engine/common/geometry/matrix/Matrix4.ts":
/*!******************************************************!*\
  !*** ./src/engine/common/geometry/matrix/Matrix4.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Matrix4: () => (/* binding */ Matrix4)
/* harmony export */ });
/* harmony import */ var _vector_Vector2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../vector/Vector2 */ "./src/engine/common/geometry/vector/Vector2.ts");
/* harmony import */ var _vector_Vector3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../vector/Vector3 */ "./src/engine/common/geometry/vector/Vector3.ts");
/* harmony import */ var _Matrix__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Matrix */ "./src/engine/common/geometry/matrix/Matrix.ts");
/* harmony import */ var _Matrix3__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Matrix3 */ "./src/engine/common/geometry/matrix/Matrix3.ts");





const VEN$MATRIX4_ORIGIN_DATA = [
  1,
  0,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  0,
  1
];
const _Matrix4 = class extends _Matrix__WEBPACK_IMPORTED_MODULE_2__.Matrix {
  /**
   * 平移矩阵(坐标)
   */
  static createTranslateMatrix4ByCoordinate(x, y, z) {
    return new _Matrix4(
      // prettier-ignore
      [
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        x,
        y,
        z,
        1
      ]
    );
  }
  /**
   * 旋转矩阵(弧度)
   */
  static createRotateXMatrix4ByRadian(radian) {
    const cos = Math.cos(radian);
    const sin = Math.sin(radian);
    return new _Matrix4(
      // prettier-ignore
      [
        1,
        0,
        0,
        0,
        0,
        cos,
        sin,
        0,
        0,
        -sin,
        cos,
        0,
        0,
        0,
        0,
        1
      ]
    );
  }
  static createRotateYMatrix4ByRadian(radian) {
    const cos = Math.cos(radian);
    const sin = Math.sin(radian);
    return new _Matrix4(
      // prettier-ignore
      [
        cos,
        0,
        -sin,
        0,
        0,
        1,
        0,
        0,
        sin,
        0,
        cos,
        0,
        0,
        0,
        0,
        1
      ]
    );
  }
  static createRotateZMatrix4ByRadian(radian) {
    const cos = Math.cos(radian);
    const sin = Math.sin(radian);
    return new _Matrix4(
      // prettier-ignore
      [
        cos,
        sin,
        0,
        0,
        -sin,
        cos,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1
      ]
    );
  }
  /**
   * 缩放矩阵(坐标)
   */
  static createScaleMatrix4ByCoordinate(x, y, z) {
    return new _Matrix4(
      // prettier-ignore
      [
        x,
        0,
        0,
        0,
        0,
        y,
        0,
        0,
        0,
        0,
        z,
        0,
        0,
        0,
        0,
        1
      ]
    );
  }
  /**
   * 翻转矩阵
   */
  static createFlipXMatrix4() {
    return new _Matrix4(
      // prettier-ignore
      [
        1,
        0,
        0,
        0,
        0,
        -1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1
      ]
    );
  }
  static createFlipYMatrix4() {
    return new _Matrix4(
      // prettier-ignore
      [
        -1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1
      ]
    );
  }
  static matrix4RotateZByRadianForPoint(radian, centerPoint) {
    if (centerPoint.equalsWithPoint(_vector_Vector2__WEBPACK_IMPORTED_MODULE_0__.Vector2.ORIGIN)) {
      return _Matrix4.createRotateZMatrix4ByRadian(radian);
    }
    return _Matrix4.createTranslateMatrix4ByCoordinate(-centerPoint.x, -centerPoint.y, 0).rotateZByRadian(radian).translateByVector3(new _vector_Vector3__WEBPACK_IMPORTED_MODULE_1__.Vector3(centerPoint.x, centerPoint.y, 0));
  }
  static getMatrix4(startTranslate, endTranslate, radian, scaleX) {
    const cos = Math.cos(radian);
    const sin = Math.sin(radian);
    const x = scaleX * (startTranslate.x * cos - startTranslate.y * sin) + endTranslate.x;
    const y = startTranslate.x * sin + startTranslate.y * cos + endTranslate.y;
    const data = [scaleX * cos, sin, 0, 0, -sin * scaleX, cos, 0, 0, 0, 0, 1, 0, x, y, 0, 1];
    return new _Matrix4(data);
  }
  constructor(data = [...VEN$MATRIX4_ORIGIN_DATA]) {
    super(4, 4, data);
  }
  multiply4(matrix4) {
    return new _Matrix4(_Matrix__WEBPACK_IMPORTED_MODULE_2__.Matrix.matrixMul(4, 4, 4, 4, this.data, matrix4.data));
  }
  /**
   * 平移变换
   */
  translateByVector3(vector3) {
    return this.multiply4(_Matrix4.createTranslateMatrix4ByCoordinate(vector3.x, vector3.y, vector3.z));
  }
  /**
   * 绕轴旋转变换
   */
  rotateXByRadian(radian) {
    return this.multiply4(_Matrix4.createRotateXMatrix4ByRadian(radian));
  }
  rotateYByRadian(radian) {
    return this.multiply4(_Matrix4.createRotateYMatrix4ByRadian(radian));
  }
  rotateZByRadian(radian) {
    return this.multiply4(_Matrix4.createRotateZMatrix4ByRadian(radian));
  }
  /**
   * 缩放变换
   */
  scaleByVector3(vector3) {
    return this.multiply4(_Matrix4.createScaleMatrix4ByCoordinate(vector3.x, vector3.y, vector3.z));
  }
  setOriginByVector3(vector3) {
    return _Matrix4.createTranslateMatrix4ByCoordinate(-vector3.x, -vector3.y, -vector3.z).multiply4(this).multiply4(_Matrix4.createTranslateMatrix4ByCoordinate(vector3.x, vector3.y, vector3.z));
  }
  toMatrix3() {
    return new _Matrix3__WEBPACK_IMPORTED_MODULE_3__.Matrix3([this.data[0], this.data[1], 0, this.data[4], this.data[5], 0, this.data[12], this.data[13], 1]);
  }
  resetBy(matrix4) {
    for (let i = 0; i < matrix4.data.length; i++) {
      this.data[i] = matrix4.data[i];
    }
  }
  /**
   * 矩阵转置
   */
  transpose() {
    return new _Matrix4(super.transpose().data);
  }
  /**
   * 计算当前矩阵(满足条件时)的逆矩阵
   */
  getInverseMatrix() {
    return new _Matrix4(super.getInverseMatrix().data);
  }
};
let Matrix4 = _Matrix4;
Matrix4.ORIGIN = new _Matrix4();


/***/ }),

/***/ "./src/engine/common/geometry/shapes/D2ArcTransitions.ts":
/*!***************************************************************!*\
  !*** ./src/engine/common/geometry/shapes/D2ArcTransitions.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2ArcTransitions: () => (/* binding */ D2ArcTransitions)
/* harmony export */ });
/* harmony import */ var _config_CommonProfile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../config/CommonProfile */ "./src/engine/config/CommonProfile.ts");
/* harmony import */ var _vector_Vector2__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../vector/Vector2 */ "./src/engine/common/geometry/vector/Vector2.ts");
/* harmony import */ var _D2CircleTransitions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./D2CircleTransitions */ "./src/engine/common/geometry/shapes/D2CircleTransitions.ts");




class D2ArcTransitions {
  static fixCircleAngle(point, centerPoint) {
    const angle = Math.atan2(point.y - centerPoint.y, point.x - centerPoint.x);
    return angle < 0 ? angle + 2 * Math.PI : angle;
  }
  /**
   * 非共线三点计算圆弧参数
   */
  static calculateD2ArcProfileByThreePoint(startPoint, endPoint, thirdPoint) {
    if (startPoint.equalsWithPoint(thirdPoint) || endPoint.equalsWithPoint(thirdPoint)) {
      const centerPoint = startPoint.add(thirdPoint).mul(0.5);
      return {
        centerPoint,
        radius: thirdPoint.distance(startPoint) / 2,
        startAngle: startPoint.angleVector2(centerPoint),
        endAngle: endPoint.angleVector2(centerPoint),
        sweep: _config_CommonProfile__WEBPACK_IMPORTED_MODULE_0__.ESweep.CCW
      };
    }
    const circleProfile = _D2CircleTransitions__WEBPACK_IMPORTED_MODULE_2__.D2CircleTransitions.calculateCircleProfileByByThreePoint(startPoint, endPoint, thirdPoint);
    const thetaA = D2ArcTransitions.fixCircleAngle(startPoint, circleProfile.centerPoint);
    const thetaB = D2ArcTransitions.fixCircleAngle(endPoint, circleProfile.centerPoint);
    const thetaC = D2ArcTransitions.fixCircleAngle(thirdPoint, circleProfile.centerPoint);
    let startAngle = 0;
    let endAngle = 0;
    if (thetaC < Math.min(thetaA, thetaB) || thetaC > Math.max(thetaA, thetaB)) {
      if (thetaA < thetaB) {
        startAngle = thetaA;
        endAngle = thetaB - 2 * Math.PI;
      } else {
        startAngle = thetaA - 2 * Math.PI;
        endAngle = thetaB;
      }
    } else {
      startAngle = thetaA;
      endAngle = thetaB;
    }
    return {
      centerPoint: circleProfile.centerPoint,
      radius: circleProfile.radius,
      sweep: circleProfile.sweep,
      /* ... */
      startAngle,
      endAngle
    };
  }
  /**
   * 由圆弧参数计算起点坐标/末点坐标/中点坐标
   */
  static calculateThreePointByArcProfile(radius, startAngle, endAngle) {
    const arcStartPoint = new _vector_Vector2__WEBPACK_IMPORTED_MODULE_1__.Vector2(radius * Math.cos(startAngle), radius * Math.sin(startAngle));
    const arcEndPoint = new _vector_Vector2__WEBPACK_IMPORTED_MODULE_1__.Vector2(radius * Math.cos(endAngle), radius * Math.sin(endAngle));
    const addPoint = arcStartPoint.add(arcEndPoint);
    const dir = Math.abs(endAngle - startAngle) > Math.PI ? -1 : 1;
    return {
      startPoint: arcStartPoint,
      endPoint: arcEndPoint,
      middlePoint: addPoint.normalize().mul(dir * radius, dir * radius)
    };
  }
}


/***/ }),

/***/ "./src/engine/common/geometry/shapes/D2CircleTransitions.ts":
/*!******************************************************************!*\
  !*** ./src/engine/common/geometry/shapes/D2CircleTransitions.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2CircleTransitions: () => (/* binding */ D2CircleTransitions)
/* harmony export */ });
/* harmony import */ var _config_CommonProfile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../config/CommonProfile */ "./src/engine/config/CommonProfile.ts");
/* harmony import */ var _vector_Vector2__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../vector/Vector2 */ "./src/engine/common/geometry/vector/Vector2.ts");



class D2CircleTransitions {
  /**
   * 非共线三点计算圆参数
   */
  static calculateCircleProfileByByThreePoint(startPoint, endPoint, thirdPoint) {
    const { x: x1, y: y1 } = startPoint;
    const { x: x2, y: y2 } = endPoint;
    const { x: x3, y: y3 } = thirdPoint;
    const G = (x2 - x1) * (y3 - y1) - (x3 - x1) * (y2 - y1);
    if (G === 0) {
      throw new Error("three points are collinear, and it is impossible to determine a unique circle.");
    }
    const d = 2 * G;
    const centerX = ((x1 * x1 + y1 * y1) * (y2 - y3) + (x2 * x2 + y2 * y2) * (y3 - y1) + (x3 * x3 + y3 * y3) * (y1 - y2)) / d;
    const centerY = ((x1 * x1 + y1 * y1) * (x3 - x2) + (x2 * x2 + y2 * y2) * (x1 - x3) + (x3 * x3 + y3 * y3) * (x2 - x1)) / d;
    const radius = Math.sqrt((centerX - x1) * (centerX - x1) + (centerY - y1) * (centerY - y1));
    const sweep = G > 0 ? _config_CommonProfile__WEBPACK_IMPORTED_MODULE_0__.ESweep.CW : _config_CommonProfile__WEBPACK_IMPORTED_MODULE_0__.ESweep.CCW;
    return {
      centerPoint: new _vector_Vector2__WEBPACK_IMPORTED_MODULE_1__.Vector2(centerX, centerY),
      radius,
      sweep
    };
  }
}


/***/ }),

/***/ "./src/engine/common/geometry/shapes/D2CrossRelationShips.ts":
/*!*******************************************************************!*\
  !*** ./src/engine/common/geometry/shapes/D2CrossRelationShips.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2CrossRelationShips: () => (/* binding */ D2CrossRelationShips)
/* harmony export */ });
/* harmony import */ var _config_CommonProfile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../config/CommonProfile */ "./src/engine/config/CommonProfile.ts");
/* harmony import */ var _vector_Vector2__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../vector/Vector2 */ "./src/engine/common/geometry/vector/Vector2.ts");



class D2CrossRelationShips {
  /**
   * 点与直线的重叠关系
   */
  static pointAndLine(point, startPoint, endPoint, strokeWidth) {
    const startPoint2Point = point.sub(startPoint);
    const endPoint2Point = point.sub(endPoint);
    const lineDirect = endPoint.sub(startPoint);
    const cl = new _vector_Vector2__WEBPACK_IMPORTED_MODULE_1__.Vector2(
      (startPoint2Point.x * lineDirect.x + startPoint2Point.y * lineDirect.y) * lineDirect.x / (lineDirect.x * lineDirect.x + lineDirect.y * lineDirect.y),
      (startPoint2Point.x * lineDirect.x + startPoint2Point.y * lineDirect.y) * lineDirect.y / (lineDirect.x * lineDirect.x + lineDirect.y * lineDirect.y)
    );
    const norLineDirect = lineDirect.normalize();
    const halfWidthDirect = new _vector_Vector2__WEBPACK_IMPORTED_MODULE_1__.Vector2(-norLineDirect.y, norLineDirect.x).scale(strokeWidth / 2, strokeWidth / 2);
    const lineCorner = halfWidthDirect.add(lineDirect);
    const lineCornerLengthSqu = lineCorner.x * lineCorner.x + lineCorner.y * lineCorner.y;
    const startPoint2PointLengthSqu = startPoint2Point.x * startPoint2Point.x + startPoint2Point.y * startPoint2Point.y;
    const endPoint2PointLengthSqu = endPoint2Point.x * endPoint2Point.x + endPoint2Point.y * endPoint2Point.y;
    if (startPoint2Point.sub(cl).length <= strokeWidth / 2 && startPoint2PointLengthSqu <= lineCornerLengthSqu && endPoint2PointLengthSqu <= lineCornerLengthSqu) {
      return true;
    }
    const r = strokeWidth / 2;
    if (startPoint2PointLengthSqu <= r * r) {
      return true;
    }
    if (endPoint2PointLengthSqu <= r * r) {
      return true;
    }
    return false;
  }
  /**
   * 点与圆的重叠关系
   */
  static pointAndCirlce(point, radius, circleCenter, strokeWidth, isFill) {
    const circleDirLine = point.sub(circleCenter);
    const isOuter = circleDirLine.length > radius + strokeWidth / 2;
    const isInner = circleDirLine.length < radius - strokeWidth / 2;
    if (isOuter) {
      return false;
    } else if (isInner) {
      if (!isFill) {
        return false;
      }
      return true;
    }
    return true;
  }
  /**
   * 点与圆弧的重叠关系
   */
  static pointAndArc(point, sAngle, eAngle, sweep, radius, circleCenter, strokeWidth, isFill) {
    const R = radius + strokeWidth / 2;
    const r = radius - strokeWidth / 2;
    let sng = sAngle % (Math.PI * 2);
    let eng = eAngle % (Math.PI * 2);
    let sng1 = sweep === _config_CommonProfile__WEBPACK_IMPORTED_MODULE_0__.ESweep.CCW ? sng : eng;
    let eng1 = sweep === _config_CommonProfile__WEBPACK_IMPORTED_MODULE_0__.ESweep.CCW ? eng : sng;
    const startAngle = sng1;
    const endAngle = eng1;
    const sweepAngle = eng1 > sng1 ? eng1 - sng1 : eng1 - sng1 + Math.PI;
    const circleDirLine = point.sub(circleCenter);
    const norCircleDirLine = circleDirLine.normalize();
    const d = circleDirLine.length;
    if (d > R) {
      return false;
    }
    const circleStartLine = new _vector_Vector2__WEBPACK_IMPORTED_MODULE_1__.Vector2(radius * Math.cos(startAngle), radius * Math.sin(startAngle));
    const circleEndLine = new _vector_Vector2__WEBPACK_IMPORTED_MODULE_1__.Vector2(radius * Math.cos(endAngle), radius * Math.sin(endAngle));
    const norCircleStartLine = circleStartLine.normalize();
    const norCircleEndLine = circleEndLine.normalize();
    const startLine = circleCenter.add(circleStartLine);
    const endLine = circleCenter.add(circleEndLine);
    const d1 = point.sub(startLine).length;
    const d2 = point.sub(endLine).length;
    const SA = norCircleStartLine.x * norCircleDirLine.y - norCircleStartLine.y * norCircleDirLine.x;
    const EA = norCircleEndLine.x * norCircleDirLine.y - norCircleEndLine.y * norCircleDirLine.x;
    if (sweepAngle < Math.PI && SA > 0 && EA < 0 || sweepAngle >= Math.PI && (SA > 0 || EA < 0)) {
      if (d < r) {
        if (isFill) {
          return true;
        }
        return false;
      }
      return true;
    } else if (d1 < strokeWidth / 2 && SA <= 0) {
      if (isFill) {
        return false;
      }
      if (d < r) {
        return false;
      }
      return true;
    } else if (d2 < strokeWidth / 2 && EA >= 0) {
      if (isFill) {
        return false;
      }
      if (d < r) {
        return false;
      }
      return true;
    }
    return false;
  }
}


/***/ }),

/***/ "./src/engine/common/geometry/shapes/D2LineTransitions.ts":
/*!****************************************************************!*\
  !*** ./src/engine/common/geometry/shapes/D2LineTransitions.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2LineTransitions: () => (/* binding */ D2LineTransitions)
/* harmony export */ });
/* harmony import */ var _vector_Vector2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../vector/Vector2 */ "./src/engine/common/geometry/vector/Vector2.ts");


class D2LineTransitions {
  /**
   * 计算向量的垂线向量(单位化)
   */
  static calculatePerpendicular(vector2) {
    const v1 = new _vector_Vector2__WEBPACK_IMPORTED_MODULE_0__.Vector2(-vector2.y, vector2.x);
    const v2 = new _vector_Vector2__WEBPACK_IMPORTED_MODULE_0__.Vector2(vector2.y, -vector2.x);
    const length = Math.sqrt(vector2.x * vector2.x + vector2.y * vector2.y);
    return {
      v1: new _vector_Vector2__WEBPACK_IMPORTED_MODULE_0__.Vector2(v1.x / length, v1.y / length),
      v2: new _vector_Vector2__WEBPACK_IMPORTED_MODULE_0__.Vector2(v2.x / length, v2.y / length)
    };
  }
}


/***/ }),

/***/ "./src/engine/common/geometry/vector/Vector.ts":
/*!*****************************************************!*\
  !*** ./src/engine/common/geometry/vector/Vector.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Vector: () => (/* binding */ Vector)
/* harmony export */ });

class Vector {
  static hypot(deltaX, deltaY) {
    let xs = Math.abs(deltaX);
    let ys = Math.abs(deltaY);
    if (ys > xs) {
      const swap = ys;
      ys = xs;
      xs = swap;
    }
    if (xs === 0) {
      return ys;
    }
    const t = ys / xs;
    return xs * Math.sqrt(1 + t * t);
  }
  static distance(x1, y1, x2, y2) {
    return this.hypot(x2 - x1, y2 - y1);
  }
}


/***/ }),

/***/ "./src/engine/common/geometry/vector/Vector2.ts":
/*!******************************************************!*\
  !*** ./src/engine/common/geometry/vector/Vector2.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Vector2: () => (/* binding */ Vector2)
/* harmony export */ });
/* harmony import */ var _bbox_BBox2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../bbox/BBox2 */ "./src/engine/common/geometry/bbox/BBox2.ts");
/* harmony import */ var _math_Decimals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../math/Decimals */ "./src/engine/common/math/Decimals.ts");
/* harmony import */ var _math_Doublekit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../math/Doublekit */ "./src/engine/common/math/Doublekit.ts");
/* harmony import */ var _Vector__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Vector */ "./src/engine/common/geometry/vector/Vector.ts");

var __pow = Math.pow;




const VEN$VECTOR2_ORIGIN_DATA = [0, 0];
const _Vector2 = class extends _Vector__WEBPACK_IMPORTED_MODULE_3__.Vector {
  constructor(x = VEN$VECTOR2_ORIGIN_DATA[0], y = VEN$VECTOR2_ORIGIN_DATA[1]) {
    super();
    this._x = x;
    this._y = y;
  }
  static calculateAngleByTwoVector2(v1, v2) {
    const dotProduct = v1.x * v2.x + v1.y * v2.y;
    const magnitudeA = Math.sqrt(__pow(v1.x, 2) + __pow(v1.y, 2));
    const magnitudeB = Math.sqrt(__pow(v2.x, 2) + __pow(v2.y, 2));
    const cosTheta = dotProduct / (magnitudeA * magnitudeB);
    const angleRadians = Math.acos(cosTheta);
    return angleRadians;
  }
  /**
   * 计算某个初始弧度在经过特定矩阵变换后的弧度
   */
  static caculateAngle(radian, matrix4) {
    const cos = Math.cos(radian);
    const sin = Math.sin(radian);
    const x = cos * matrix4.data[0] + sin * matrix4.data[4];
    const y = cos * matrix4.data[1] + sin * matrix4.data[5];
    const vector2 = new _Vector2(x, y).normalize();
    return Math.atan2(vector2.x, vector2.y);
  }
  /**
   * 计算某个弧度的单位向量
   */
  static getInitVector2ByRadian(radian) {
    return new _Vector2(Math.cos(radian), Math.sin(radian));
  }
  get x() {
    return this._x;
  }
  set x(value) {
    this._x = value;
  }
  get y() {
    return this._y;
  }
  set y(value) {
    this._y = value;
  }
  /**
   * 向量长度
   */
  get length() {
    return Math.hypot(this.x, this.y);
  }
  /**
   * 向量弧度方向
   */
  get dir() {
    return Math.atan2(this.y, this.x);
  }
  /**
   * 向量角度方向
   */
  get dirDeg() {
    return Math.atan2(this.y, this.x) * (180 / Math.PI);
  }
  /**
   * 向量副本
   */
  copy() {
    return new _Vector2(this.x, this.y);
  }
  /**
   * 向量与向量相加
   */
  add(vector2) {
    return new _Vector2(this.x + vector2.x, this.y + vector2.y);
  }
  /**
   * 向量与标量相加
   */
  addScalar(x, y) {
    return new _Vector2(this.x + x, this.y + y);
  }
  /**
   * 向量与向量相减
   */
  sub(vector2) {
    return new _Vector2(this.x - vector2.x, this.y - vector2.y);
  }
  /**
   * 向量与标量相减
   */
  subScalar(x, y) {
    return new _Vector2(this.x - x, this.y - y);
  }
  /**
   * 向量缩放
   */
  scale(x = 0, y = 0) {
    return new _Vector2(this.x * x, this.y * y);
  }
  /**
   * 向量与标量的乘积
   */
  mul(x = 0, y = 0) {
    return this.scale(x, y);
  }
  /**
   * 向量与向量叉乘
   */
  cross(vector2) {
    return this.x * vector2.y - vector2.x * this.y;
  }
  /**
   * 向量与向量点乘
   */
  dot(vector2) {
    return this.x * vector2.x + this.y * vector2.y;
  }
  /**
   * 向量 sin 值
   */
  getSin() {
    return this.y / this.length;
  }
  /**
   * 向量 cos 值
   */
  getCos() {
    return this.x / this.length;
  }
  /**
   * 该向量的终点的 bbox2
   */
  getEndDotBbbox2() {
    return new _bbox_BBox2__WEBPACK_IMPORTED_MODULE_0__.BBox2(this.x, this.x, this.y, this.y);
  }
  /**
   * 设当前向量为 B, 输入向量 A, 计算 AB 向量的弧度
   */
  angleVector2(vector2) {
    return Math.atan2(this.y - vector2.y, this.x - vector2.x);
  }
  /**
   * 计算当前点与输入点 P(vector2) 的距离
   * 		向量与向量 vector2 的距离
   */
  distance(vector2) {
    const deltaX = vector2.x - this._x;
    const deltaY = vector2.y - this._y;
    return _Vector__WEBPACK_IMPORTED_MODULE_3__.Vector.hypot(deltaX, deltaY);
  }
  /**
   * 向量旋转 - 绕起点旋转 radian(弧度) 后的结果向量
   * 		将向量 v0(x0, y0) 旋转 θ 角度后
   * 			x = x0 * cos(θ) - y0 * sin(θ)
   * 			y = x0 * sin(θ) + x0 * cos(θ)
   */
  rotate(radian) {
    const c = Math.cos(radian);
    const s = Math.sin(radian);
    const [x, y] = [this.x, this.y];
    return new _Vector2(x * c + y * -s, x * s + y * c);
  }
  /**
   * 向量旋转 - 绕向量外定点旋转 radian(弧度) 后的结果向量
   */
  rotateSurround(center2, radian) {
    const cos = Math.cos(radian);
    const sin = Math.sin(radian);
    const dx = this.x - center2.x;
    const dy = this.y - center2.y;
    return new _Vector2(dx * cos + dy * -sin, dx * sin + dy * cos);
  }
  /**
   * 向量关于 origin2 坐标点的中心对称向量
   */
  mirrorSurround(origin2 = _Vector2.ORIGIN) {
    return new _Vector2(2 * origin2.x, 2 * origin2.y - this.y);
  }
  /**
   * 向量关于 origin2 坐标点的 x 坐标值的 X 轴镜像
   */
  mirrorSurroundX(origin2 = _Vector2.ORIGIN) {
    return new _Vector2(this.x, 2 * origin2.y - this.y);
  }
  /**
   * 向量关于 origin2 坐标点的 y 坐标值的 Y 轴镜像
   */
  mirrorSurroundY(origin2 = _Vector2.ORIGIN) {
    return new _Vector2(2 * origin2.x - this.x, this.y);
  }
  /**
   * 应用 matrix3
   */
  multiplyMatrix3(matrix3) {
    const x = this.x * matrix3.data[0] + this.y * matrix3.data[3] + matrix3.data[6];
    const y = this.x * matrix3.data[1] + this.y * matrix3.data[4] + matrix3.data[7];
    return new _Vector2(x, y);
  }
  /**
   * 应用 matrix4
   */
  multiplyMatrix4(matrix4) {
    const x = this.x * matrix4.data[0] + this.y * matrix4.data[4] + matrix4.data[12];
    const y = this.x * matrix4.data[1] + this.y * matrix4.data[5] + matrix4.data[13];
    return new _Vector2(x, y);
  }
  toString() {
    return `Vector2 (${this.x}, ${this.y})`;
  }
  toJSON() {
    return {
      x: this._x,
      y: this._y
    };
  }
  /**
   * 向量的单位向量
   */
  normalize() {
    if (this.x === 0 && this.y === 0) {
      return new _Vector2(0, 0);
    }
    const sx = this.x / this.length;
    const sy = this.y / this.length;
    return new _Vector2(sx, sy);
  }
  /**
   * 判断当前向量与输入向量是否相等
   */
  equalsWithVector2(vector2, place = 0) {
    if (vector2 instanceof _Vector2) {
      return _math_Decimals__WEBPACK_IMPORTED_MODULE_1__.Decimals.equalsFloat(vector2.x, this.x, place) && _math_Decimals__WEBPACK_IMPORTED_MODULE_1__.Decimals.equalsFloat(vector2.y, this.y, place);
    }
    return false;
  }
  /**
   * 判断当前坐标点与输入坐标点是否相等
   */
  equalsWithPoint(p) {
    return _math_Doublekit__WEBPACK_IMPORTED_MODULE_2__.DoubleKit.eq(this.x, p.x) && _math_Doublekit__WEBPACK_IMPORTED_MODULE_2__.DoubleKit.eq(this.y, p.y);
  }
  /**
   * 将向量坐标转换成数组
   */
  toArray() {
    return [this.x, this.y];
  }
};
let Vector2 = _Vector2;
Vector2.ORIGIN = new _Vector2();
Vector2.X_INIT_UNIT_VERCTOR2 = new _Vector2(1, 0);
Vector2.Y_INIT_UNIT_VERCTOR2 = new _Vector2(0, 1);


/***/ }),

/***/ "./src/engine/common/geometry/vector/Vector3.ts":
/*!******************************************************!*\
  !*** ./src/engine/common/geometry/vector/Vector3.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Vector3: () => (/* binding */ Vector3)
/* harmony export */ });
/* harmony import */ var _Vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Vector */ "./src/engine/common/geometry/vector/Vector.ts");


const VEN$VECTOR3_ORIGIN_DATA = [0, 0, 0];
const _Vector3 = class extends _Vector__WEBPACK_IMPORTED_MODULE_0__.Vector {
  constructor(x = VEN$VECTOR3_ORIGIN_DATA[0], y = VEN$VECTOR3_ORIGIN_DATA[1], z = VEN$VECTOR3_ORIGIN_DATA[2]) {
    super();
    this._x = x;
    this._y = y;
    this._z = z;
  }
  get x() {
    return this._x;
  }
  set x(value) {
    this._x = value;
  }
  get y() {
    return this._y;
  }
  set y(value) {
    this._y = value;
  }
  get z() {
    return this._z;
  }
  set z(value) {
    this._z = value;
  }
  /**
   * 向量长度
   */
  get length() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
  }
  /**
   * 向量副本
   */
  copy() {
    return new _Vector3(this.x, this.y, this.z);
  }
  /**
   * 向量与向量相加
   */
  add(vector3) {
    return new _Vector3(this.x + vector3.x, this.y + vector3.y, this.z + vector3.z);
  }
  /**
   * 向量与标量相加
   */
  addScalar(x, y, z) {
    return new _Vector3(this.x + x, this.y + y, this.z + z);
  }
  /**
   * 向量与向量相减
   */
  sub(vector3) {
    return new _Vector3(this.x - vector3.x, this.y - vector3.y, this.z - vector3.z);
  }
  /**
   * 向量与标量相减
   */
  subScalar(x, y, z) {
    return new _Vector3(this.x - x, this.y - y, this.z - z);
  }
  /**
   * 向量缩放
   */
  scale(x = 0, y = 0, z = 0) {
    return new _Vector3(this.x * x, this.y * y, this.z * z);
  }
  /**
   * 向量与标量的乘积
   */
  mul(x = 0, y = 0, z = 0) {
    return this.scale(x, y, z);
  }
  /**
   * 向量与向量叉乘
   */
  cross(vector3) {
    const x = this.y * vector3.z - this.z * vector3.y;
    const y = this.z * vector3.x - this.x * vector3.z;
    const z = this.x * vector3.y - this.y * vector3.x;
    return new _Vector3(x, y, z);
  }
  /**
   * 向量与向量点乘
   */
  dot(vector3) {
    return this.x * vector3.x + this.y * vector3.y + this.z * vector3.z;
  }
  /**
   * 应用 matrix4
   */
  multiplyMatrix4(matrix4) {
    const x = this.x * matrix4.data[0] + this.y * matrix4.data[4] + this.z * matrix4.data[8] + matrix4.data[12];
    const y = this.x * matrix4.data[1] + this.y * matrix4.data[5] + this.z * matrix4.data[9] + matrix4.data[13];
    const z = this.x * matrix4.data[2] + this.y * matrix4.data[6] + this.z * matrix4.data[10] + matrix4.data[14];
    const w = this.x * matrix4.data[3] + this.y * matrix4.data[7] + this.z * matrix4.data[11] + matrix4.data[15];
    return new _Vector3(x / w, y / w, z / w);
  }
  toString() {
    return `Vector3 (${this.x}, ${this.y}, ${this.z})`;
  }
  toJSON() {
    return {
      x: this._x,
      y: this._y,
      z: this._z
    };
  }
  /**
   * 向量的单位向量
   */
  normalize() {
    if (this.x === 0 && this.y === 0 && this.z === 0) {
      return new _Vector3(0, 0, 0);
    }
    const sx = this.x / this.length;
    const sy = this.y / this.length;
    const sz = this.z / this.length;
    return new _Vector3(sx, sy, sz);
  }
  /**
   * 将向量坐标转换成数组
   */
  toArray() {
    return [this.x, this.y, this.z];
  }
};
let Vector3 = _Vector3;
Vector3.ORIGIN = new _Vector3();
Vector3.X_INIT_UNIT_VERCTOR2 = new _Vector3(1, 0, 0);
Vector3.Y_INIT_UNIT_VERCTOR2 = new _Vector3(0, 1, 0);
Vector3.Z_INIT_UNIT_VERCTOR2 = new _Vector3(0, 0, 1);


/***/ }),

/***/ "./src/engine/common/math/Angles.ts":
/*!******************************************!*\
  !*** ./src/engine/common/math/Angles.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Angles: () => (/* binding */ Angles)
/* harmony export */ });

class Angles {
  static radianToDegree(radian) {
    return radian * 180 / Math.PI;
  }
  static degreeToRadian(degree) {
    return degree / 180 * Math.PI;
  }
}
Angles.PI_2 = Math.PI / 2;
Angles.PI_4 = Math.PI / 4;


/***/ }),

/***/ "./src/engine/common/math/Calculation.ts":
/*!***********************************************!*\
  !*** ./src/engine/common/math/Calculation.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   mm2px: () => (/* binding */ mm2px),
/* harmony export */   px2mm: () => (/* binding */ px2mm),
/* harmony export */   toFixed: () => (/* binding */ toFixed)
/* harmony export */ });

function toFixed(number, digit = 2, fixedDecimal = true) {
  if (typeof number !== "number") {
    number = +number;
  }
  if (isNaN(number)) {
    throw new Error("nedd number or <number>string");
  }
  digit = digit | 0;
  if (digit <= 0 || !number && !fixedDecimal) {
    return String(Math.round(number));
  }
  const p = [1, 10, 100, 1e3, 1e4][digit] || Math.pow(10, digit) || 10;
  if (fixedDecimal) {
    const sign = number < 0 ? "-" : "";
    number = number < 0 ? -number : number;
    number = Math.round(number * p) + "";
    while (number.length <= digit) {
      number = "0" + number;
    }
    number = number.slice(0, -digit) + "." + number.slice(-digit);
    return sign + number;
  }
  return String(Math.round(number * p + 1e-10) / p);
}
function px2mm(pxValue, DPI) {
  if (typeof pxValue === "undefined" || isNaN(pxValue)) {
    return 0;
  }
  return pxValue * 25.4 / DPI;
}
function mm2px(mmValue, DPI) {
  if (typeof mmValue === "undefined" || isNaN(mmValue)) {
    return 0;
  }
  return mmValue * DPI / 25.4;
}


/***/ }),

/***/ "./src/engine/common/math/Decimals.ts":
/*!********************************************!*\
  !*** ./src/engine/common/math/Decimals.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Decimals: () => (/* binding */ Decimals)
/* harmony export */ });
/* harmony import */ var _Calculation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Calculation */ "./src/engine/common/math/Calculation.ts");


class Decimals {
  static equalsFloat(num1, num2, places = 0) {
    const delta = Math.abs(num1 - num2);
    if (places > 5 && delta > 1e-5) {
      return false;
    }
    if (isNaN(places) && delta > 1e-8) {
      return false;
    }
    if (delta < 1e-13) {
      return true;
    }
    let min = Math.min(Decimals.getDecimalPlaces(num1), Decimals.getDecimalPlaces(num2));
    if (min < 10) {
      min = 10;
    }
    if (!isNaN(places)) {
      min = Math.min(min, places);
    }
    return (0,_Calculation__WEBPACK_IMPORTED_MODULE_0__.toFixed)(num1, min) === (0,_Calculation__WEBPACK_IMPORTED_MODULE_0__.toFixed)(num2, min);
  }
  static getDecimalPlaces(num) {
    let di = 0;
    let dl = 0;
    if (num > 0) {
      di = num - Math.floor(num);
    } else {
      di = num - Math.ceil(num);
    }
    dl = String(di).length;
    if (dl > 2) {
      return dl - 2;
    }
    return 0;
  }
}


/***/ }),

/***/ "./src/engine/common/math/Doublekit.ts":
/*!*********************************************!*\
  !*** ./src/engine/common/math/Doublekit.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DoubleKit: () => (/* binding */ DoubleKit)
/* harmony export */ });

class DoubleKit {
  static regular(dis = 0) {
    return Math.round(dis * this.precision) / this.precision;
  }
  static eq(a, b) {
    return Math.abs(a - b) <= this.eps;
  }
  static neq(a, b) {
    return Math.abs(a - b) > this.eps;
  }
  static less(a, b) {
    return a - b < -this.eps;
  }
  static lesseq(a, b) {
    return a - b < this.eps;
  }
  static greater(a, b) {
    return a - b > this.eps;
  }
  static greatereq(a, b) {
    return a - b > -this.eps;
  }
  static sqrt(dis) {
    if (Math.abs(dis) <= 1e-10) {
      return 0;
    }
    return Math.sqrt(dis);
  }
  static sortAsc(a, b) {
    return a - b;
  }
  static sortDesc(a, b) {
    return b - a;
  }
}
DoubleKit.eps = 1e-8;
DoubleKit.precision = 1e8;


/***/ }),

/***/ "./src/engine/common/math/Number.ts":
/*!******************************************!*\
  !*** ./src/engine/common/math/Number.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   sgn: () => (/* binding */ sgn)
/* harmony export */ });

function sgn(x) {
  if (x < 0) {
    return -1;
  }
  if (x > 0) {
    return 1;
  }
  return 0;
}


/***/ }),

/***/ "./src/engine/common/math/RobustCalc.ts":
/*!**********************************************!*\
  !*** ./src/engine/common/math/RobustCalc.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   robustProduct: () => (/* binding */ robustProduct),
/* harmony export */   robustScale: () => (/* binding */ robustScale),
/* harmony export */   robustSum: () => (/* binding */ robustSum),
/* harmony export */   scalarScalar: () => (/* binding */ scalarScalar)
/* harmony export */ });
/* harmony import */ var _Twos__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Twos */ "./src/engine/common/math/Twos.ts");


function scalarScalar(a, b) {
  let x = a + b;
  let bv = x - a;
  let av = x - bv;
  let br = b - bv;
  let ar = a - av;
  let y = ar + br;
  if (y) {
    return [y, x];
  }
  return [x];
}
function robustSum(e, f) {
  let ne = e.length | 0;
  let nf = f.length | 0;
  if (ne === 1 && nf === 1) {
    return scalarScalar(e[0], f[0]);
  }
  let n = ne + nf;
  let g = new Array(n);
  let count = 0;
  let eptr = 0;
  let fptr = 0;
  let ei = e[eptr];
  let ea = Math.abs(ei);
  let fi = f[fptr];
  let fa = Math.abs(fi);
  let a = void 0;
  let b = void 0;
  if (ea < fa) {
    b = ei;
    eptr += 1;
    if (eptr < ne) {
      ei = e[eptr];
      ea = Math.abs(ei);
    }
  } else {
    b = fi;
    fptr += 1;
    if (fptr < nf) {
      fi = f[fptr];
      fa = Math.abs(fi);
    }
  }
  if (eptr < ne && ea < fa || fptr >= nf) {
    a = ei;
    eptr += 1;
    if (eptr < ne) {
      ei = e[eptr];
      ea = Math.abs(ei);
    }
  } else {
    a = fi;
    fptr += 1;
    if (fptr < nf) {
      fi = f[fptr];
      fa = Math.abs(fi);
    }
  }
  let x = a + b;
  let bv = x - a;
  let y = b - bv;
  let q0 = y;
  let q1 = x;
  let _x = void 0;
  let _bv = void 0;
  let _av = void 0;
  let _br = void 0;
  let _ar = void 0;
  while (eptr < ne && fptr < nf) {
    if (ea < fa) {
      a = ei;
      eptr += 1;
      if (eptr < ne) {
        ei = e[eptr];
        ea = Math.abs(ei);
      }
    } else {
      a = fi;
      fptr += 1;
      if (fptr < nf) {
        fi = f[fptr];
        fa = Math.abs(fi);
      }
    }
    b = q0;
    x = a + b;
    bv = x - a;
    y = b - bv;
    if (y) {
      g[count++] = y;
    }
    _x = q1 + x;
    _bv = _x - q1;
    _av = _x - _bv;
    _br = x - _bv;
    _ar = q1 - _av;
    q0 = _ar + _br;
    q1 = _x;
  }
  while (eptr < ne) {
    a = ei;
    b = q0;
    x = a + b;
    bv = x - a;
    y = b - bv;
    if (y) {
      g[count++] = y;
    }
    _x = q1 + x;
    _bv = _x - q1;
    _av = _x - _bv;
    _br = x - _bv;
    _ar = q1 - _av;
    q0 = _ar + _br;
    q1 = _x;
    eptr += 1;
    if (eptr < ne) {
      ei = e[eptr];
    }
  }
  while (fptr < nf) {
    a = fi;
    b = q0;
    x = a + b;
    bv = x - a;
    y = b - bv;
    if (y) {
      g[count++] = y;
    }
    _x = q1 + x;
    _bv = _x - q1;
    _av = _x - _bv;
    _br = x - _bv;
    _ar = q1 - _av;
    q0 = _ar + _br;
    q1 = _x;
    fptr += 1;
    if (fptr < nf) {
      fi = f[fptr];
    }
  }
  if (q0) {
    g[count++] = q0;
  }
  if (q1) {
    g[count++] = q1;
  }
  if (!count) {
    g[count++] = 0;
  }
  g.length = count;
  return g;
}
function robustProduct(a, b) {
  if (a.length === 1) {
    return robustScale(b, a[0]);
  }
  if (b.length === 1) {
    return robustScale(a, b[0]);
  }
  if (a.length === 0 || b.length === 0) {
    return [0];
  }
  let r = [0];
  if (a.length < b.length) {
    for (let i = 0; i < a.length; ++i) {
      r = robustSum(r, robustScale(b, a[i]));
    }
  } else {
    for (let i = 0; i < b.length; ++i) {
      r = robustSum(r, robustScale(a, b[i]));
    }
  }
  return r;
}
function robustScale(e, scale) {
  let n = e.length;
  if (n === 1) {
    let ts = (0,_Twos__WEBPACK_IMPORTED_MODULE_0__.twoProduct)(e[0], scale);
    if (ts[0]) {
      return ts;
    }
    return [ts[1]];
  }
  let g = new Array(2 * n);
  let q = [0.1, 0.1];
  let t = [0.1, 0.1];
  let count = 0;
  (0,_Twos__WEBPACK_IMPORTED_MODULE_0__.twoProduct)(e[0], scale, q);
  if (q[0]) {
    g[count++] = q[0];
  }
  for (let i = 1; i < n; ++i) {
    (0,_Twos__WEBPACK_IMPORTED_MODULE_0__.twoProduct)(e[i], scale, t);
    (0,_Twos__WEBPACK_IMPORTED_MODULE_0__.twoSum)(q[1], t[0], q);
    if (q[0]) {
      g[count++] = q[0];
    }
    let a = t[1];
    let b = q[1];
    let x = a + b;
    let bv = x - a;
    let y = b - bv;
    q[1] = x;
    if (y) {
      g[count++] = y;
    }
  }
  if (q[1]) {
    g[count++] = q[1];
  }
  if (count === 0) {
    g[count++] = 0;
  }
  g.length = count;
  return g;
}


/***/ }),

/***/ "./src/engine/common/math/Twos.ts":
/*!****************************************!*\
  !*** ./src/engine/common/math/Twos.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   twoProduct: () => (/* binding */ twoProduct),
/* harmony export */   twoSum: () => (/* binding */ twoSum)
/* harmony export */ });

const SPLITTER = +(Math.pow(2, 27) + 1);
function twoProduct(a, b, result = null) {
  let x = a * b;
  let c = SPLITTER * a;
  let abig = c - a;
  let ahi = c - abig;
  let alo = a - ahi;
  let d = SPLITTER * b;
  let bbig = d - b;
  let bhi = d - bbig;
  let blo = b - bhi;
  let err1 = x - ahi * bhi;
  let err2 = err1 - alo * bhi;
  let err3 = err2 - ahi * blo;
  let y = alo * blo - err3;
  if (result) {
    result[0] = y;
    result[1] = x;
    return result;
  }
  return [y, x];
}
function twoSum(a, b, result = null) {
  let x = a + b;
  let bv = x - a;
  let av = x - bv;
  let br = b - bv;
  let ar = a - av;
  if (result) {
    result[0] = ar + br;
    result[1] = x;
    return result;
  }
  return [ar + br, x];
}


/***/ }),

/***/ "./src/engine/common/modules/d2Canvas2Svg/Canvas.ts":
/*!**********************************************************!*\
  !*** ./src/engine/common/modules/d2Canvas2Svg/Canvas.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Canvas: () => (/* binding */ Canvas)
/* harmony export */ });
/* harmony import */ var _Config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Config */ "./src/engine/common/modules/d2Canvas2Svg/Config.ts");

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};

class Canvas {
  constructor(optional) {
    this._fillTextStr = "";
    this._profile = {
      xPos: 0,
      yPos: 0,
      zPos: 0
    };
    this._canvasBaseFontSize = 100;
    this._canvasElement = document.createElement("canvas");
    this._ctx = this._canvasElement.getContext("2d", { willReadFrequently: true });
    this.updateCanvasRect(this._canvasBaseFontSize * 4, this._canvasBaseFontSize * 4);
    this._text2RectMap = /* @__PURE__ */ new Map();
    this._optional = __spreadValues(__spreadValues({}, (0,_Config__WEBPACK_IMPORTED_MODULE_0__.createDefaultOptional)()), optional || {});
  }
  get ctx() {
    return this._ctx;
  }
  get width() {
    return this._width;
  }
  set width(value) {
    this._width = value;
  }
  get height() {
    return this._height;
  }
  set height(value) {
    this._height = value;
  }
  get canvasBaseFontSize() {
    return this._canvasBaseFontSize;
  }
  setContextProfile(optional) {
    this._ctx.font = [
      optional.fontStyle || this._optional.fontFamily,
      optional.fontVariant || this._optional.fontVariant,
      optional.fontWeight || this._optional.fontWeight,
      this._canvasBaseFontSize + "px",
      optional.fontFamily
    ].join(" ");
    this._ctx.textAlign = "start";
    this._ctx.textBaseline = "alphabetic";
    this._ctx.direction = "ltr";
  }
  updateCanvasRect(canvasWidth, canvasHeight) {
    this.width = canvasWidth;
    this.height = canvasHeight;
    this._canvasElement.width = canvasWidth;
    this._canvasElement.height = canvasHeight;
  }
  getText2RectMap(text) {
    return this._text2RectMap.get(text) || {
      fontCanvasRenderAreaRaitoW: 0.5,
      fontCanvasRenderAreaRaitoH: 1
    };
  }
  clearCanvas() {
    this.ctx.clearRect(0, 0, this.width, this.height);
    this.ctx.fillStyle = "#000000";
    this.ctx.fillRect(0, 0, this.width, this.height);
    this.ctx.fillStyle = "#ffffff";
    this._text2RectMap.clear();
  }
  renderTextContent(rawString, renderLineHeight) {
    const allTextsOfLine = rawString.split("\n");
    const allTextSize = allTextsOfLine.length;
    const lineHeight = renderLineHeight;
    const startOffsetX = this._canvasBaseFontSize;
    const startOffsetY = this._canvasBaseFontSize * 2;
    let maxXCutWidth = 0;
    for (let i = 0; i < allTextSize; ++i) {
      const txt = allTextsOfLine[i];
      this._profile.xPos = 0;
      this._profile.yPos = i * lineHeight;
      this._profile.zPos = this._canvasBaseFontSize;
      this._fillTextStr = "";
      for (let j = 0; j < txt.length; ++j) {
        this._fillTextStr += txt[j];
      }
      this.fillTextContentByBuffer(startOffsetX, startOffsetY);
      const width = Math.round(this._profile.xPos + 2 * startOffsetX) | 0;
      if (maxXCutWidth < width) {
        maxXCutWidth = width;
      }
    }
    const xCut = maxXCutWidth;
    const yCut = startOffsetY + lineHeight * allTextSize;
    return {
      xCut,
      yCut
    };
  }
  fillTextContentByBuffer(startOffsetX, startOffsetY) {
    if (this._fillTextStr !== "") {
      this._ctx.fillText(this._fillTextStr, startOffsetX + this._profile.xPos, startOffsetY + this._profile.yPos);
      const metrics = this._ctx.measureText(this._fillTextStr);
      const fontCanvasRenderAreaRaitoW = metrics.width / this._fillTextStr.length / this._canvasBaseFontSize;
      const fontCanvasRenderAreaRaitoH = (metrics.fontBoundingBoxAscent + metrics.fontBoundingBoxDescent) / this._canvasBaseFontSize;
      this._text2RectMap.set(this._fillTextStr, {
        fontCanvasRenderAreaRaitoW,
        fontCanvasRenderAreaRaitoH
      });
      const delta = metrics.width;
      this._profile.xPos += delta;
    }
  }
}


/***/ }),

/***/ "./src/engine/common/modules/d2Canvas2Svg/Config.ts":
/*!**********************************************************!*\
  !*** ./src/engine/common/modules/d2Canvas2Svg/Config.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ORIENTATION: () => (/* binding */ ORIENTATION),
/* harmony export */   createDefaultOptional: () => (/* binding */ createDefaultOptional)
/* harmony export */ });
/* harmony import */ var _config_CommonProfile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../config/CommonProfile */ "./src/engine/config/CommonProfile.ts");
/* harmony import */ var _config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../config/PrimitiveProfile */ "./src/engine/config/PrimitiveProfile.ts");



const ORIENTATION = _config_CommonProfile__WEBPACK_IMPORTED_MODULE_0__.ESweep.CW;
function createDefaultOptional() {
  return {
    fontFamily: "normal",
    fontStyle: _config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_1__.ED2FontStyle.NORMAL,
    fontVariant: "normal",
    fontWeight: 100
  };
}


/***/ }),

/***/ "./src/engine/common/modules/d2Canvas2Svg/pixelFilter/PixelFilter.ts":
/*!***************************************************************************!*\
  !*** ./src/engine/common/modules/d2Canvas2Svg/pixelFilter/PixelFilter.ts ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EPixelFilterResult: () => (/* binding */ EPixelFilterResult),
/* harmony export */   PixelFilter: () => (/* binding */ PixelFilter)
/* harmony export */ });
/* harmony import */ var _config_CommonProfile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../config/CommonProfile */ "./src/engine/config/CommonProfile.ts");
/* harmony import */ var _Config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Config */ "./src/engine/common/modules/d2Canvas2Svg/Config.ts");
/* harmony import */ var _polygon_PolygonsCrappy__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../polygon/PolygonsCrappy */ "./src/engine/common/modules/d2Canvas2Svg/polygon/PolygonsCrappy.ts");
/* harmony import */ var _simplify_Simplifys__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../simplify/Simplifys */ "./src/engine/common/modules/d2Canvas2Svg/simplify/Simplifys.ts");
/* harmony import */ var _surfaceNets_surfaceNets__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../surfaceNets/surfaceNets */ "./src/engine/common/modules/d2Canvas2Svg/surfaceNets/surfaceNets.ts");
/* harmony import */ var _triangles_Cdt2ds__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../triangles/Cdt2ds */ "./src/engine/common/modules/d2Canvas2Svg/triangles/Cdt2ds.ts");







var EPixelFilterResult = /* @__PURE__ */ ((EPixelFilterResult2) => {
  EPixelFilterResult2["GRAHP"] = "GRAHP";
  EPixelFilterResult2["POLYGON"] = "POLYGON";
  EPixelFilterResult2["TRIANGLE"] = "TRIANGLE";
  return EPixelFilterResult2;
})(EPixelFilterResult || {});
class PixelFilter {
  constructor(type) {
    this._type = type;
  }
  process(pixels) {
    try {
      if (this._type === "TRIANGLE" /* TRIANGLE */) {
        return {
          triangles: this.covertPixel2Triangles(pixels, true)
        };
      }
      if (this._type === "POLYGON" /* POLYGON */) {
        return {
          polygons: this.covertPixel2Polygons(pixels, true)
        };
      }
      return {
        graphs: this.covertPixel2GraphLines(pixels, true)
      };
    } catch (e) {
      console.error(e);
    }
    return {
      triangles: null,
      polygons: null,
      graphs: null
    };
  }
  covertPixel2GraphLines(pixels, simplify) {
    const contour = { edges: null, positions: null };
    const surface = _surfaceNets_surfaceNets__WEBPACK_IMPORTED_MODULE_4__.SurfaceNets.process(pixels, 128);
    if (simplify) {
      const { edges: edges2, positions } = _simplify_Simplifys__WEBPACK_IMPORTED_MODULE_3__.Simplifys.proecss(surface.cells, surface.positions, 0.25);
      contour.edges = edges2;
      contour.positions = positions;
    } else {
      contour.edges = surface.cells;
      contour.positions = surface.positions;
    }
    const edges = contour.edges;
    return {
      edges,
      positions: contour.positions
    };
  }
  covertPixel2Polygons(pixels, simplify) {
    const contour = { edges: null, positions: null };
    const surface = _surfaceNets_surfaceNets__WEBPACK_IMPORTED_MODULE_4__.SurfaceNets.process(pixels, 128);
    if (simplify) {
      const { edges: edges2, positions: positions2 } = _simplify_Simplifys__WEBPACK_IMPORTED_MODULE_3__.Simplifys.proecss(surface.cells, surface.positions, 0.25);
      contour.edges = edges2;
      contour.positions = positions2;
    } else {
      contour.edges = surface.cells;
      contour.positions = surface.positions;
    }
    const positions = contour.positions;
    const edges = contour.edges;
    const flip = _config_CommonProfile__WEBPACK_IMPORTED_MODULE_0__.ESweep.CCW === _Config__WEBPACK_IMPORTED_MODULE_1__.ORIENTATION;
    let result = _polygon_PolygonsCrappy__WEBPACK_IMPORTED_MODULE_2__.PolygonsCrappy.proecss(edges, positions);
    let nresult = new Array(result.length);
    for (let i = 0; i < result.length; ++i) {
      let loops = result[i];
      let nloops = new Array(loops.length);
      for (let j = 0; j < loops.length; ++j) {
        let loop = loops[j];
        let nloop = new Array(loop.length);
        for (let k = 0; k < loop.length; ++k) {
          nloop[k] = positions[loop[k]].slice();
        }
        if (flip) {
          nloop.reverse();
        }
        nloops[j] = nloop;
      }
      nresult[i] = nloops;
    }
    return nresult;
  }
  covertPixel2Triangles(pixels, simplify) {
    const contour = { edges: null, positions: null };
    const surface = _surfaceNets_surfaceNets__WEBPACK_IMPORTED_MODULE_4__.SurfaceNets.process(pixels, 128);
    if (simplify) {
      const { edges: edges2, positions } = _simplify_Simplifys__WEBPACK_IMPORTED_MODULE_3__.Simplifys.proecss(surface.cells, surface.positions, 0.25);
      contour.edges = edges2;
      contour.positions = positions;
    } else {
      contour.edges = surface.cells;
      contour.positions = surface.positions;
    }
    const edges = contour.edges;
    return {
      cells: _triangles_Cdt2ds__WEBPACK_IMPORTED_MODULE_5__.Cdt2ds.process(contour.positions, edges, {
        delaunay: false,
        exterior: false,
        interior: true
      }),
      positions: contour.positions
    };
  }
}


/***/ }),

/***/ "./src/engine/common/modules/d2Canvas2Svg/polygon/CompareAngles.ts":
/*!*************************************************************************!*\
  !*** ./src/engine/common/modules/d2Canvas2Svg/polygon/CompareAngles.ts ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CompareAngles: () => (/* binding */ CompareAngles)
/* harmony export */ });
/* harmony import */ var _geometry_Orients__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../geometry/Orients */ "./src/engine/common/geometry/Orients.ts");
/* harmony import */ var _math_Number__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../math/Number */ "./src/engine/common/math/Number.ts");
/* harmony import */ var _math_RobustCalc__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../math/RobustCalc */ "./src/engine/common/math/RobustCalc.ts");
/* harmony import */ var _math_Twos__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../math/Twos */ "./src/engine/common/math/Twos.ts");





function testInterior(a, b, c) {
  const x0 = (0,_math_Twos__WEBPACK_IMPORTED_MODULE_3__.twoSum)(a[0], -b[0]);
  const y0 = (0,_math_Twos__WEBPACK_IMPORTED_MODULE_3__.twoSum)(a[1], -b[1]);
  const x1 = (0,_math_Twos__WEBPACK_IMPORTED_MODULE_3__.twoSum)(c[0], -b[0]);
  const y1 = (0,_math_Twos__WEBPACK_IMPORTED_MODULE_3__.twoSum)(c[1], -b[1]);
  const d = (0,_math_RobustCalc__WEBPACK_IMPORTED_MODULE_2__.robustSum)((0,_math_RobustCalc__WEBPACK_IMPORTED_MODULE_2__.robustProduct)(x0, x1), (0,_math_RobustCalc__WEBPACK_IMPORTED_MODULE_2__.robustProduct)(y0, y1));
  return d[d.length - 1] >= 0;
}
class CompareAngles {
  static compareProcess(a, b, c, d) {
    const bcd = (0,_geometry_Orients__WEBPACK_IMPORTED_MODULE_0__.orient)(b, c, d);
    if (bcd === 0) {
      let sabc = (0,_math_Number__WEBPACK_IMPORTED_MODULE_1__.sgn)((0,_geometry_Orients__WEBPACK_IMPORTED_MODULE_0__.orient)(a, b, c));
      let sabd = (0,_math_Number__WEBPACK_IMPORTED_MODULE_1__.sgn)((0,_geometry_Orients__WEBPACK_IMPORTED_MODULE_0__.orient)(a, b, d));
      if (sabc === sabd) {
        if (sabc === 0) {
          const ic = testInterior(a, b, c);
          const id = testInterior(a, b, d);
          if (ic === id) {
            return 0;
          } else if (ic) {
            return 1;
          } else {
            return -1;
          }
        }
        return 0;
      } else if (sabd === 0) {
        if (sabc > 0) {
          return -1;
        } else if (testInterior(a, b, d)) {
          return -1;
        } else {
          return 1;
        }
      } else if (sabc === 0) {
        if (sabd > 0) {
          return 1;
        } else if (testInterior(a, b, c)) {
          return 1;
        } else {
          return -1;
        }
      }
      return (0,_math_Number__WEBPACK_IMPORTED_MODULE_1__.sgn)(sabd - sabc);
    }
    const abc = (0,_geometry_Orients__WEBPACK_IMPORTED_MODULE_0__.orient)(a, b, c);
    if (abc > 0) {
      if (bcd > 0 && (0,_geometry_Orients__WEBPACK_IMPORTED_MODULE_0__.orient)(a, b, d) > 0) {
        return 1;
      }
      return -1;
    } else if (abc < 0) {
      if (bcd > 0 || (0,_geometry_Orients__WEBPACK_IMPORTED_MODULE_0__.orient)(a, b, d) > 0) {
        return 1;
      }
      return -1;
    } else {
      const abd = (0,_geometry_Orients__WEBPACK_IMPORTED_MODULE_0__.orient)(a, b, d);
      if (abd > 0) {
        return 1;
      } else {
        if (testInterior(a, b, c)) {
          return 1;
        } else {
          return -1;
        }
      }
    }
  }
}


/***/ }),

/***/ "./src/engine/common/modules/d2Canvas2Svg/polygon/PlanarDuals.ts":
/*!***********************************************************************!*\
  !*** ./src/engine/common/modules/d2Canvas2Svg/polygon/PlanarDuals.ts ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PlanarDuals: () => (/* binding */ PlanarDuals)
/* harmony export */ });
/* harmony import */ var _CompareAngles__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CompareAngles */ "./src/engine/common/modules/d2Canvas2Svg/polygon/CompareAngles.ts");


class PlanarDuals {
  static process(cells, positions) {
    const numVertices = positions.length | 0;
    const numEdges = cells.length;
    const adj = [new Array(numVertices), new Array(numVertices)];
    const cycles = [];
    const cut = (c, i) => {
      const a = adj[i][c[i]];
      a.splice(a.indexOf(c), 1);
    };
    const shouldGlue = (pcycle, ncycle) => {
      return ncycle[1] === ncycle[ncycle.length - 1];
    };
    const next = (a, b, noCut = false) => {
      let nextCell = [];
      let nextVertex;
      let nextDir = void 0;
      for (let i = 0; i < 2; ++i) {
        if (adj[i][b].length > 0) {
          nextCell = adj[i][b][0];
          nextDir = i;
          break;
        }
      }
      nextVertex = nextCell[nextDir ^ 1];
      for (let dir = 0; dir < 2; ++dir) {
        const nbhd = adj[dir][b];
        for (let k = 0; k < nbhd.length; ++k) {
          let e = nbhd[k];
          let p = e[dir ^ 1];
          let cmp = _CompareAngles__WEBPACK_IMPORTED_MODULE_0__.CompareAngles.compareProcess(positions[a], positions[b], positions[nextVertex], positions[p]);
          if (cmp > 0) {
            nextCell = e;
            nextVertex = p;
            nextDir = dir;
          }
        }
      }
      if (noCut) {
        return nextVertex;
      }
      if (nextCell) {
        cut(nextCell, nextDir);
      }
      return nextVertex;
    };
    const extractCycle = (v, dir) => {
      let e0 = adj[dir][v][0];
      let cycle = [v];
      cut(e0, dir);
      let u = e0[dir ^ 1];
      let d0 = dir;
      while (true) {
        while (u !== v) {
          cycle.push(u);
          u = next(cycle[cycle.length - 2], u, false);
        }
        if (adj[0][v].length + adj[1][v].length === 0) {
          break;
        }
        let a = cycle[cycle.length - 1];
        let b = v;
        let c = cycle[1];
        let d = next(a, b, true);
        if (_CompareAngles__WEBPACK_IMPORTED_MODULE_0__.CompareAngles.compareProcess(positions[a], positions[b], positions[c], positions[d]) < 0) {
          break;
        }
        cycle.push(v);
        u = next(a, b);
      }
      return cycle;
    };
    for (let i = 0; i < numVertices; ++i) {
      adj[0][i] = [];
      adj[1][i] = [];
    }
    for (let i = 0; i < numEdges; ++i) {
      const c = cells[i];
      adj[0][c[0]].push(c);
      adj[1][c[1]].push(c);
    }
    for (let i = 0; i < numVertices; ++i) {
      if (adj[0][i].length + adj[1][i].length === 0) {
        cycles.push([i]);
      }
    }
    for (let i = 0; i < numVertices; ++i) {
      for (let j = 0; j < 2; ++j) {
        let pcycle = [];
        while (adj[j][i].length > 0) {
          let ni = adj[0][i].length;
          let ncycle = extractCycle(i, j);
          if (shouldGlue(pcycle, ncycle)) {
            pcycle.push.apply(pcycle, ncycle);
          } else {
            if (pcycle.length > 0) {
              cycles.push(pcycle);
            }
            pcycle = ncycle;
          }
        }
        if (pcycle.length > 0) {
          cycles.push(pcycle);
        }
      }
    }
    return cycles;
  }
}


/***/ }),

/***/ "./src/engine/common/modules/d2Canvas2Svg/polygon/PolygonsCrappy.ts":
/*!**************************************************************************!*\
  !*** ./src/engine/common/modules/d2Canvas2Svg/polygon/PolygonsCrappy.ts ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PolygonsCrappy: () => (/* binding */ PolygonsCrappy)
/* harmony export */ });
/* harmony import */ var _math_RobustCalc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../math/RobustCalc */ "./src/engine/common/math/RobustCalc.ts");
/* harmony import */ var _math_Twos__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../math/Twos */ "./src/engine/common/math/Twos.ts");
/* harmony import */ var _utils_Uniq__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../utils/Uniq */ "./src/engine/common/utils/Uniq.ts");
/* harmony import */ var _PlanarDuals__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./PlanarDuals */ "./src/engine/common/modules/d2Canvas2Svg/polygon/PlanarDuals.ts");
/* harmony import */ var _PrePolygon__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./PrePolygon */ "./src/engine/common/modules/d2Canvas2Svg/polygon/PrePolygon.ts");
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Utils */ "./src/engine/common/modules/d2Canvas2Svg/polygon/Utils.ts");







class PolygonsCrappy {
  static proecss(edges, positions) {
    const result = (0,_Utils__WEBPACK_IMPORTED_MODULE_5__.trimLeaves)(edges, positions);
    edges = result[0];
    positions = result[1];
    const numVertices = positions.length;
    const numEdges = edges.length;
    const adj = (0,_Utils__WEBPACK_IMPORTED_MODULE_5__.edgeToAdjacency)(edges, positions.length);
    let faces = _PlanarDuals__WEBPACK_IMPORTED_MODULE_3__.PlanarDuals.process(edges, positions);
    for (let i = 0; i < numVertices; ++i) {
      if (adj[i].length % 2 === 1) {
        throw new Error("planar-graph-to-polyline: graph must be manifold");
      }
    }
    faces = faces.filter((c) => {
      let n = c.length;
      let area = [0];
      for (let j = 0; j < n; ++j) {
        let a = positions[c[j]];
        let b = positions[c[(j + 1) % n]];
        let t00 = (0,_math_Twos__WEBPACK_IMPORTED_MODULE_1__.twoProduct)(-a[0], a[1]);
        let t01 = (0,_math_Twos__WEBPACK_IMPORTED_MODULE_1__.twoProduct)(-a[0], b[1]);
        let t10 = (0,_math_Twos__WEBPACK_IMPORTED_MODULE_1__.twoProduct)(b[0], a[1]);
        let t11 = (0,_math_Twos__WEBPACK_IMPORTED_MODULE_1__.twoProduct)(b[0], b[1]);
        area = (0,_math_RobustCalc__WEBPACK_IMPORTED_MODULE_0__.robustSum)(area, (0,_math_RobustCalc__WEBPACK_IMPORTED_MODULE_0__.robustSum)((0,_math_RobustCalc__WEBPACK_IMPORTED_MODULE_0__.robustSum)(t00, t01), (0,_math_RobustCalc__WEBPACK_IMPORTED_MODULE_0__.robustSum)(t10, t11)));
      }
      return area[area.length - 1] > 0;
    });
    let numFaces = faces.length;
    let parent = new Array(numFaces);
    let containment = new Array(numFaces);
    const fadj = (0,_Utils__WEBPACK_IMPORTED_MODULE_5__.makeArrayOfArrays)(numFaces);
    const edgeAdjacency = {};
    const internalVertices = (0,_Utils__WEBPACK_IMPORTED_MODULE_5__.makeArray)(numVertices, false);
    const toVisit = [];
    const parity = (0,_Utils__WEBPACK_IMPORTED_MODULE_5__.makeArray)(numFaces, -1);
    const results = [];
    const sharedBoundary = (c) => {
      const n = c.length;
      for (let i = 0; i < n; ++i) {
        if (!internalVertices[c[i]]) {
          return false;
        }
      }
      return true;
    };
    LOOP1:
      for (let i = 0; i < numFaces; ++i) {
        parent[i] = i;
        let row = new Array(numFaces);
        let loopVertices = faces[i].map((v) => {
          return positions[v];
        });
        let pmc = _PrePolygon__WEBPACK_IMPORTED_MODULE_4__.PrePolygon.process([loopVertices]);
        let count = 0;
        LOOP2:
          for (let j = 0; j < numFaces; ++j) {
            row[j] = 0;
            if (i === j) {
              continue;
            }
            let c = faces[j];
            let n = c.length;
            LOOP3:
              for (let k = 0; k < n; ++k) {
                let d = pmc(positions[c[k]]);
                if (d !== 0) {
                  if (d < 0) {
                    row[j] = 1;
                    count += 1;
                  }
                  continue LOOP2;
                }
              }
            row[j] = 1;
            count += 1;
          }
        containment[i] = [count, i, row];
      }
    containment.sort((a, b) => {
      return b[0] - a[0];
    });
    for (let i = 0; i < numFaces; ++i) {
      let row = containment[i];
      let idx = row[1];
      let children = row[2];
      for (let j = 0; j < numFaces; ++j) {
        if (children[j]) {
          parent[j] = idx;
        }
      }
    }
    for (let i = 0; i < numFaces; ++i) {
      fadj[i].push(parent[i]);
      fadj[parent[i]].push(i);
    }
    for (let i = 0; i < numFaces; ++i) {
      let c = faces[i];
      let n = c.length;
      for (let j = 0; j < n; ++j) {
        let a = c[j];
        let b = c[(j + 1) % n];
        let key = Math.min(a, b) + ":" + Math.max(a, b);
        if (key in edgeAdjacency) {
          let neighbor = edgeAdjacency[key];
          fadj[neighbor].push(i);
          fadj[i].push(neighbor);
          internalVertices[a] = internalVertices[b] = true;
        } else {
          edgeAdjacency[key] = i;
        }
      }
    }
    for (let i = 0; i < numFaces; ++i) {
      if (parent[i] === i && !sharedBoundary(faces[i])) {
        toVisit.push(i);
        parity[i] = 0;
      } else {
        parity[i] = -1;
      }
    }
    while (toVisit.length > 0) {
      const top = toVisit.pop();
      const nbhd = fadj[top];
      (0,_utils_Uniq__WEBPACK_IMPORTED_MODULE_2__.unique)(nbhd, (a, b) => {
        return a - b;
      });
      let nnbhr = nbhd.length;
      let p = parity[top];
      let polyline = [];
      if (p === 0) {
        let c = faces[top];
        polyline = [c];
      }
      for (let i = 0; i < nnbhr; ++i) {
        let f = nbhd[i];
        if (parity[f] >= 0) {
          continue;
        }
        parity[f] = p ^ 1;
        toVisit.push(f);
        if (p === 0) {
          let c = faces[f];
          if (!sharedBoundary(c)) {
            c.reverse();
            polyline.push(c);
          }
        }
      }
      if (p === 0) {
        results.push(polyline);
      }
    }
    return results;
  }
}


/***/ }),

/***/ "./src/engine/common/modules/d2Canvas2Svg/polygon/PrePolygon.ts":
/*!**********************************************************************!*\
  !*** ./src/engine/common/modules/d2Canvas2Svg/polygon/PrePolygon.ts ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PrePolygon: () => (/* binding */ PrePolygon)
/* harmony export */ });
/* harmony import */ var _algorithm_slabDecomposition_SlabDecomposition__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../algorithm/slabDecomposition/SlabDecomposition */ "./src/engine/common/algorithm/slabDecomposition/SlabDecomposition.ts");
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Utils */ "./src/engine/common/modules/d2Canvas2Svg/polygon/Utils.ts");



class PrePolygon {
  static process(loops) {
    const numLoops = loops.length;
    const segments = [];
    const vsegments = [];
    for (let i = 0; i < numLoops; ++i) {
      let loop = loops[i];
      let numVertices = loop.length;
      for (let s = numVertices - 1, t = 0; t < numVertices; s = t++) {
        let a = loop[s];
        let b = loop[t];
        if (a[0] === b[0]) {
          vsegments.push([a, b]);
        } else {
          segments.push([a, b]);
        }
      }
    }
    if (segments.length === 0) {
      if (vsegments.length === 0) {
        return () => {
          return 1;
        };
      } else {
        return (p) => {
          const handler = (0,_Utils__WEBPACK_IMPORTED_MODULE_1__.buildVerticalIndex)(vsegments);
          if (handler(p[0], p[1])) {
            return 0;
          }
          return 1;
        };
      }
    }
    const slabs = (0,_algorithm_slabDecomposition_SlabDecomposition__WEBPACK_IMPORTED_MODULE_0__.createSlabDecomposition)(segments);
    const testSlab = (0,_Utils__WEBPACK_IMPORTED_MODULE_1__.buildSlabSearch)(slabs.slabs, slabs.coordinates);
    if (vsegments.length === 0) {
      return testSlab;
    } else {
      const handler = (0,_Utils__WEBPACK_IMPORTED_MODULE_1__.buildVerticalIndex)(vsegments);
      return function(p) {
        if (handler(p[0], p[1])) {
          return 0;
        }
        return testSlab(p);
      };
    }
  }
}


/***/ }),

/***/ "./src/engine/common/modules/d2Canvas2Svg/polygon/Utils.ts":
/*!*****************************************************************!*\
  !*** ./src/engine/common/modules/d2Canvas2Svg/polygon/Utils.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   buildSlabSearch: () => (/* binding */ buildSlabSearch),
/* harmony export */   buildVerticalIndex: () => (/* binding */ buildVerticalIndex),
/* harmony export */   edgeToAdjacency: () => (/* binding */ edgeToAdjacency),
/* harmony export */   makeArray: () => (/* binding */ makeArray),
/* harmony export */   makeArrayOfArrays: () => (/* binding */ makeArrayOfArrays),
/* harmony export */   trimLeaves: () => (/* binding */ trimLeaves)
/* harmony export */ });
/* harmony import */ var _algorithm_binarySearchBounds_binarySearchBounds__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../algorithm/binarySearchBounds/binarySearchBounds */ "./src/engine/common/algorithm/binarySearchBounds/binarySearchBounds.ts");
/* harmony import */ var _algorithm_intervalTree_intervalTree__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../algorithm/intervalTree/intervalTree */ "./src/engine/common/algorithm/intervalTree/intervalTree.ts");
/* harmony import */ var _geometry_Orients__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../geometry/Orients */ "./src/engine/common/geometry/Orients.ts");
/* harmony import */ var _utils_Uniq__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../utils/Uniq */ "./src/engine/common/utils/Uniq.ts");





function buildVerticalIndex(segments) {
  let table = {};
  for (let i = 0; i < segments.length; ++i) {
    let s = segments[i];
    let x = s[0][0];
    let y0 = s[0][1];
    let y1 = s[1][1];
    let p = [Math.min(y0, y1), Math.max(y0, y1)];
    if (x in table) {
      table[x].push(p);
    } else {
      table[x] = [p];
    }
  }
  let intervalTable = {};
  let keys = Object.keys(table);
  for (let i = 0; i < keys.length; ++i) {
    let segs = table[keys[i]];
    intervalTable[keys[i]] = (0,_algorithm_intervalTree_intervalTree__WEBPACK_IMPORTED_MODULE_1__.makeIntervalTree)(segs);
  }
  return (x, y) => {
    const tree = intervalTable[x];
    if (tree) {
      return !!tree.queryPoint(y, () => {
        return true;
      });
    }
    return false;
  };
}
function buildSlabSearch(slabs, coordinates) {
  return (p) => {
    let bucket = _algorithm_binarySearchBounds_binarySearchBounds__WEBPACK_IMPORTED_MODULE_0__.bounds.le(coordinates, p[0]);
    if (bucket < 0) {
      return 1;
    }
    let root = slabs[bucket];
    if (!root) {
      if (bucket > 0 && coordinates[bucket] === p[0]) {
        root = slabs[bucket - 1];
      } else {
        return 1;
      }
    }
    let lastOrientation = 1;
    while (root) {
      let s = root.key;
      let o = (0,_geometry_Orients__WEBPACK_IMPORTED_MODULE_2__.orient)(p, s[0], s[1]);
      if (s[0][0] < s[1][0]) {
        if (o < 0) {
          root = root.left;
        } else if (o > 0) {
          lastOrientation = -1;
          root = root.right;
        } else {
          return 0;
        }
      } else {
        if (o > 0) {
          root = root.left;
        } else if (o < 0) {
          lastOrientation = 1;
          root = root.right;
        } else {
          return 0;
        }
      }
    }
    return lastOrientation;
  };
}
function edgeToAdjacency(edges, numVertices) {
  const numEdges = edges.length;
  if (typeof numVertices !== "number") {
    numVertices = 0;
    for (let i = 0; i < numEdges; ++i) {
      numVertices = Math.max(numVertices, edges[i][0], edges[i][1]);
    }
    numVertices = (numVertices | 0) + 1;
  }
  numVertices = numVertices | 0;
  const adj = new Array(numVertices);
  for (let i = 0; i < numVertices; ++i) {
    adj[i] = [];
  }
  for (let i = 0; i < numEdges; ++i) {
    const e = edges[i];
    adj[e[0]].push(e[1]);
    adj[e[1]].push(e[0]);
  }
  for (let j = 0; j < numVertices; ++j) {
    (0,_utils_Uniq__WEBPACK_IMPORTED_MODULE_3__.unique)(adj[j], (a, b) => {
      return a - b;
    });
  }
  return adj;
}
function trimLeaves(edges, positions) {
  const adj = edgeToAdjacency(edges, positions.length);
  const live = new Array(positions.length);
  const nbhd = new Array(positions.length);
  const dead = [];
  for (let i = 0; i < positions.length; ++i) {
    const count = adj[i].length;
    nbhd[i] = count;
    live[i] = true;
    if (count <= 1) {
      dead.push(i);
    }
  }
  while (dead.length > 0) {
    const v = dead.pop();
    const n = adj[v];
    live[v] = false;
    for (let i = 0; i < n.length; ++i) {
      const u = n[i];
      if (--nbhd[u] === 0) {
        dead.push(u);
      }
    }
  }
  const newIndex = new Array(positions.length);
  const npositions = [];
  for (let i = 0; i < positions.length; ++i) {
    if (live[i]) {
      const v = npositions.length;
      newIndex[i] = v;
      npositions.push(positions[i]);
    } else {
      newIndex[i] = -1;
    }
  }
  const nedges = [];
  for (let i = 0; i < edges.length; ++i) {
    const e = edges[i];
    if (live[e[0]] && live[e[1]]) {
      nedges.push([newIndex[e[0]], newIndex[e[1]]]);
    }
  }
  return [nedges, npositions];
}
function makeArray(length, fill) {
  const result = new Array(length);
  for (let i = 0; i < length; ++i) {
    result[i] = fill;
  }
  return result;
}
function makeArrayOfArrays(length) {
  const result = new Array(length);
  for (let i = 0; i < length; ++i) {
    result[i] = [];
  }
  return result;
}


/***/ }),

/***/ "./src/engine/common/modules/d2Canvas2Svg/simplify/Simplifys.ts":
/*!**********************************************************************!*\
  !*** ./src/engine/common/modules/d2Canvas2Svg/simplify/Simplifys.ts ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Simplifys: () => (/* binding */ Simplifys)
/* harmony export */ });
/* harmony import */ var _geometry_Orients__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../geometry/Orients */ "./src/engine/common/geometry/Orients.ts");


function errorWeight(base, a, b) {
  const area = Math.abs((0,_geometry_Orients__WEBPACK_IMPORTED_MODULE_0__.orient)(base, a, b));
  const perim = Math.sqrt(Math.pow(a[0] - b[0], 2) + Math.pow(a[1] - b[1], 2));
  return area / perim;
}
function compareCells(a, b) {
  let n = a.length;
  let t = a.length - b.length;
  if (t) {
    return t;
  }
  switch (n) {
    case 0:
      return 0;
    case 1:
      return a[0] - b[0];
    case 2: {
      let d = a[0] + a[1] - b[0] - b[1];
      if (d) {
        return d;
      }
      return Math.min(a[0], a[1]) - Math.min(b[0], b[1]);
    }
    case 3: {
      let l1 = a[0] + a[1];
      let m1 = b[0] + b[1];
      let d = l1 + a[2] - (m1 + b[2]);
      if (d) {
        return d;
      }
      let l0 = Math.min(a[0], a[1]);
      let m0 = Math.min(b[0], b[1]);
      d = Math.min(l0, a[2]) - Math.min(m0, b[2]);
      if (d) {
        return d;
      }
      return Math.min(l0 + a[2], l1) - Math.min(m0 + b[2], m1);
    }
    default: {
      let as = a.slice(0);
      as.sort();
      let bs = b.slice(0);
      bs.sort();
      for (let i = 0; i < n; ++i) {
        t = as[i] - bs[i];
        if (t) {
          return t;
        }
      }
      return 0;
    }
  }
}
function normalize(cells, attr = void 0) {
  if (attr) {
    let len = cells.length;
    let zipped = new Array(len);
    for (let i = 0; i < len; ++i) {
      zipped[i] = [cells[i], attr[i]];
    }
    zipped.sort((a, b) => {
      return compareCells(a[0], b[0]);
    });
    for (let i = 0; i < len; ++i) {
      cells[i] = zipped[i][0];
      attr[i] = zipped[i][1];
    }
    return cells;
  }
  cells.sort(compareCells);
  return cells;
}
function unique(cells) {
  if (cells.length === 0) {
    return [];
  }
  let ptr = 1;
  let len = cells.length;
  for (let i = 1; i < len; ++i) {
    let a = cells[i];
    if (compareCells(a, cells[i - 1])) {
      if (i === ptr) {
        ptr++;
        continue;
      }
      cells[ptr++] = a;
    }
  }
  cells.length = ptr;
  return cells;
}
class Simplifys {
  static proecss(cells, positions, minArea) {
    let n = positions.length;
    let nc = cells.length;
    let inv = new Array(n);
    let outv = new Array(n);
    let weights = new Array(n);
    let dead = new Array(n);
    let heap = [];
    let index = new Array(n);
    let npositions = [];
    let ncells = [];
    let heapCount = heap.length;
    const computeWeight = (i) => {
      if (dead[i]) {
        return Infinity;
      }
      const s = inv[i];
      const t = outv[i];
      if (s < 0 || t < 0) {
        return Infinity;
      } else {
        return errorWeight(positions[i], positions[s], positions[t]);
      }
    };
    const heapSwap = (i, j) => {
      const a = heap[i];
      const b = heap[j];
      heap[i] = b;
      heap[j] = a;
      index[a] = j;
      index[b] = i;
    };
    const heapWeight = (i) => {
      return weights[heap[i]];
    };
    const heapParent = (i) => {
      if (i & 1) {
        return i - 1 >> 1;
      }
      return (i >> 1) - 1;
    };
    const heapDown = (i) => {
      let w = heapWeight(i);
      while (true) {
        let tw = w;
        let left = 2 * i + 1;
        let right = 2 * (i + 1);
        let next = i;
        if (left < heapCount) {
          let lw = heapWeight(left);
          if (lw < tw) {
            next = left;
            tw = lw;
          }
        }
        if (right < heapCount) {
          let rw = heapWeight(right);
          if (rw < tw) {
            next = right;
          }
        }
        if (next === i) {
          return i;
        }
        heapSwap(i, next);
        i = next;
      }
    };
    const heapUp = (i) => {
      let w = heapWeight(i);
      while (i > 0) {
        let parent = heapParent(i);
        if (parent >= 0) {
          let pw = heapWeight(parent);
          if (w < pw) {
            heapSwap(i, parent);
            i = parent;
            continue;
          }
        }
        return i;
      }
    };
    const heapPop = () => {
      if (heapCount > 0) {
        let head = heap[0];
        heapSwap(0, heapCount - 1);
        heapCount -= 1;
        heapDown(0);
        return head;
      }
      return -1;
    };
    const heapUpdate = (i, w) => {
      let a = heap[i];
      if (weights[a] === w) {
        return i;
      }
      weights[a] = -Infinity;
      heapUp(i);
      heapPop();
      weights[a] = w;
      heapCount += 1;
      return heapUp(heapCount - 1);
    };
    const kill = (i) => {
      if (dead[i]) {
        return;
      }
      dead[i] = true;
      const s = inv[i];
      const t = outv[i];
      if (inv[t] >= 0) {
        inv[t] = s;
      }
      if (outv[s] >= 0) {
        outv[s] = t;
      }
      if (index[s] >= 0) {
        heapUpdate(index[s], computeWeight(s));
      }
      if (index[t] >= 0) {
        heapUpdate(index[t], computeWeight(t));
      }
    };
    const tortoiseHare = (seq, start) => {
      if (seq[start] < 0) {
        return start;
      }
      let t = start;
      let h = start;
      do {
        let nh = seq[h];
        if (!dead[h] || nh < 0 || nh === h) {
          break;
        }
        h = nh;
        nh = seq[h];
        if (!dead[h] || nh < 0 || nh === h) {
          break;
        }
        h = nh;
        t = seq[t];
      } while (t !== h);
      for (let v = start; v !== h; v = seq[v]) {
        seq[v] = h;
      }
      return h;
    };
    for (let i = 0; i < n; ++i) {
      inv[i] = outv[i] = -1;
      weights[i] = Infinity;
      dead[i] = false;
    }
    for (let i = 0; i < nc; ++i) {
      const c = cells[i];
      if (c.length !== 2) {
        throw new Error("input must be a graph.");
      }
      const s = c[1];
      const t = c[0];
      if (outv[t] !== -1) {
        outv[t] = -2;
      } else {
        outv[t] = s;
      }
      if (inv[s] !== -1) {
        inv[s] = -2;
      } else {
        inv[s] = t;
      }
    }
    for (let i = 0; i < n; ++i) {
      let w = weights[i] = computeWeight(i);
      if (w < Infinity) {
        index[i] = heap.length;
        heap.push(i);
      } else {
        index[i] = -1;
      }
    }
    heapCount = heap.length;
    for (let i = heapCount >> 1; i >= 0; --i) {
      heapDown(i);
    }
    while (true) {
      let hmin = heapPop();
      if (hmin < 0 || weights[hmin] > minArea) {
        break;
      }
      kill(hmin);
    }
    for (let i = 0; i < n; ++i) {
      if (!dead[i]) {
        index[i] = npositions.length;
        npositions.push(positions[i].slice());
      }
    }
    cells.forEach((c) => {
      let tin = tortoiseHare(inv, c[0]);
      let tout = tortoiseHare(outv, c[1]);
      if (tin >= 0 && tout >= 0 && tin !== tout) {
        let cin = index[tin];
        let cout = index[tout];
        if (cin !== cout) {
          ncells.push([cin, cout]);
        }
      }
    });
    unique(normalize(ncells));
    return {
      positions: npositions,
      edges: ncells
    };
  }
}


/***/ }),

/***/ "./src/engine/common/modules/d2Canvas2Svg/surfaceNets/Builders.ts":
/*!************************************************************************!*\
  !*** ./src/engine/common/modules/d2Canvas2Svg/surfaceNets/Builders.ts ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   buildSurfaceNets: () => (/* binding */ buildSurfaceNets)
/* harmony export */ });
/* harmony import */ var _Mallocs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Mallocs */ "./src/engine/common/modules/d2Canvas2Svg/surfaceNets/Mallocs.ts");


function buildSurfaceNets(order, dtype) {
  const handleParam = {
    order,
    scalarArguments: 3,
    phase: function(p, a, b, c) {
      return +(p > c) | 0;
    },
    vertex: function(d0, d1, v0, v1, v2, v3, p0, p1, p2, p3, a, b, c) {
      const m = (p0 << 0) + (p1 << 1) + (p2 << 2) + (p3 << 3) | 0;
      if (m === 0 || m === 15) {
        return;
      }
      const yFlip = -1;
      switch (m) {
        case 0:
          a.push([d0 - 0.5, (d1 - 0.5) * yFlip]);
          break;
        case 1:
          a.push([d0 - 0.25 - 0.25 * (v1 + v0 - 2 * c) / (v0 - v1), (d1 - 0.25 - 0.25 * (v2 + v0 - 2 * c) / (v0 - v2)) * yFlip]);
          break;
        case 2:
          a.push([d0 - 0.75 - 0.25 * (-v1 - v0 + 2 * c) / (v1 - v0), (d1 - 0.25 - 0.25 * (v3 + v1 - 2 * c) / (v1 - v3)) * yFlip]);
          break;
        case 3:
          a.push([d0 - 0.5, (d1 - 0.5 - 0.5 * (v2 + v0 + v3 + v1 - 4 * c) / (v0 - v2 + v1 - v3)) * yFlip]);
          break;
        case 4:
          a.push([d0 - 0.25 - 0.25 * (v3 + v2 - 2 * c) / (v2 - v3), (d1 - 0.75 - 0.25 * (-v2 - v0 + 2 * c) / (v2 - v0)) * yFlip]);
          break;
        case 5:
          a.push([d0 - 0.5 - 0.5 * (v1 + v0 + v3 + v2 - 4 * c) / (v0 - v1 + v2 - v3), (d1 - 0.5) * yFlip]);
          break;
        case 6:
          a.push([
            d0 - 0.5 - 0.25 * (-v1 - v0 + v3 + v2) / (v1 - v0 + v2 - v3),
            (d1 - 0.5 - 0.25 * (-v2 - v0 + v3 + v1) / (v2 - v0 + v1 - v3)) * yFlip
          ]);
          break;
        case 7:
          a.push([d0 - 0.75 - 0.25 * (v3 + v2 - 2 * c) / (v2 - v3), (d1 - 0.75 - 0.25 * (v3 + v1 - 2 * c) / (v1 - v3)) * yFlip]);
          break;
        case 8:
          a.push([d0 - 0.75 - 0.25 * (-v3 - v2 + 2 * c) / (v3 - v2), (d1 - 0.75 - 0.25 * (-v3 - v1 + 2 * c) / (v3 - v1)) * yFlip]);
          break;
        case 9:
          a.push([
            d0 - 0.5 - 0.25 * (v1 + v0 + -v3 - v2) / (v0 - v1 + v3 - v2),
            (d1 - 0.5 - 0.25 * (v2 + v0 + -v3 - v1) / (v0 - v2 + v3 - v1)) * yFlip
          ]);
          break;
        case 10:
          a.push([d0 - 0.5 - 0.5 * (-v1 - v0 + -v3 - v2 + 4 * c) / (v1 - v0 + v3 - v2), (d1 - 0.5) * yFlip]);
          break;
        case 11:
          a.push([d0 - 0.25 - 0.25 * (-v3 - v2 + 2 * c) / (v3 - v2), (d1 - 0.75 - 0.25 * (v2 + v0 - 2 * c) / (v0 - v2)) * yFlip]);
          break;
        case 12:
          a.push([d0 - 0.5, (d1 - 0.5 - 0.5 * (-v2 - v0 + -v3 - v1 + 4 * c) / (v2 - v0 + v3 - v1)) * yFlip]);
          break;
        case 13:
          a.push([d0 - 0.75 - 0.25 * (v1 + v0 - 2 * c) / (v0 - v1), (d1 - 0.25 - 0.25 * (-v3 - v1 + 2 * c) / (v3 - v1)) * yFlip]);
          break;
        case 14:
          a.push([d0 - 0.25 - 0.25 * (-v1 - v0 + 2 * c) / (v1 - v0), (d1 - 0.25 - 0.25 * (-v2 - v0 + 2 * c) / (v2 - v0)) * yFlip]);
          break;
        case 15:
          a.push([d0 - 0.5, (d1 - 0.5) * yFlip]);
          break;
      }
    },
    cell: function(v0, v1, c0, c1, p0, p1, a, b, c) {
      if (p0) {
        b.push([v0, v1]);
      } else {
        b.push([v1, v0]);
      }
    }
  };
  const fill = function(a0, verts, cells, level) {
    let s0 = a0.shape[0] | 0;
    let s1 = a0.shape[1] | 0;
    let d0 = a0.data;
    let o0 = a0.offset | 0;
    let t0_0 = a0.stride[0] | 0;
    let t0_1 = a0.stride[1] | 0;
    let p0 = o0;
    let c0_0;
    let d0_1 = -t0_0 | 0;
    let c0_1 = 0;
    let d0_2 = -t0_1 | 0;
    let c0_2 = 0;
    let d0_3 = -t0_0 - t0_1 | 0;
    let c0_3 = 0;
    let u0_0 = t0_0 | 0;
    let u0_1 = t0_1 - t0_0 * s0 | 0;
    let i0 = 0;
    let i1 = 0;
    let N = 0;
    let Q = 2 * s0 | 0;
    let P = (0,_Mallocs__WEBPACK_IMPORTED_MODULE_0__.mallocUint32)(Q);
    let V = (0,_Mallocs__WEBPACK_IMPORTED_MODULE_0__.mallocUint32)(Q);
    let X = 0;
    let b0 = 0;
    let e1 = -1 | 0;
    let y1 = -1 | 0;
    let b1 = 0;
    let e2 = -s0 | 0;
    let y2 = s0 | 0;
    let b2 = 0;
    let e3 = -s0 - 1 | 0;
    let y3 = s0 - 1 | 0;
    let b3 = 0;
    let v0 = 0;
    let T = 0;
    for (i0 = 0; i0 < s0; ++i0) {
      P[X++] = handleParam.phase(d0[p0], verts, cells, level);
      p0 += u0_0;
    }
    p0 += u0_1;
    if (s1 > 0) {
      i1 = 1;
      P[X++] = handleParam.phase(d0[p0], verts, cells, level);
      p0 += u0_0;
      if (s0 > 0) {
        i0 = 1;
        c0_0 = d0[p0];
        b0 = P[X] = handleParam.phase(c0_0, verts, cells, level);
        b1 = P[X + e1];
        b2 = P[X + e2];
        b3 = P[X + e3];
        if (b0 !== b1 || b0 !== b2 || b0 !== b3) {
          c0_1 = d0[p0 + d0_1];
          c0_2 = d0[p0 + d0_2];
          c0_3 = d0[p0 + d0_3];
          handleParam.vertex(i0, i1, c0_0, c0_1, c0_2, c0_3, b0, b1, b2, b3, verts, cells, level);
          v0 = V[X] = N++;
        }
        X += 1;
        p0 += u0_0;
        for (i0 = 2; i0 < s0; ++i0) {
          c0_0 = d0[p0];
          b0 = P[X] = handleParam.phase(c0_0, verts, cells, level);
          b1 = P[X + e1];
          b2 = P[X + e2];
          b3 = P[X + e3];
          if (b0 !== b1 || b0 !== b2 || b0 !== b3) {
            c0_1 = d0[p0 + d0_1];
            c0_2 = d0[p0 + d0_2];
            c0_3 = d0[p0 + d0_3];
            handleParam.vertex(i0, i1, c0_0, c0_1, c0_2, c0_3, b0, b1, b2, b3, verts, cells, level);
            v0 = V[X] = N++;
            if (b3 !== b1) {
              handleParam.cell(V[X + e1], v0, c0_3, c0_1, b3, b1, verts, cells, level);
            }
          }
          X += 1;
          p0 += u0_0;
        }
      }
      p0 += u0_1;
      X = 0;
      T = e1;
      e1 = y1;
      y1 = T;
      T = e2;
      e2 = y2;
      y2 = T;
      T = e3;
      e3 = y3;
      y3 = T;
      for (i1 = 2; i1 < s1; ++i1) {
        P[X++] = handleParam.phase(d0[p0], verts, cells, level);
        p0 += u0_0;
        if (s0 > 0) {
          i0 = 1;
          c0_0 = d0[p0];
          b0 = P[X] = handleParam.phase(c0_0, verts, cells, level);
          b1 = P[X + e1];
          b2 = P[X + e2];
          b3 = P[X + e3];
          if (b0 !== b1 || b0 !== b2 || b0 !== b3) {
            c0_1 = d0[p0 + d0_1];
            c0_2 = d0[p0 + d0_2];
            c0_3 = d0[p0 + d0_3];
            handleParam.vertex(i0, i1, c0_0, c0_1, c0_2, c0_3, b0, b1, b2, b3, verts, cells, level);
            v0 = V[X] = N++;
            if (b3 !== b2) {
              handleParam.cell(V[X + e2], v0, c0_2, c0_3, b2, b3, verts, cells, level);
            }
          }
          X += 1;
          p0 += u0_0;
          for (i0 = 2; i0 < s0; ++i0) {
            c0_0 = d0[p0];
            b0 = P[X] = handleParam.phase(c0_0, verts, cells, level);
            b1 = P[X + e1];
            b2 = P[X + e2];
            b3 = P[X + e3];
            if (b0 !== b1 || b0 !== b2 || b0 !== b3) {
              c0_1 = d0[p0 + d0_1];
              c0_2 = d0[p0 + d0_2];
              c0_3 = d0[p0 + d0_3];
              handleParam.vertex(i0, i1, c0_0, c0_1, c0_2, c0_3, b0, b1, b2, b3, verts, cells, level);
              v0 = V[X] = N++;
              if (b3 !== b2) {
                handleParam.cell(V[X + e2], v0, c0_2, c0_3, b2, b3, verts, cells, level);
              }
              if (b3 !== b1) {
                handleParam.cell(V[X + e1], v0, c0_3, c0_1, b3, b1, verts, cells, level);
              }
            }
            X += 1;
            p0 += u0_0;
          }
        }
        if (i1 & 1) {
          X = 0;
        }
        T = e1;
        e1 = y1;
        y1 = T;
        T = e2;
        e2 = y2;
        y2 = T;
        T = e3;
        e3 = y3;
        y3 = T;
        p0 += u0_1;
      }
    }
    (0,_Mallocs__WEBPACK_IMPORTED_MODULE_0__.freeUint32)(V);
    (0,_Mallocs__WEBPACK_IMPORTED_MODULE_0__.freeUint32)(P);
  };
  return function(pixels, level) {
    const verts = [];
    const cells = [];
    fill(pixels, verts, cells, level);
    return {
      positions: verts,
      cells
    };
  };
}


/***/ }),

/***/ "./src/engine/common/modules/d2Canvas2Svg/surfaceNets/Mallocs.ts":
/*!***********************************************************************!*\
  !*** ./src/engine/common/modules/d2Canvas2Svg/surfaceNets/Mallocs.ts ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   bitsNextPow2: () => (/* binding */ bitsNextPow2),
/* harmony export */   freeUint32: () => (/* binding */ freeUint32),
/* harmony export */   mallocArrayBuffer: () => (/* binding */ mallocArrayBuffer),
/* harmony export */   mallocUint32: () => (/* binding */ mallocUint32)
/* harmony export */ });

function bitsNextPow2(v) {
  let _v = v;
  _v += +(_v === 0);
  _v -= 1;
  _v |= _v >>> 1;
  _v |= _v >>> 2;
  _v |= _v >>> 4;
  _v |= _v >>> 8;
  _v |= _v >>> 16;
  return _v + 1;
}
function mallocArrayBuffer(n) {
  const sn = bitsNextPow2(n);
  return new ArrayBuffer(sn);
}
function mallocUint32(n) {
  return new Uint32Array(mallocArrayBuffer(4 * n), 0, n);
}
function freeUint32(array) {
}


/***/ }),

/***/ "./src/engine/common/modules/d2Canvas2Svg/surfaceNets/surfaceNets.ts":
/*!***************************************************************************!*\
  !*** ./src/engine/common/modules/d2Canvas2Svg/surfaceNets/surfaceNets.ts ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SurfaceNets: () => (/* binding */ SurfaceNets)
/* harmony export */ });
/* harmony import */ var _Builders__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Builders */ "./src/engine/common/modules/d2Canvas2Svg/surfaceNets/Builders.ts");


const _SurfaceNets = class {
  static process(pixels, level) {
    const typesig = pixels.order.join() + "-" + pixels.dtype;
    let proc = _SurfaceNets.CACHE[typesig];
    level = +level || 0;
    if (!proc) {
      proc = _SurfaceNets.CACHE[typesig] = (0,_Builders__WEBPACK_IMPORTED_MODULE_0__.buildSurfaceNets)(pixels.order, pixels.dtype);
    }
    return proc(pixels, level);
  }
};
let SurfaceNets = _SurfaceNets;
SurfaceNets.CACHE = {};


/***/ }),

/***/ "./src/engine/common/modules/d2Canvas2Svg/triangles/Cdt2ds.ts":
/*!********************************************************************!*\
  !*** ./src/engine/common/modules/d2Canvas2Svg/triangles/Cdt2ds.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Cdt2ds: () => (/* binding */ Cdt2ds)
/* harmony export */ });
/* harmony import */ var _FaceIndex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./FaceIndex */ "./src/engine/common/modules/d2Canvas2Svg/triangles/FaceIndex.ts");
/* harmony import */ var _algorithm_triangulation_Triangulation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../algorithm/triangulation/Triangulation */ "./src/engine/common/algorithm/triangulation/Triangulation.ts");
/* harmony import */ var _Delaunays__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Delaunays */ "./src/engine/common/modules/d2Canvas2Svg/triangles/Delaunays.ts");
/* harmony import */ var _MonotoneTriangulates__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./MonotoneTriangulates */ "./src/engine/common/modules/d2Canvas2Svg/triangles/MonotoneTriangulates.ts");

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};




class Cdt2ds {
  static process(points, edges, options = {}) {
    const defaultOptions = {
      delaunay: true,
      interior: true,
      exterior: true,
      infinity: false
    };
    const optional = __spreadValues(__spreadValues({}, defaultOptions), options);
    if (!optional.interior && !optional.exterior || points.length === 0) {
      return [];
    }
    const cells = (0,_MonotoneTriangulates__WEBPACK_IMPORTED_MODULE_3__.monotoneTriangulates)(points, edges);
    if (optional.delaunay || optional.interior !== optional.exterior || optional.infinity) {
      let triangulation = (0,_algorithm_triangulation_Triangulation__WEBPACK_IMPORTED_MODULE_1__.createTriangulation)(
        points.length,
        edges.map((e) => {
          return [Math.min(e[0], e[1]), Math.max(e[0], e[1])];
        }).sort((a, b) => {
          return a[0] - b[0] || a[1] - b[1];
        })
      );
      for (let i = 0; i < cells.length; ++i) {
        let f = cells[i];
        triangulation.addTriangle(f[0], f[1], f[2]);
      }
      if (optional.delaunay) {
        (0,_Delaunays__WEBPACK_IMPORTED_MODULE_2__.delaunayRefines)(points, triangulation);
      }
      if (!optional.exterior) {
        return (0,_FaceIndex__WEBPACK_IMPORTED_MODULE_0__.classifyFaces)(triangulation, -1);
      } else if (!optional.interior) {
        return (0,_FaceIndex__WEBPACK_IMPORTED_MODULE_0__.classifyFaces)(triangulation, 1, optional.infinity);
      } else if (optional.infinity) {
        return (0,_FaceIndex__WEBPACK_IMPORTED_MODULE_0__.classifyFaces)(triangulation, 0, optional.infinity);
      } else {
        return triangulation.cells();
      }
    }
    return cells;
  }
}


/***/ }),

/***/ "./src/engine/common/modules/d2Canvas2Svg/triangles/Delaunays.ts":
/*!***********************************************************************!*\
  !*** ./src/engine/common/modules/d2Canvas2Svg/triangles/Delaunays.ts ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   delaunayRefines: () => (/* binding */ delaunayRefines)
/* harmony export */ });

function inCircle(a, b, c, p) {
  const [ax, ay] = a;
  const [bx, by] = b;
  const [cx, cy] = c;
  const [px, py] = p;
  const det = (ax - px) * ((by - py) * (cx * cx + cy * cy - (bx * bx + by * by)) - (cy - py) * (bx * bx + by * by - (ax * ax + ay * ay))) - (ay - py) * ((bx - px) * (cx * cx + cy * cy - (bx * bx + by * by)) - (cx - px) * (bx * bx + by * by - (ax * ax + ay * ay))) + (ax * ax + ay * ay - (px * px + py * py)) * ((bx - px) * (cy - py) - (cx - px) * (by - py));
  return det;
}
function testFlip(points, triangulation, stack, a, b, x) {
  let y = triangulation.opposite(a, b);
  if (y < 0) {
    return;
  }
  if (b < a) {
    let tmp = a;
    a = b;
    b = tmp;
    tmp = x;
    x = y;
    y = tmp;
  }
  if (triangulation.isConstraint(a, b)) {
    return;
  }
  if (inCircle(points[a], points[b], points[x], points[y]) < 0) {
    stack.push(a, b);
  }
}
function delaunayRefines(points, triangulation) {
  const stack = [];
  const numPoints = points.length;
  const stars = triangulation.stars;
  for (let a = 0; a < numPoints; ++a) {
    let star = stars[a];
    for (let j = 1; j < star.length; j += 2) {
      let b = star[j];
      if (b < a) {
        continue;
      }
      if (triangulation.isConstraint(a, b)) {
        continue;
      }
      let x = star[j - 1];
      let y = -1;
      for (let k = 1; k < star.length; k += 2) {
        if (star[k - 1] === b) {
          y = star[k];
          break;
        }
      }
      if (y < 0) {
        continue;
      }
      if (inCircle(points[a], points[b], points[x], points[y]) < 0) {
        stack.push(a, b);
      }
    }
  }
  while (stack.length > 0) {
    let b = stack.pop();
    let a = stack.pop();
    let x = -1;
    let y = -1;
    let star = stars[a];
    for (let i = 1; i < star.length; i += 2) {
      let s = star[i - 1];
      let t = star[i];
      if (s === b) {
        y = t;
      } else if (t === b) {
        x = s;
      }
    }
    if (x < 0 || y < 0) {
      continue;
    }
    if (inCircle(points[a], points[b], points[x], points[y]) >= 0) {
      continue;
    }
    triangulation.flip(a, b);
    testFlip(points, triangulation, stack, x, a, y);
    testFlip(points, triangulation, stack, a, y, x);
    testFlip(points, triangulation, stack, y, b, x);
    testFlip(points, triangulation, stack, b, x, y);
  }
}


/***/ }),

/***/ "./src/engine/common/modules/d2Canvas2Svg/triangles/FaceIndex.ts":
/*!***********************************************************************!*\
  !*** ./src/engine/common/modules/d2Canvas2Svg/triangles/FaceIndex.ts ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FaceIndex: () => (/* binding */ FaceIndex),
/* harmony export */   classifyFaces: () => (/* binding */ classifyFaces)
/* harmony export */ });
/* harmony import */ var _algorithm_binarySearchBounds_binarySearchBounds__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../algorithm/binarySearchBounds/binarySearchBounds */ "./src/engine/common/algorithm/binarySearchBounds/binarySearchBounds.ts");


function indexCells(triangulation, infinity) {
  let cells = triangulation.cells();
  let nc = cells.length;
  for (let i = 0; i < nc; ++i) {
    let c = cells[i];
    let x = c[0];
    let y = c[1];
    let z = c[2];
    if (y < z) {
      if (y < x) {
        c[0] = y;
        c[1] = z;
        c[2] = x;
      }
    } else if (z < x) {
      c[0] = z;
      c[1] = x;
      c[2] = y;
    }
  }
  cells.sort((a, b) => {
    return a[0] - b[0] || a[1] - b[1] || a[2] - b[2];
  });
  let flags = new Array(nc);
  for (let i = 0; i < flags.length; ++i) {
    flags[i] = 0;
  }
  let active = [];
  let next = [];
  let neighbor = new Array(3 * nc);
  let constraint = new Array(3 * nc);
  let boundary = [];
  if (infinity) {
    boundary = [];
  }
  const index = new FaceIndex(cells, neighbor, constraint, flags, active, next, boundary);
  for (let i = 0; i < nc; ++i) {
    let c = cells[i];
    for (let j = 0; j < 3; ++j) {
      let x = c[j];
      let y = c[(j + 1) % 3];
      let a = neighbor[3 * i + j] = index.locate(y, x, triangulation.opposite(y, x));
      let b = constraint[3 * i + j] = triangulation.isConstraint(x, y);
      if (a < 0) {
        if (b) {
          next.push(i);
        } else {
          active.push(i);
          flags[i] = 1;
        }
        if (infinity) {
          boundary.push([y, x, -1]);
        }
      }
    }
  }
  return index;
}
function filterCells(cells, flags, target) {
  let ptr = 0;
  for (let i = 0; i < cells.length; ++i) {
    if (flags[i] === target) {
      cells[ptr++] = cells[i];
    }
  }
  cells.length = ptr;
  return cells;
}
class FaceIndex {
  constructor(cells, neighbor, constraint, flags, active, next, boundary) {
    this._cells = cells;
    this._neighbor = neighbor;
    this._constraint = constraint;
    this._flags = flags;
    this._active = active;
    this._next = next;
    this._cells = cells;
    this._boundary = boundary;
    this._key = [0, 0, 0];
  }
  get cells() {
    return this._cells;
  }
  set cells(value) {
    this._cells = value;
  }
  get neighbor() {
    return this._neighbor;
  }
  set neighbor(value) {
    this._neighbor = value;
  }
  get constraint() {
    return this._constraint;
  }
  set constraint(value) {
    this._constraint = value;
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    this._flags = value;
  }
  get active() {
    return this._active;
  }
  set active(value) {
    this._active = value;
  }
  get next() {
    return this._next;
  }
  set next(value) {
    this._next = value;
  }
  get boundary() {
    return this._boundary;
  }
  set boundary(value) {
    this._boundary = value;
  }
  locate(a, b, c) {
    let x = a;
    let y = b;
    let z = c;
    if (b < c) {
      if (b < a) {
        x = b;
        y = c;
        z = a;
      }
    } else if (c < a) {
      x = c;
      y = a;
      z = b;
    }
    if (x < 0) {
      return -1;
    }
    this._key[0] = x;
    this._key[1] = y;
    this._key[2] = z;
    return _algorithm_binarySearchBounds_binarySearchBounds__WEBPACK_IMPORTED_MODULE_0__.bounds.eq(this.cells, this._key, (a2, b2) => {
      return a2[0] - b2[0] || a2[1] - b2[1] || a2[2] - b2[2];
    });
  }
}
function classifyFaces(triangulation, target, infinity = false) {
  const index = indexCells(triangulation, infinity);
  if (target === 0) {
    if (infinity) {
      return index.cells.concat(index.boundary);
    } else {
      return index.cells;
    }
  }
  let side = 1;
  let active = index.active;
  let next = index.next;
  let flags = index.flags;
  let cells = index.cells;
  let constraint = index.constraint;
  let neighbor = index.neighbor;
  while (active.length > 0 || next.length > 0) {
    while (active.length > 0) {
      let t = active.pop();
      if (flags[t] === -side) {
        continue;
      }
      flags[t] = side;
      let c = cells[t];
      for (let j = 0; j < 3; ++j) {
        let f = neighbor[3 * t + j];
        if (f >= 0 && flags[f] === 0) {
          if (constraint[3 * t + j]) {
            next.push(f);
          } else {
            active.push(f);
            flags[f] = side;
          }
        }
      }
    }
    let tmp = next;
    next = active;
    active = tmp;
    next.length = 0;
    side = -side;
  }
  let result = filterCells(cells, flags, target);
  if (infinity) {
    return result.concat(index.boundary);
  }
  return result;
}


/***/ }),

/***/ "./src/engine/common/modules/d2Canvas2Svg/triangles/MonotoneTriangulates.ts":
/*!**********************************************************************************!*\
  !*** ./src/engine/common/modules/d2Canvas2Svg/triangles/MonotoneTriangulates.ts ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   monotoneTriangulates: () => (/* binding */ monotoneTriangulates)
/* harmony export */ });
/* harmony import */ var _algorithm_binarySearchBounds_binarySearchBounds__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../algorithm/binarySearchBounds/binarySearchBounds */ "./src/engine/common/algorithm/binarySearchBounds/binarySearchBounds.ts");
/* harmony import */ var _geometry_Orients__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../geometry/Orients */ "./src/engine/common/geometry/Orients.ts");



const EVENT_POINT = 0;
const EVENT_END = 1;
const EVENT_START = 2;
class PartialHull {
  constructor(a, b, idx, lowerIds, upperIds) {
    this._a = a;
    this._b = b;
    this._idx = idx;
    this._lowerIds = lowerIds;
    this._upperIds = upperIds;
  }
  get a() {
    return this._a;
  }
  set a(value) {
    this._a = value;
  }
  get b() {
    return this._b;
  }
  set b(value) {
    this._b = value;
  }
  get idx() {
    return this._idx;
  }
  set idx(value) {
    this._idx = value;
  }
  get lowerIds() {
    return this._lowerIds;
  }
  set lowerIds(value) {
    this._lowerIds = value;
  }
  get upperIds() {
    return this._upperIds;
  }
  set upperIds(value) {
    this._upperIds = value;
  }
}
class Event {
  constructor(a, b, type, idx) {
    this._a = a;
    this._b = b;
    this._type = type;
    this._idx = idx;
  }
  get a() {
    return this._a;
  }
  set a(value) {
    this._a = value;
  }
  get b() {
    return this._b;
  }
  set b(value) {
    this._b = value;
  }
  get type() {
    return this._type;
  }
  set type(value) {
    this._type = value;
  }
  get idx() {
    return this._idx;
  }
  set idx(value) {
    this._idx = value;
  }
}
function addPoint(cells, hulls, points, p, idx) {
  let lo = _algorithm_binarySearchBounds_binarySearchBounds__WEBPACK_IMPORTED_MODULE_0__.bounds.lt(hulls, p, (hull, p2) => {
    return (0,_geometry_Orients__WEBPACK_IMPORTED_MODULE_1__.orient)(hull.a, hull.b, p2);
  });
  let hi = _algorithm_binarySearchBounds_binarySearchBounds__WEBPACK_IMPORTED_MODULE_0__.bounds.gt(hulls, p, (hull, p2) => {
    return (0,_geometry_Orients__WEBPACK_IMPORTED_MODULE_1__.orient)(hull.a, hull.b, p2);
  });
  for (let i = lo; i < hi; ++i) {
    let m = 0;
    let hull = hulls[i];
    let lowerIds = hull.lowerIds;
    m = lowerIds.length;
    while (m > 1 && (0,_geometry_Orients__WEBPACK_IMPORTED_MODULE_1__.orient)(points[lowerIds[m - 2]], points[lowerIds[m - 1]], p) > 0) {
      cells.push([lowerIds[m - 1], lowerIds[m - 2], idx]);
      m -= 1;
    }
    lowerIds.length = m;
    lowerIds.push(idx);
    let upperIds = hull.upperIds;
    m = upperIds.length;
    while (m > 1 && (0,_geometry_Orients__WEBPACK_IMPORTED_MODULE_1__.orient)(points[upperIds[m - 2]], points[upperIds[m - 1]], p) < 0) {
      cells.push([upperIds[m - 2], upperIds[m - 1], idx]);
      m -= 1;
    }
    upperIds.length = m;
    upperIds.push(idx);
  }
}
function findSplit(hull, edge) {
  let d = void 0;
  if (hull.a[0] < edge.a[0]) {
    d = (0,_geometry_Orients__WEBPACK_IMPORTED_MODULE_1__.orient)(hull.a, hull.b, edge.a);
  } else {
    d = (0,_geometry_Orients__WEBPACK_IMPORTED_MODULE_1__.orient)(edge.b, edge.a, hull.a);
  }
  if (d) {
    return d;
  }
  if (edge.b[0] < hull.b[0]) {
    d = (0,_geometry_Orients__WEBPACK_IMPORTED_MODULE_1__.orient)(hull.a, hull.b, edge.b);
  } else {
    d = (0,_geometry_Orients__WEBPACK_IMPORTED_MODULE_1__.orient)(edge.b, edge.a, hull.b);
  }
  return d || hull.idx - edge.idx;
}
function splitHulls(hulls, points, event) {
  let splitIdx = _algorithm_binarySearchBounds_binarySearchBounds__WEBPACK_IMPORTED_MODULE_0__.bounds.le(hulls, event, findSplit);
  let hull = hulls[splitIdx];
  let upperIds = hull.upperIds;
  let x = upperIds[upperIds.length - 1];
  hull.upperIds = [x];
  hulls.splice(splitIdx + 1, 0, new PartialHull(event.a, event.b, event.idx, [x], upperIds));
}
function mergeHulls(hulls, points, event) {
  let tmp = event.a;
  event.a = event.b;
  event.b = tmp;
  let mergeIdx = _algorithm_binarySearchBounds_binarySearchBounds__WEBPACK_IMPORTED_MODULE_0__.bounds.eq(hulls, event, findSplit);
  let upper = hulls[mergeIdx];
  let lower = hulls[mergeIdx - 1];
  lower.upperIds = upper.upperIds;
  hulls.splice(mergeIdx, 1);
}
function monotoneTriangulates(points, edges) {
  const numPoints = points.length;
  const numEdges = edges.length;
  const events = [];
  for (let i = 0; i < numPoints; ++i) {
    events.push(new Event(points[i], null, EVENT_POINT, i));
  }
  for (let i = 0; i < numEdges; ++i) {
    let e = edges[i];
    let a = points[e[0]];
    let b = points[e[1]];
    if (a[0] < b[0]) {
      events.push(new Event(a, b, EVENT_START, i), new Event(b, a, EVENT_END, i));
    } else if (a[0] > b[0]) {
      events.push(new Event(b, a, EVENT_START, i), new Event(a, b, EVENT_END, i));
    }
  }
  events.sort((a, b) => {
    let d = a.a[0] - b.a[0] || a.a[1] - b.a[1] || a.type - b.type;
    if (d) {
      return d;
    }
    if (a.type !== EVENT_POINT) {
      d = (0,_geometry_Orients__WEBPACK_IMPORTED_MODULE_1__.orient)(a.a, a.b, b.b);
      if (d) {
        return d;
      }
    }
    return a.idx - b.idx;
  });
  let minX = events[0].a[0] - (1 + Math.abs(events[0].a[0])) * Math.pow(2, -52);
  let hull = [new PartialHull([minX, 1], [minX, 0], -1, [], [])];
  let cells = [];
  for (let i = 0, numEvents = events.length; i < numEvents; ++i) {
    let event = events[i];
    let type = event.type;
    if (type === EVENT_POINT) {
      addPoint(cells, hull, points, event.a, event.idx);
    } else if (type === EVENT_START) {
      splitHulls(hull, points, event);
    } else {
      mergeHulls(hull, points, event);
    }
  }
  return cells;
}


/***/ }),

/***/ "./src/engine/common/utils/BaseBuffer.ts":
/*!***********************************************!*\
  !*** ./src/engine/common/utils/BaseBuffer.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BaseBuffer: () => (/* binding */ BaseBuffer),
/* harmony export */   FLOAT32ARRAY_ITEM_BYTESIZE: () => (/* binding */ FLOAT32ARRAY_ITEM_BYTESIZE),
/* harmony export */   UNIT16ARRAY_ITEM_BYTESIZE: () => (/* binding */ UNIT16ARRAY_ITEM_BYTESIZE),
/* harmony export */   UNIT32ARRAY_ITEM_BYTESIZE: () => (/* binding */ UNIT32ARRAY_ITEM_BYTESIZE)
/* harmony export */ });

const FLOAT32ARRAY_ITEM_BYTESIZE = 4;
const UNIT16ARRAY_ITEM_BYTESIZE = 2;
const UNIT32ARRAY_ITEM_BYTESIZE = 4;
class BaseBuffer {
  constructor(data) {
    this._data = data;
    this._isModify = true;
  }
  get data() {
    return this._data;
  }
  set data(value) {
    this._data = value;
  }
  get isModify() {
    return this._isModify;
  }
  set isModify(value) {
    this._isModify = value;
  }
}


/***/ }),

/***/ "./src/engine/common/utils/BitmapIndex.ts":
/*!************************************************!*\
  !*** ./src/engine/common/utils/BitmapIndex.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BYTE_CHUNK_SIZE: () => (/* binding */ BYTE_CHUNK_SIZE),
/* harmony export */   BitmapIndex: () => (/* binding */ BitmapIndex),
/* harmony export */   EMPTY_TAG: () => (/* binding */ EMPTY_TAG),
/* harmony export */   FULL_ADDRESS: () => (/* binding */ FULL_ADDRESS),
/* harmony export */   START_ADDRESS: () => (/* binding */ START_ADDRESS)
/* harmony export */ });
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Utils */ "./src/engine/common/utils/Utils.ts");


const START_ADDRESS = 0;
const FULL_ADDRESS = 4294967295;
const EMPTY_TAG = 0;
const BYTE_CHUNK_SIZE = 32;
class BitmapIndex {
  constructor(size) {
    this._size = size;
    this._index = new Uint32Array(Math.ceil(size / BYTE_CHUNK_SIZE));
    this._max = -1;
    this._emptyStart = 0;
    this._marked = 0;
    this.init();
  }
  init(bitMapIndexItem = null) {
    if (bitMapIndexItem) {
      this._index.set(bitMapIndexItem._index);
      this._marked = bitMapIndexItem._marked;
      this._emptyStart = bitMapIndexItem._emptyStart;
      this._max = bitMapIndexItem._max;
      return this;
    }
    return this;
  }
  get size() {
    return this._size;
  }
  extendSize(size) {
    const newBitmapIndex = new BitmapIndex(size);
    newBitmapIndex.init(this);
    return newBitmapIndex;
  }
  isEmpty() {
    return this._marked === 0;
  }
  getMarked() {
    return this._marked;
  }
  getChunk(idx) {
    return this._index[idx];
  }
  isUsed(idx) {
    const chunkIndex = idx / BYTE_CHUNK_SIZE | 0;
    const chunkItem = this._index[chunkIndex];
    if (chunkItem === FULL_ADDRESS) {
      return true;
    }
    if (chunkItem === EMPTY_TAG) {
      return false;
    }
    return (chunkItem >> BYTE_CHUNK_SIZE - 1 - idx & 1) === 1;
  }
  markUsed(idx) {
    const chunkIndex = idx / BYTE_CHUNK_SIZE | 0;
    const chunkItem = this._index[chunkIndex];
    const offset = 1 << BYTE_CHUNK_SIZE - 1 - idx;
    if ((chunkItem & offset) === 0) {
      this._index[chunkIndex] = chunkItem | offset;
      this._marked++;
    }
    if (idx > this._max) {
      this._max = idx;
    }
  }
  markRemove(idx) {
    const chunkIndex = idx / BYTE_CHUNK_SIZE | 0;
    const chunkItem = this._index[chunkIndex];
    const offset = 1 << BYTE_CHUNK_SIZE - 1 - idx;
    if ((chunkItem & offset) !== 0) {
      this._index[chunkIndex] = chunkItem & (FULL_ADDRESS ^ offset);
      this._marked--;
      if (idx < this._emptyStart) {
        this._emptyStart = idx;
      }
    }
  }
  reset() {
    this._index.fill(0);
    this._marked = 0;
    this._emptyStart = 0;
    this._max = -1;
  }
  findEmpty(chunks = -1) {
    if (this._size - this._marked < chunks) {
      return -1;
    }
    if (this._size - this._max - 1 >= chunks) {
      return this._max + 1;
    }
    const index = this._index;
    let start = -1;
    let isSetEmptyStart = false;
    for (let i = Math.floor(this._emptyStart / BYTE_CHUNK_SIZE); i < index.length; i++) {
      const chunkItem = index[i];
      if (chunkItem === EMPTY_TAG) {
        if (start === -1) {
          start = i * BYTE_CHUNK_SIZE;
          if (isSetEmptyStart) {
            this._emptyStart = start;
            isSetEmptyStart = true;
          }
          if (chunks <= BYTE_CHUNK_SIZE) {
            return start;
          }
        } else {
          let end = (i + 1) * BYTE_CHUNK_SIZE;
          if (end - start >= chunks) {
            return start;
          }
        }
      } else if (chunkItem !== FULL_ADDRESS) {
        for (let j = BYTE_CHUNK_SIZE - 1; j >= 0; j--) {
          if ((chunkItem >> j & 1) === 0) {
            let endIndex = i * BYTE_CHUNK_SIZE + BYTE_CHUNK_SIZE - 1 - j;
            if (start === -1) {
              start = endIndex;
              if (!isSetEmptyStart) {
                this._emptyStart = start;
                isSetEmptyStart = true;
              }
            }
            if (endIndex - start + 1 >= chunks) {
              return start;
            }
          } else {
            start = -1;
          }
        }
      } else {
        start = -1;
      }
    }
    return -1;
  }
  hasNextEmpty(count = 1) {
    return this._size - this._marked >= count;
  }
  /**
   * 获取一组长度为 {count} 的可用空间并返回索引空间(地址)
   */
  findNextEmpty(count = 1) {
    const result = [];
    if (this._size - this._marked < count) {
      throw new Error("memory allocation failed: there is not enough memory address space for the current ObjectBlendBuffer.");
    }
    if (this._size - this._max - 1 >= count) {
      const end = this._max + count;
      for (let i = this._max + 1; i <= end; i++) {
        result.push(i);
      }
      return result;
    }
    const index = this._index;
    for (let i = Math.floor(this._emptyStart / BYTE_CHUNK_SIZE); i < index.length; i++) {
      if (this._marked + result.length === i * BYTE_CHUNK_SIZE) {
        for (let j = i * BYTE_CHUNK_SIZE; result.length !== count; j++) {
          result.push(j);
        }
        this._emptyStart = result[0];
        return result;
      }
      const chunkItem = index[i];
      if (chunkItem === START_ADDRESS) {
        const tmp = i * BYTE_CHUNK_SIZE;
        if (result.indexOf(tmp) === -1) {
          result.push(tmp);
          if (result.length >= count) {
            this._emptyStart = result[0];
            return result;
          } else {
            const num = count - result.length;
            if (num < BYTE_CHUNK_SIZE) {
              for (let k = 0; k < num; k++) {
                result.push(tmp + k + 1);
              }
              this._emptyStart = result[0];
              return result;
            } else {
              for (let k = 0; k < BYTE_CHUNK_SIZE - 1; k++) {
                result.push(tmp + k + 1);
              }
            }
          }
        }
      } else if (chunkItem !== FULL_ADDRESS) {
        for (let j = BYTE_CHUNK_SIZE - 1; j >= 0; j--) {
          if ((chunkItem >> j & 1) === 0) {
            const tmp = i * BYTE_CHUNK_SIZE + BYTE_CHUNK_SIZE - 1 - j;
            if (result.indexOf(tmp) === -1) {
              result.push(tmp);
              if (result.length === count) {
                this._emptyStart = result[0];
                return result;
              }
            }
          }
        }
      }
    }
    this._emptyStart = result.length === 0 ? this._size : result[0];
    return [];
  }
  getMax() {
    return this._max;
  }
  debug() {
    const display = [];
    const index = this._index;
    for (let i = 0; i < index.length; i++) {
      display.push((0,_Utils__WEBPACK_IMPORTED_MODULE_0__.format2Binary)(index[i]));
    }
    console.log(display);
  }
}


/***/ }),

/***/ "./src/engine/common/utils/Color.ts":
/*!******************************************!*\
  !*** ./src/engine/common/utils/Color.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Color: () => (/* binding */ Color)
/* harmony export */ });

const _Color = class {
  static createByHex(hex) {
    const rgbaResult = _Color.hex2Rgba(hex);
    return new _Color(rgbaResult.r / 255, rgbaResult.g / 255, rgbaResult.b / 255, rgbaResult.a);
  }
  static createByValue(r, g, b, a) {
    return new _Color(r, g, b, a);
  }
  static createByAlpha(alpha, color = _Color.WHITE) {
    alpha = alpha <= 0 ? 0 : alpha;
    alpha = alpha >= 1 ? 1 : alpha;
    return new _Color(color.r, color.g, color.b, alpha);
  }
  /**
   * RGBA 转 HEX
   *
   * { r: 255, g: 165, b: 1, a: 255 } => 'ffa501'
   */
  static rgba2Hex(rgba) {
    let r = (rgba.r * 255).toString(16);
    let g = (rgba.g * 255).toString(16);
    let b = (rgba.b * 255).toString(16);
    let a = Math.round(rgba.a * 255).toString(16);
    if (r.length == 1) {
      r = "0" + r;
    }
    if (g.length == 1) {
      g = "0" + g;
    }
    if (b.length == 1) {
      b = "0" + b;
    }
    if (a.length == 1) {
      a = "0" + a;
    }
    return "#" + r + g + b + a;
  }
  /**
   * HEX 转 RGBA
   *
   * '#27ae60ff' => { r: 29, g: 174, b: 96, a: 255 }
   * '#27ae60' => { r: 29, g: 174, b: 96, a: 255 }
   */
  static hex2Rgba(hex) {
    const result = { r: 0, g: 0, b: 0, a: 0 };
    let alpha = false;
    let h = hex.slice(hex.startsWith("#") ? 1 : 0);
    if (h.length === 3) {
      h = [...h].map((x) => {
        return x + x;
      }).join("");
    } else if (h.length === 8) {
      alpha = true;
    }
    const n = parseInt(h, 16);
    result.r = n >>> (alpha ? 24 : 16);
    result.g = (n & (alpha ? 16711680 : 65280)) >>> (alpha ? 16 : 8);
    result.b = (n & (alpha ? 65280 : 255)) >>> (alpha ? 8 : 0);
    result.a = alpha ? n & 255 : 1;
    return result;
  }
  /**
   * RGBA 转 HSB
   */
  static rgba2Hsb(rgba) {
    const result = { h: 0, s: 0, b: 0 };
    const { r, g, b, a } = rgba;
    const nr = r / 255;
    const ng = g / 255;
    const nb = b / 255;
    const v = Math.max(r, g, b);
    const n = v - Math.min(r, g, b);
    const h = n === 0 ? 0 : n && v === nr ? (ng - b) / n : v === ng ? 2 + (nb - nr) / n : 4 + (nr - ng) / n;
    result.h = 60 * (h < 0 ? h + 6 : h);
    result.s = v && n / v * 100;
    result.b = v * 100;
    return result;
  }
  /**
   * HSB 转 RGBA
   */
  static hsb2Rgba(hsb) {
    const result = { r: 0, g: 0, b: 0, a: 0 };
    const { h, s, b } = hsb;
    const nh = h;
    const ns = s / 100;
    const nb = b / 100;
    const k = (n) => {
      return (n + nh / 60) % 6;
    };
    const f = (n) => {
      return nb * (1 - ns * Math.max(0, Math.min(k(n), 4 - k(n), 1)));
    };
    result.r = 255 * f(5);
    result.r = 255 * f(3);
    result.r = 255 * f(1);
    result.a = 1;
    return result;
  }
  static rgba2Hsl(rgba) {
    const result = { h: 0, s: 0, l: 0 };
    const { r, g, b, a } = rgba;
    const nr = r / 255;
    const ng = g / 255;
    const nb = b / 255;
    const l = Math.max(r, g, b);
    const s = l - Math.min(nr, ng, nb);
    const h = s ? l === nr ? (g - nb) / s : l === ng ? 2 + (nb - nr) / s : 4 + (nr - ng) / s : 0;
    result.h = 60 * h < 0 ? 60 * h + 360 : 60 * h;
    result.s = 100 * (s ? l <= 0.5 ? s / (2 * l - s) : s / (2 - (2 * l - s)) : 0);
    result.l = 100 * (2 * l - s) / 2;
    return result;
  }
  static hsl2Rgba(hsl) {
    const result = { r: 0, g: 0, b: 0, a: 0 };
    const { h, s, l } = hsl;
    const ns = s / 100;
    const nl = l / 100;
    const k = (n) => {
      return (n + h / 30) % 12;
    };
    const a = ns * Math.min(nl, 1 - nl);
    const f = (n) => {
      return nl - a * Math.max(-1, Math.min(k(n) - 3, Math.min(9 - k(n), 1)));
    };
    result.r = 255 * f(0);
    result.g = 255 * f(8);
    result.b = 255 * f(4);
    result.a = 1;
    return result;
  }
  constructor(r, g, b, a = 1) {
    this._r = r;
    this._g = g;
    this._b = b;
    this._a = a;
  }
  get r() {
    return this._r;
  }
  set r(value) {
    this._r = value;
  }
  get g() {
    return this._g;
  }
  set g(value) {
    this._g = value;
  }
  get b() {
    return this._b;
  }
  set b(value) {
    this._b = value;
  }
  get a() {
    return typeof this._a === "undefined" ? 1 : this._a;
  }
  set a(value) {
    this._a = value;
  }
  toRGBAString() {
    let result = `rgba(`;
    result += String(this.r * 255) + ", ";
    result += String(this.g * 255) + ", ";
    result += String(this.b * 255) + ", ";
    result += String(this.a * 255) + ")";
    return result;
  }
  toRGBAJSON() {
    return {
      r: this.r,
      g: this.g,
      b: this.b,
      a: this.a
    };
  }
};
let Color = _Color;
Color.WHITE = _Color.createByHex("#FFFFFF");
Color.BLACK = _Color.createByHex("#000000");
Color.RED = _Color.createByHex("#FF0000");
Color.GREEN = _Color.createByHex("#00FF00");
Color.BLUE = _Color.createByHex("#0000FF");
Color.GRAY = _Color.createByHex("#808080");
Color.DIM_GRAY = _Color.createByHex("#696969");
Color.GAINSBORO = _Color.createByHex("#DCDCDC");
Color.PINK = _Color.createByHex("#FFC0CB");
Color.SILVER = _Color.createByHex("#C0C0C0");
Color.PLUM = _Color.createByHex("#DDA0DD");
Color.DARK_MAGENTA = _Color.createByHex("#8B008B");
Color.INDIGO = _Color.createByHex("#4B0082");
Color.NAVY = _Color.createByHex("#000080");
Color.LIGHT_STEE_BLUE = _Color.createByHex("#B0C4DE");
Color.SLATE_GRAY = _Color.createByHex("#708090");
Color.DEEP_SKY_BLUE = _Color.createByHex("#00BFFF");
Color.CADE_BLUE = _Color.createByHex("#5F9EA0");
Color.CYAN = _Color.createByHex("#00FFFF");
Color.TEAL = _Color.createByHex("#008080");
Color.SPRING_GREEN = _Color.createByHex("#00FF7F");
Color.LIME = _Color.createByHex("#00FF00");
Color.GREEN_YELLOW = _Color.createByHex("#ADFF2F");
Color.YELLOW_GREEN = _Color.createByHex("#9ACD32");
Color.KHAKI = _Color.createByHex("#F0E68C");
Color.GOLDEN = _Color.createByHex("#DCAA14");
Color.YELLOW = _Color.createByHex("#FFFF00");
Color.GOLDENROD = _Color.createByHex("#DAA520");
Color.ORIGIN = _Color.createByHex("#FF6600");
Color.CORAL = _Color.createByHex("#FF7F50");
Color.ORIGIN_RED = _Color.createByHex("#FF4500");
Color.BROWN = _Color.createByHex("#A52A2A");


/***/ }),

/***/ "./src/engine/common/utils/Context.ts":
/*!********************************************!*\
  !*** ./src/engine/common/utils/Context.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Context: () => (/* binding */ Context)
/* harmony export */ });
/* harmony import */ var _Status__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Status */ "./src/engine/common/utils/Status.ts");


class Context {
  constructor(status) {
    this._status = status;
  }
  get status() {
    return this._status;
  }
  set status(status) {
    this._status = status;
  }
  isStatusMatch(bitIndex) {
    return _Status__WEBPACK_IMPORTED_MODULE_0__.Status.isStatusMatch(this._status, bitIndex);
  }
  setStatusMatch(bitIndex, value) {
    const statusResult = _Status__WEBPACK_IMPORTED_MODULE_0__.Status.setStatusMatch(bitIndex, this._status, value);
    this._status = statusResult;
    return statusResult;
  }
}


/***/ }),

/***/ "./src/engine/common/utils/ObjectBlendBuffer.ts":
/*!******************************************************!*\
  !*** ./src/engine/common/utils/ObjectBlendBuffer.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DEFAULT_PRIMITIVE_CHUNK_SIZE: () => (/* binding */ DEFAULT_PRIMITIVE_CHUNK_SIZE),
/* harmony export */   ObjectBlendBuffer: () => (/* binding */ ObjectBlendBuffer)
/* harmony export */ });
/* harmony import */ var _BaseBuffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BaseBuffer */ "./src/engine/common/utils/BaseBuffer.ts");
/* harmony import */ var _BitmapIndex__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BitmapIndex */ "./src/engine/common/utils/BitmapIndex.ts");



const DEFAULT_PRIMITIVE_CHUNK_SIZE = 1024;
class ObjectBlendBuffer {
  constructor(primitiveChunkCount, bufferUnitParams) {
    this._bitmapIndex = new _BitmapIndex__WEBPACK_IMPORTED_MODULE_1__.BitmapIndex(primitiveChunkCount);
    this._bufferUnitParams = bufferUnitParams;
    this._baseBuffers = [];
    this._primitiveChunkCount = primitiveChunkCount;
    this._allByteSize = 0;
    for (let us of this._bufferUnitParams) {
      this._allByteSize += this._primitiveChunkCount * us.size * _BaseBuffer__WEBPACK_IMPORTED_MODULE_0__.FLOAT32ARRAY_ITEM_BYTESIZE;
      this._baseBuffers.push(us.creator(this._primitiveChunkCount * us.size * _BaseBuffer__WEBPACK_IMPORTED_MODULE_0__.FLOAT32ARRAY_ITEM_BYTESIZE));
    }
  }
  bindBufferData() {
    for (let baseBufferItem of this._baseBuffers) {
      baseBufferItem.bindArrayBufferData();
    }
  }
  getBaseBuffer(idx) {
    return this._baseBuffers[idx];
  }
  updateBaseBufferByIndex(baseBufferIndex, dataIndex, data, offset = 0) {
    this._baseBuffers[baseBufferIndex].updateBaseBufferByIndex(dataIndex * this._bufferUnitParams[baseBufferIndex].size + offset, data);
  }
  overwriteBufferData(baseBufferIndex, data) {
    this._baseBuffers[baseBufferIndex].overwriteBufferData(data);
  }
  getSize() {
    return this._bitmapIndex.size;
  }
  getBufferSize(baseBufferIndex) {
    return this._baseBuffers[baseBufferIndex].data.length;
  }
  isEmpty() {
    return this._bitmapIndex.isEmpty();
  }
  hasNextEmpty(count) {
    return this._bitmapIndex.hasNextEmpty(count);
  }
  getNextEmptyIndex(count) {
    const nextEmptyIds = this._bitmapIndex.findNextEmpty(count);
    for (let i of nextEmptyIds) {
      this._bitmapIndex.markUsed(i);
    }
    return nextEmptyIds;
  }
  remove(primitiveItemBitIndex, useDefaultFillData) {
    this._bitmapIndex.markRemove(primitiveItemBitIndex);
    for (let i = 0; i < this._baseBuffers.length; i++) {
      this._baseBuffers[i].updateBaseBufferByIndex(
        primitiveItemBitIndex * this._bufferUnitParams[i].size,
        useDefaultFillData || new Float32Array(this._bufferUnitParams[i].size)
      );
    }
    return this._bitmapIndex.isEmpty();
  }
  drop() {
    for (let baseBufferItem of this._baseBuffers) {
      baseBufferItem.drop();
    }
    this._baseBuffers.length = 0;
    this._bitmapIndex.reset();
  }
}


/***/ }),

/***/ "./src/engine/common/utils/Status.ts":
/*!*******************************************!*\
  !*** ./src/engine/common/utils/Status.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Status: () => (/* binding */ Status)
/* harmony export */ });

class Status {
  static isStatusMatch(nowStatus, bitIndex) {
    return (nowStatus & bitIndex) === bitIndex;
  }
  static setStatusMatch(bitIndex, nowStatus, value) {
    const _v = !!value;
    let statusResult = nowStatus;
    if (_v) {
      statusResult = statusResult | bitIndex;
      return statusResult;
    }
    statusResult = statusResult & ~bitIndex;
    return statusResult;
  }
}


/***/ }),

/***/ "./src/engine/common/utils/Uniq.ts":
/*!*****************************************!*\
  !*** ./src/engine/common/utils/Uniq.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   unique: () => (/* binding */ unique)
/* harmony export */ });

function uniquePred(list, compare) {
  let ptr = 1;
  let len = list.length;
  let a = list[0];
  let b = list[0];
  for (let i = 1; i < len; ++i) {
    b = a;
    a = list[i];
    if (compare(a, b)) {
      if (i === ptr) {
        ptr++;
        continue;
      }
      list[ptr++] = a;
    }
  }
  list.length = ptr;
  return list;
}
function unique(list, compare) {
  if (list.length === 0) {
    return list;
  }
  list.sort(compare);
  return uniquePred(list, compare);
}


/***/ }),

/***/ "./src/engine/common/utils/Utils.ts":
/*!******************************************!*\
  !*** ./src/engine/common/utils/Utils.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arrayCopy: () => (/* binding */ arrayCopy),
/* harmony export */   format2Binary: () => (/* binding */ format2Binary),
/* harmony export */   getAllKeysFromMap: () => (/* binding */ getAllKeysFromMap),
/* harmony export */   getHashIden: () => (/* binding */ getHashIden),
/* harmony export */   getLimitRange: () => (/* binding */ getLimitRange),
/* harmony export */   getRandomInArea: () => (/* binding */ getRandomInArea),
/* harmony export */   isEqualOfArray: () => (/* binding */ isEqualOfArray),
/* harmony export */   isSupportWebGPU: () => (/* binding */ isSupportWebGPU),
/* harmony export */   removeItemFromList: () => (/* binding */ removeItemFromList),
/* harmony export */   throttle1: () => (/* binding */ throttle1),
/* harmony export */   throttle2: () => (/* binding */ throttle2)
/* harmony export */ });

var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
function getRandomInArea(min = 0, max = Number.MAX_SAFE_INTEGER) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}
function getHashIden(length = 36) {
  const s = [];
  const HEX_DIGITS = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
  for (let i = 0; i < length; i++) {
    s[i] = HEX_DIGITS.substr(Math.floor(Math.random() * 16), 1);
  }
  s[14] && (s[14] = String(getRandomInArea(1, 9)));
  s[19] && (s[19] = HEX_DIGITS.substr(+s[19] & 3 | 8, 1));
  s[8] && (s[8] = String(getRandomInArea(1, 9)));
  s[13] && (s[13] = String(getRandomInArea(1, 9)));
  s[18] && (s[18] = String(getRandomInArea(1, 9)));
  s[23] && (s[23] = String(getRandomInArea(1, 9)));
  return s.join("");
}
function getLimitRange(inputNumber, min = 0.01, max = Number.MAX_SAFE_INTEGER) {
  if (inputNumber >= max) {
    return max;
  }
  if (inputNumber <= min) {
    return min;
  }
  return inputNumber;
}
function isEqualOfArray(a1, a2) {
  const len1 = a1.length;
  const len2 = a2.length;
  if (len1 !== len2) {
    return false;
  }
  for (let k1 = 0; k1 < len1; k1++) {
    for (let k2 = 0; k2 < len2; k2++) {
      if (a1[k1] !== a2[k2]) {
        return false;
      }
    }
  }
  return true;
}
function arrayCopy(sourceArray, sourceIndex, resultArray, resultIndex, copyLength) {
  if (sourceArray.length >= sourceIndex + copyLength && resultArray.length >= resultIndex + copyLength) {
    while (copyLength-- > 0) {
      resultArray[resultIndex++] = sourceArray[sourceIndex++];
    }
    return;
  }
  throw new Error("cannot read array out of range.");
}
function throttle1(fn, delay = 500) {
  let previous = 0;
  return function() {
    let now = +new Date();
    if (now - previous > delay) {
      fn.apply(this, arguments);
      previous = now;
    }
  };
}
function throttle2(fn, delay = 500) {
  let timer = null;
  return function() {
    if (!timer) {
      timer = window.setTimeout(() => {
        timer = null;
        fn.apply(this, arguments);
      }, delay);
    }
  };
}
function isSupportWebGPU() {
  return __async(this, null, function* () {
    try {
      if (!navigator.gpu) {
        throw new Error(`navigator.gpu is undefined.`);
      }
      const adapter = yield navigator.gpu.requestAdapter();
      const device = yield adapter.requestDevice();
      if (device) {
        return true;
      }
    } catch (e) {
      console.error(`The current environment does not support WebGPU: ${e}`);
    }
    return false;
  });
}
function format2Binary(num) {
  const str = num.toString(2);
  const leftPad = 32 - str.length;
  if (leftPad > 0) {
    return "0".repeat(leftPad) + str;
  }
  return str;
}
function removeItemFromList(list, item) {
  let len = list.length;
  for (let i = 0; i < list.length; i++) {
    if (list[i] === item) {
      list.splice(i, 1);
      i--;
      len--;
    }
  }
}
function getAllKeysFromMap(map) {
  const allKeys = [];
  for (let [key, value] of map) {
    allKeys.push(key);
  }
  return allKeys;
}


/***/ }),

/***/ "./src/engine/config/CommonProfile.ts":
/*!********************************************!*\
  !*** ./src/engine/config/CommonProfile.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ECoreEngineType: () => (/* binding */ ECoreEngineType),
/* harmony export */   ESweep: () => (/* binding */ ESweep)
/* harmony export */ });

var ECoreEngineType = /* @__PURE__ */ ((ECoreEngineType2) => {
  ECoreEngineType2["WEBGL2D"] = "WEBGL2D";
  ECoreEngineType2["WEBGL3D"] = "WEBGL3D";
  ECoreEngineType2["WEBGPU"] = "WEBGPU";
  return ECoreEngineType2;
})(ECoreEngineType || {});
var ESweep = /* @__PURE__ */ ((ESweep2) => {
  ESweep2[ESweep2["CW"] = 0] = "CW";
  ESweep2[ESweep2["CCW"] = 1] = "CCW";
  return ESweep2;
})(ESweep || {});


/***/ }),

/***/ "./src/engine/config/PlaneProfile.ts":
/*!*******************************************!*\
  !*** ./src/engine/config/PlaneProfile.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EPlaneStatus: () => (/* binding */ EPlaneStatus),
/* harmony export */   EPlaneType: () => (/* binding */ EPlaneType),
/* harmony export */   PLANE_INIT_STATUS: () => (/* binding */ PLANE_INIT_STATUS)
/* harmony export */ });

const PLANE_INIT_STATUS = 1;
var EPlaneStatus = /* @__PURE__ */ ((EPlaneStatus2) => {
  EPlaneStatus2[EPlaneStatus2["VISIBLE"] = 1] = "VISIBLE";
  EPlaneStatus2[EPlaneStatus2["LOCKED"] = 2] = "LOCKED";
  EPlaneStatus2[EPlaneStatus2["KILLED"] = 4] = "KILLED";
  return EPlaneStatus2;
})(EPlaneStatus || {});
var EPlaneType = /* @__PURE__ */ ((EPlaneType2) => {
  EPlaneType2[EPlaneType2["ControlPlane"] = 1] = "ControlPlane";
  EPlaneType2[EPlaneType2["ContentPlane"] = 2] = "ContentPlane";
  return EPlaneType2;
})(EPlaneType || {});


/***/ }),

/***/ "./src/engine/config/PrimitiveProfile.ts":
/*!***********************************************!*\
  !*** ./src/engine/config/PrimitiveProfile.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ECanvas2DLineCap: () => (/* binding */ ECanvas2DLineCap),
/* harmony export */   ED2FontStyle: () => (/* binding */ ED2FontStyle),
/* harmony export */   ED2PointShape: () => (/* binding */ ED2PointShape),
/* harmony export */   EPrimitiveStatus: () => (/* binding */ EPrimitiveStatus),
/* harmony export */   PRIMITIVE_INIT_STATUS: () => (/* binding */ PRIMITIVE_INIT_STATUS)
/* harmony export */ });

const PRIMITIVE_INIT_STATUS = 1;
var ECanvas2DLineCap = /* @__PURE__ */ ((ECanvas2DLineCap2) => {
  ECanvas2DLineCap2["ROUND"] = "round";
  ECanvas2DLineCap2["SQUARE"] = "square";
  return ECanvas2DLineCap2;
})(ECanvas2DLineCap || {});
var ED2PointShape = /* @__PURE__ */ ((ED2PointShape2) => {
  ED2PointShape2["TRIANGLE"] = "TRIANGLE";
  ED2PointShape2["DOT"] = "DOT";
  return ED2PointShape2;
})(ED2PointShape || {});
var ED2FontStyle = /* @__PURE__ */ ((ED2FontStyle2) => {
  ED2FontStyle2["NORMAL"] = "normal";
  ED2FontStyle2["ITALIC"] = "italic";
  return ED2FontStyle2;
})(ED2FontStyle || {});
var EPrimitiveStatus = /* @__PURE__ */ ((EPrimitiveStatus2) => {
  EPrimitiveStatus2[EPrimitiveStatus2["VISIBLE"] = 1] = "VISIBLE";
  EPrimitiveStatus2[EPrimitiveStatus2["LOCKED"] = 2] = "LOCKED";
  EPrimitiveStatus2[EPrimitiveStatus2["KILLED"] = 4] = "KILLED";
  EPrimitiveStatus2[EPrimitiveStatus2["HIGHTLIGHT"] = 8] = "HIGHTLIGHT";
  return EPrimitiveStatus2;
})(EPrimitiveStatus || {});


/***/ }),

/***/ "./src/engine/webgl/SceneGL.ts":
/*!*************************************!*\
  !*** ./src/engine/webgl/SceneGL.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SceneGL: () => (/* binding */ SceneGL)
/* harmony export */ });
/* harmony import */ var _common_Camera__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/Camera */ "./src/engine/common/Camera.ts");
/* harmony import */ var _common_Scene__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/Scene */ "./src/engine/common/Scene.ts");
/* harmony import */ var _renderer_RendererGL__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./renderer/RendererGL */ "./src/engine/webgl/renderer/RendererGL.ts");
/* harmony import */ var _plane_PlaneGL__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./plane/PlaneGL */ "./src/engine/webgl/plane/PlaneGL.ts");
/* harmony import */ var _primitives2d_d2GridAxis_D2AxisProgramGL__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./primitives2d/d2GridAxis/D2AxisProgramGL */ "./src/engine/webgl/primitives2d/d2GridAxis/D2AxisProgramGL.ts");
/* harmony import */ var _primitives2d_d2AnyTest_D2AnyTestProgramGL__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./primitives2d/d2AnyTest/D2AnyTestProgramGL */ "./src/engine/webgl/primitives2d/d2AnyTest/D2AnyTestProgramGL.ts");







function createInitWebGLParam(is3D) {
  if (is3D) {
    return {
      depth: true,
      antialias: true,
      stencil: true,
      aplha: false,
      premultipliedAplha: false
    };
  }
  return {
    depth: false,
    antialias: true,
    stencil: true,
    aplha: false,
    premultipliedAplha: false
  };
}
class SceneGL extends _common_Scene__WEBPACK_IMPORTED_MODULE_1__.Scene {
  constructor(canvasElement, is3D) {
    super();
    this.is3D = is3D;
    this.renderer = new _renderer_RendererGL__WEBPACK_IMPORTED_MODULE_2__.RendererGL(canvasElement, createInitWebGLParam(is3D));
    this.camera = _common_Camera__WEBPACK_IMPORTED_MODULE_0__.Camera.getInstance();
    this._d2AnyTestProgram = new _primitives2d_d2AnyTest_D2AnyTestProgramGL__WEBPACK_IMPORTED_MODULE_5__.D2AnyTestProgramGL(this.renderer);
    this._d2AxisProgram = new _primitives2d_d2GridAxis_D2AxisProgramGL__WEBPACK_IMPORTED_MODULE_4__.D2AxisProgramGL(this.renderer);
    this._contentPlanes = /* @__PURE__ */ new Map();
    this._controlPlanes = /* @__PURE__ */ new Map();
  }
  updateCanvasRect(canvasWidth, canvasHeight) {
    const gl = this.renderer.gl;
    this.renderer.updateRect(canvasWidth, canvasHeight);
    this._d2AnyTestProgram.updateCanvasRect(canvasWidth, canvasHeight);
    this._d2AxisProgram.updateCanvasRect(canvasWidth, canvasHeight);
    gl.viewport(0, 0, canvasWidth, canvasHeight);
    if (this.is3D) {
      gl.enable(gl.DEPTH_TEST);
      gl.enable(gl.STENCIL_TEST);
      gl.enable(gl.CULL_FACE);
      gl.enable(gl.POLYGON_OFFSET_FILL);
      gl.polygonOffset(1, 1);
    }
    gl.enable(gl.BLEND);
    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);
  }
  updateCanvasOrigin(origin) {
    this.renderer.updateOrigin(origin);
  }
  addControlPlaneItem(planeId) {
    if (this._controlPlanes.has(planeId)) {
      return this._controlPlanes.get(planeId);
    }
    const planeItem = new _plane_PlaneGL__WEBPACK_IMPORTED_MODULE_3__.PlaneGL(this, planeId);
    this._controlPlanes.set(planeId, planeItem);
    return planeItem;
  }
  addContentPlaneItem(planeId) {
    if (this._contentPlanes.has(planeId)) {
      return this._contentPlanes.get(planeId);
    }
    const planeItem = new _plane_PlaneGL__WEBPACK_IMPORTED_MODULE_3__.PlaneGL(this, planeId);
    this._contentPlanes.set(planeId, planeItem);
    return planeItem;
  }
  deleteControlPlaneItem(planeId) {
    if (this._controlPlanes.has(planeId)) {
      this._controlPlanes.delete(planeId);
      return;
    }
  }
  deleteContentPlaneItem(planeId) {
    if (this._contentPlanes.has(planeId)) {
      this._contentPlanes.delete(planeId);
      return;
    }
  }
  render(timeStamp) {
    const gl = this.renderer.gl;
    gl.clearColor(this.canvasBackgroundColor.r, this.canvasBackgroundColor.g, this.canvasBackgroundColor.b, this.canvasBackgroundColor.a);
    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);
    gl.viewport(0, 0, this.renderer.width, this.renderer.height);
    this._d2AxisProgram.render(this);
    const allContentPlanes = Array.from(this._contentPlanes.values());
    for (let i = 0; i < allContentPlanes.length; i++) {
      const planeItem = allContentPlanes[i];
      planeItem.render();
    }
    const allControlPlanes = Array.from(this._controlPlanes.values());
    for (let i = 0; i < allControlPlanes.length; i++) {
      const planeItem = allControlPlanes[i];
      planeItem.render();
    }
  }
}


/***/ }),

/***/ "./src/engine/webgl/plane/PlaneGL.ts":
/*!*******************************************!*\
  !*** ./src/engine/webgl/plane/PlaneGL.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PlaneGL: () => (/* binding */ PlaneGL)
/* harmony export */ });
/* harmony import */ var _common_Plane__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../common/Plane */ "./src/engine/common/Plane.ts");
/* harmony import */ var _PrimitiveManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./PrimitiveManager */ "./src/engine/webgl/plane/PrimitiveManager.ts");
/* harmony import */ var _common_utils_ObjectBlendBuffer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../common/utils/ObjectBlendBuffer */ "./src/engine/common/utils/ObjectBlendBuffer.ts");
/* harmony import */ var _common_InsConfig__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/InsConfig */ "./src/engine/common/InsConfig.ts");
/* harmony import */ var _common_utils_Utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../common/utils/Utils */ "./src/engine/common/utils/Utils.ts");
/* harmony import */ var _common_math_Calculation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../common/math/Calculation */ "./src/engine/common/math/Calculation.ts");
/* harmony import */ var _primitives2d_d2SingleLine_D2LineObjectGL__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../primitives2d/d2SingleLine/D2LineObjectGL */ "./src/engine/webgl/primitives2d/d2SingleLine/D2LineObjectGL.ts");
/* harmony import */ var _primitives2d_d2SingleLine_D2LineBufferGL__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../primitives2d/d2SingleLine/D2LineBufferGL */ "./src/engine/webgl/primitives2d/d2SingleLine/D2LineBufferGL.ts");
/* harmony import */ var _primitives2d_d2SingleLine_D2LineInstancedProgramGL__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../primitives2d/d2SingleLine/D2LineInstancedProgramGL */ "./src/engine/webgl/primitives2d/d2SingleLine/D2LineInstancedProgramGL.ts");
/* harmony import */ var _primitives2d_d2SingleCircle_D2CircleObjectGL__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../primitives2d/d2SingleCircle/D2CircleObjectGL */ "./src/engine/webgl/primitives2d/d2SingleCircle/D2CircleObjectGL.ts");
/* harmony import */ var _primitives2d_d2SingleCircle_D2CircleBufferGL__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../primitives2d/d2SingleCircle/D2CircleBufferGL */ "./src/engine/webgl/primitives2d/d2SingleCircle/D2CircleBufferGL.ts");
/* harmony import */ var _primitives2d_d2SingleCircle_D2CircleInstancedProgramGL__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../primitives2d/d2SingleCircle/D2CircleInstancedProgramGL */ "./src/engine/webgl/primitives2d/d2SingleCircle/D2CircleInstancedProgramGL.ts");
/* harmony import */ var _primitives2d_d2SinglePoint_D2PointObjectGL__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../primitives2d/d2SinglePoint/D2PointObjectGL */ "./src/engine/webgl/primitives2d/d2SinglePoint/D2PointObjectGL.ts");
/* harmony import */ var _primitives2d_d2SinglePoint_D2PointInstancedProgramGL__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../primitives2d/d2SinglePoint/D2PointInstancedProgramGL */ "./src/engine/webgl/primitives2d/d2SinglePoint/D2PointInstancedProgramGL.ts");
/* harmony import */ var _primitives2d_d2SingleArc_D2ArcObjectGL__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../primitives2d/d2SingleArc/D2ArcObjectGL */ "./src/engine/webgl/primitives2d/d2SingleArc/D2ArcObjectGL.ts");
/* harmony import */ var _primitives2d_d2SingleArc_D2ArcBufferGL__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../primitives2d/d2SingleArc/D2ArcBufferGL */ "./src/engine/webgl/primitives2d/d2SingleArc/D2ArcBufferGL.ts");
/* harmony import */ var _primitives2d_d2SingleArc_D2ArcInstancedProgramGL__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../primitives2d/d2SingleArc/D2ArcInstancedProgramGL */ "./src/engine/webgl/primitives2d/d2SingleArc/D2ArcInstancedProgramGL.ts");
/* harmony import */ var _primitives2d_d2SingleText_D2TextObjectGL__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../primitives2d/d2SingleText/D2TextObjectGL */ "./src/engine/webgl/primitives2d/d2SingleText/D2TextObjectGL.ts");
/* harmony import */ var _primitives2d_d2SingleText_D2TextBufferGL__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../primitives2d/d2SingleText/D2TextBufferGL */ "./src/engine/webgl/primitives2d/d2SingleText/D2TextBufferGL.ts");
/* harmony import */ var _primitives2d_d2SingleText_D2TextProgramGL__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../primitives2d/d2SingleText/D2TextProgramGL */ "./src/engine/webgl/primitives2d/d2SingleText/D2TextProgramGL.ts");





















class PlaneGL extends _common_Plane__WEBPACK_IMPORTED_MODULE_0__.Plane {
  constructor(scene, planeId) {
    super(scene, planeId);
    this._pointManager = new _PrimitiveManager__WEBPACK_IMPORTED_MODULE_1__.PrimitiveManager(new _primitives2d_d2SinglePoint_D2PointInstancedProgramGL__WEBPACK_IMPORTED_MODULE_13__.D2PointInstancedProgramGL(scene.renderer));
    this._lineManager = new _PrimitiveManager__WEBPACK_IMPORTED_MODULE_1__.PrimitiveManager(new _primitives2d_d2SingleLine_D2LineInstancedProgramGL__WEBPACK_IMPORTED_MODULE_8__.D2LineInstancedProgramGL(scene.renderer));
    this._circleManager = new _PrimitiveManager__WEBPACK_IMPORTED_MODULE_1__.PrimitiveManager(new _primitives2d_d2SingleCircle_D2CircleInstancedProgramGL__WEBPACK_IMPORTED_MODULE_11__.D2CircleInstancedProgramGL(scene.renderer));
    this._arcManager = new _PrimitiveManager__WEBPACK_IMPORTED_MODULE_1__.PrimitiveManager(new _primitives2d_d2SingleArc_D2ArcInstancedProgramGL__WEBPACK_IMPORTED_MODULE_16__.D2ArcInstancedProgramGL(scene.renderer));
    this._textManager = new _PrimitiveManager__WEBPACK_IMPORTED_MODULE_1__.PrimitiveManager(new _primitives2d_d2SingleText_D2TextProgramGL__WEBPACK_IMPORTED_MODULE_19__.D2TextProgramGL(scene.renderer));
  }
  addD2PointItems(targetPrimitives) {
    const allKeys = (0,_common_utils_Utils__WEBPACK_IMPORTED_MODULE_4__.getAllKeysFromMap)(targetPrimitives);
    const keyLength = allKeys.length;
    let cursor = 0;
    while (cursor < keyLength) {
      let slicePrimitiveCount = _common_utils_ObjectBlendBuffer__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_PRIMITIVE_CHUNK_SIZE;
      if (cursor < keyLength) {
        slicePrimitiveCount = Math.min(keyLength - cursor, _common_utils_ObjectBlendBuffer__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_PRIMITIVE_CHUNK_SIZE);
      }
      let objectBlendBuffer = this._pointManager.getNextEmptyBufferItem(slicePrimitiveCount);
      if (!objectBlendBuffer) {
        objectBlendBuffer = _primitives2d_d2SingleLine_D2LineBufferGL__WEBPACK_IMPORTED_MODULE_7__.D2LineBufferGL.createObjectBlendBuffer(this.scene);
        this._pointManager.addBuffer(objectBlendBuffer);
      }
      const bitmapIndexIds = objectBlendBuffer.getNextEmptyIndex(slicePrimitiveCount);
      for (let i = 0; i < slicePrimitiveCount; i++) {
        const primitiveItemKeyId = allKeys[cursor + i];
        const primitiveItemValueData = targetPrimitives.get(primitiveItemKeyId);
        const objectItem = new _primitives2d_d2SinglePoint_D2PointObjectGL__WEBPACK_IMPORTED_MODULE_12__.D2PointObjectGL(objectBlendBuffer, bitmapIndexIds[i], {
          cx: (0,_common_math_Calculation__WEBPACK_IMPORTED_MODULE_5__.mm2px)(primitiveItemValueData.centerPoint.x, _common_InsConfig__WEBPACK_IMPORTED_MODULE_3__.InsConfig.DPI[0]),
          cy: (0,_common_math_Calculation__WEBPACK_IMPORTED_MODULE_5__.mm2px)(primitiveItemValueData.centerPoint.y, _common_InsConfig__WEBPACK_IMPORTED_MODULE_3__.InsConfig.DPI[1]),
          size: (0,_common_math_Calculation__WEBPACK_IMPORTED_MODULE_5__.mm2px)(primitiveItemValueData.size, _common_InsConfig__WEBPACK_IMPORTED_MODULE_3__.InsConfig.DPI[0]),
          shape: primitiveItemValueData.shape,
          strokeColorData: primitiveItemValueData.strokeColorData,
          alpha: primitiveItemValueData.alpha
        });
        this._pointManager.primitives.set(primitiveItemKeyId, objectItem);
      }
      cursor += slicePrimitiveCount;
    }
  }
  updateD2PointItems(targetPrimitives) {
    for (let [key, primitiveItemValueData] of targetPrimitives) {
      if (!this._pointManager.primitives.has(key)) {
        continue;
      }
      const primitiveItem = this._pointManager.primitives.get(key);
      primitiveItem.syncStatus({
        cx: (0,_common_math_Calculation__WEBPACK_IMPORTED_MODULE_5__.mm2px)(primitiveItemValueData.centerPoint.x, _common_InsConfig__WEBPACK_IMPORTED_MODULE_3__.InsConfig.DPI[0]),
        cy: (0,_common_math_Calculation__WEBPACK_IMPORTED_MODULE_5__.mm2px)(primitiveItemValueData.centerPoint.y, _common_InsConfig__WEBPACK_IMPORTED_MODULE_3__.InsConfig.DPI[1]),
        size: (0,_common_math_Calculation__WEBPACK_IMPORTED_MODULE_5__.mm2px)(primitiveItemValueData.size, _common_InsConfig__WEBPACK_IMPORTED_MODULE_3__.InsConfig.DPI[0]),
        shape: primitiveItemValueData.shape,
        strokeColorData: primitiveItemValueData.strokeColorData,
        alpha: primitiveItemValueData.alpha
      });
    }
  }
  deleteD2PointItems(targetIds) {
    const arrTargetIds = Array.from(targetIds);
    for (let i = 0; i < arrTargetIds.length; i++) {
      if (!this._pointManager.primitives.has(arrTargetIds[i])) {
        continue;
      }
      const primitiveItem = this._pointManager.primitives.get(arrTargetIds[i]);
      const objectBlendBuffer = primitiveItem.objectBlendBuffer;
      const isEmpty = primitiveItem.remove();
      if (isEmpty) {
        this._pointManager.removeEmptyBufferItem(objectBlendBuffer);
      }
      this._pointManager.primitives.delete(arrTargetIds[i]);
    }
  }
  /****************************************************************************************************/
  /****************************************************************************************************/
  /****************************************************************************************************/
  addD2LineItems(targetPrimitives) {
    const allKeys = (0,_common_utils_Utils__WEBPACK_IMPORTED_MODULE_4__.getAllKeysFromMap)(targetPrimitives);
    const keyLength = allKeys.length;
    let cursor = 0;
    while (cursor < keyLength) {
      let slicePrimitiveCount = _common_utils_ObjectBlendBuffer__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_PRIMITIVE_CHUNK_SIZE;
      if (cursor < keyLength) {
        slicePrimitiveCount = Math.min(keyLength - cursor, _common_utils_ObjectBlendBuffer__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_PRIMITIVE_CHUNK_SIZE);
      }
      let objectBlendBuffer = this._lineManager.getNextEmptyBufferItem(slicePrimitiveCount);
      if (!objectBlendBuffer) {
        objectBlendBuffer = _primitives2d_d2SingleLine_D2LineBufferGL__WEBPACK_IMPORTED_MODULE_7__.D2LineBufferGL.createObjectBlendBuffer(this.scene);
        this._lineManager.addBuffer(objectBlendBuffer);
      }
      const bitmapIndexIds = objectBlendBuffer.getNextEmptyIndex(slicePrimitiveCount);
      for (let i = 0; i < slicePrimitiveCount; i++) {
        const primitiveItemKeyId = allKeys[cursor + i];
        const primitiveItemValueData = targetPrimitives.get(primitiveItemKeyId);
        const objectItem = new _primitives2d_d2SingleLine_D2LineObjectGL__WEBPACK_IMPORTED_MODULE_6__.D2LineObjectGL(objectBlendBuffer, bitmapIndexIds[i], {
          status: primitiveItemValueData.status,
          sx: (0,_common_math_Calculation__WEBPACK_IMPORTED_MODULE_5__.mm2px)(primitiveItemValueData.startPoint.x, _common_InsConfig__WEBPACK_IMPORTED_MODULE_3__.InsConfig.DPI[0]),
          sy: (0,_common_math_Calculation__WEBPACK_IMPORTED_MODULE_5__.mm2px)(primitiveItemValueData.startPoint.y, _common_InsConfig__WEBPACK_IMPORTED_MODULE_3__.InsConfig.DPI[1]),
          ex: (0,_common_math_Calculation__WEBPACK_IMPORTED_MODULE_5__.mm2px)(primitiveItemValueData.endPoint.x, _common_InsConfig__WEBPACK_IMPORTED_MODULE_3__.InsConfig.DPI[0]),
          ey: (0,_common_math_Calculation__WEBPACK_IMPORTED_MODULE_5__.mm2px)(primitiveItemValueData.endPoint.y, _common_InsConfig__WEBPACK_IMPORTED_MODULE_3__.InsConfig.DPI[1]),
          strokeWidth: (0,_common_math_Calculation__WEBPACK_IMPORTED_MODULE_5__.mm2px)(primitiveItemValueData.strokeWidth, _common_InsConfig__WEBPACK_IMPORTED_MODULE_3__.InsConfig.DPI[0]),
          strokeColorData: primitiveItemValueData.strokeColorData,
          alpha: primitiveItemValueData.alpha,
          lineCap: primitiveItemValueData.lineCap,
          isSolid: primitiveItemValueData.isSolid,
          segSize: (0,_common_math_Calculation__WEBPACK_IMPORTED_MODULE_5__.mm2px)(primitiveItemValueData.segSize, _common_InsConfig__WEBPACK_IMPORTED_MODULE_3__.InsConfig.DPI[0]),
          gapSize: (0,_common_math_Calculation__WEBPACK_IMPORTED_MODULE_5__.mm2px)(primitiveItemValueData.gapSize, _common_InsConfig__WEBPACK_IMPORTED_MODULE_3__.InsConfig.DPI[0]),
          isFixedStrokeWidth: primitiveItemValueData.isFixedStrokeWidth
        });
        this._lineManager.primitives.set(primitiveItemKeyId, objectItem);
      }
      cursor += slicePrimitiveCount;
    }
  }
  updateD2LineItems(targetPrimitives) {
    for (let [key, primitiveItemValueData] of targetPrimitives) {
      if (!this._lineManager.primitives.has(key)) {
        continue;
      }
      const primitiveItem = this._lineManager.primitives.get(key);
      primitiveItem.syncStatus({
        status: primitiveItemValueData.status,
        sx: (0,_common_math_Calculation__WEBPACK_IMPORTED_MODULE_5__.mm2px)(primitiveItemValueData.startPoint.x, _common_InsConfig__WEBPACK_IMPORTED_MODULE_3__.InsConfig.DPI[0]),
        sy: (0,_common_math_Calculation__WEBPACK_IMPORTED_MODULE_5__.mm2px)(primitiveItemValueData.startPoint.y, _common_InsConfig__WEBPACK_IMPORTED_MODULE_3__.InsConfig.DPI[1]),
        ex: (0,_common_math_Calculation__WEBPACK_IMPORTED_MODULE_5__.mm2px)(primitiveItemValueData.endPoint.x, _common_InsConfig__WEBPACK_IMPORTED_MODULE_3__.InsConfig.DPI[0]),
        ey: (0,_common_math_Calculation__WEBPACK_IMPORTED_MODULE_5__.mm2px)(primitiveItemValueData.endPoint.y, _common_InsConfig__WEBPACK_IMPORTED_MODULE_3__.InsConfig.DPI[1]),
        strokeWidth: (0,_common_math_Calculation__WEBPACK_IMPORTED_MODULE_5__.mm2px)(primitiveItemValueData.strokeWidth, _common_InsConfig__WEBPACK_IMPORTED_MODULE_3__.InsConfig.DPI[0]),
        strokeColorData: primitiveItemValueData.strokeColorData,
        alpha: primitiveItemValueData.alpha,
        lineCap: primitiveItemValueData.lineCap,
        isSolid: primitiveItemValueData.isSolid,
        segSize: (0,_common_math_Calculation__WEBPACK_IMPORTED_MODULE_5__.mm2px)(primitiveItemValueData.segSize, _common_InsConfig__WEBPACK_IMPORTED_MODULE_3__.InsConfig.DPI[0]),
        gapSize: (0,_common_math_Calculation__WEBPACK_IMPORTED_MODULE_5__.mm2px)(primitiveItemValueData.gapSize, _common_InsConfig__WEBPACK_IMPORTED_MODULE_3__.InsConfig.DPI[0]),
        isFixedStrokeWidth: primitiveItemValueData.isFixedStrokeWidth
      });
    }
  }
  deleteD2LineItems(targetIds) {
    const arrTargetIds = Array.from(targetIds);
    for (let i = 0; i < arrTargetIds.length; i++) {
      if (!this._lineManager.primitives.has(arrTargetIds[i])) {
        continue;
      }
      const primitiveItem = this._lineManager.primitives.get(arrTargetIds[i]);
      const objectBlendBuffer = primitiveItem.objectBlendBuffer;
      const isEmpty = primitiveItem.remove();
      if (isEmpty) {
        this._lineManager.removeEmptyBufferItem(objectBlendBuffer);
      }
      this._lineManager.primitives.delete(arrTargetIds[i]);
    }
  }
  /****************************************************************************************************/
  /****************************************************************************************************/
  /****************************************************************************************************/
  addD2CircleItems(targetPrimitives) {
    const allKeys = (0,_common_utils_Utils__WEBPACK_IMPORTED_MODULE_4__.getAllKeysFromMap)(targetPrimitives);
    const keyLength = allKeys.length;
    let cursor = 0;
    while (cursor < keyLength) {
      let slicePrimitiveCount = _common_utils_ObjectBlendBuffer__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_PRIMITIVE_CHUNK_SIZE;
      if (cursor < keyLength) {
        slicePrimitiveCount = Math.min(keyLength - cursor, _common_utils_ObjectBlendBuffer__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_PRIMITIVE_CHUNK_SIZE);
      }
      let objectBlendBuffer = this._circleManager.getNextEmptyBufferItem(slicePrimitiveCount);
      if (!objectBlendBuffer) {
        objectBlendBuffer = _primitives2d_d2SingleCircle_D2CircleBufferGL__WEBPACK_IMPORTED_MODULE_10__.D2CircleBufferGL.createObjectBlendBuffer(this.scene);
        this._circleManager.addBuffer(objectBlendBuffer);
      }
      const bitmapIndexIds = objectBlendBuffer.getNextEmptyIndex(slicePrimitiveCount);
      for (let i = 0; i < slicePrimitiveCount; i++) {
        const primitiveItemKeyId = allKeys[cursor + i];
        const primitiveItemValueData = targetPrimitives.get(primitiveItemKeyId);
        const objectItem = new _primitives2d_d2SingleCircle_D2CircleObjectGL__WEBPACK_IMPORTED_MODULE_9__.D2CircleObjectGL(objectBlendBuffer, bitmapIndexIds[i], {
          status: primitiveItemValueData.status,
          cx: (0,_common_math_Calculation__WEBPACK_IMPORTED_MODULE_5__.mm2px)(primitiveItemValueData.centerPoint.x, _common_InsConfig__WEBPACK_IMPORTED_MODULE_3__.InsConfig.DPI[0]),
          cy: (0,_common_math_Calculation__WEBPACK_IMPORTED_MODULE_5__.mm2px)(primitiveItemValueData.centerPoint.y, _common_InsConfig__WEBPACK_IMPORTED_MODULE_3__.InsConfig.DPI[1]),
          r: (0,_common_math_Calculation__WEBPACK_IMPORTED_MODULE_5__.mm2px)(primitiveItemValueData.radius, _common_InsConfig__WEBPACK_IMPORTED_MODULE_3__.InsConfig.DPI[0]),
          strokeWidth: (0,_common_math_Calculation__WEBPACK_IMPORTED_MODULE_5__.mm2px)(primitiveItemValueData.strokeWidth, _common_InsConfig__WEBPACK_IMPORTED_MODULE_3__.InsConfig.DPI[0]),
          strokeColorData: primitiveItemValueData.strokeColorData,
          alpha: primitiveItemValueData.alpha,
          lineCap: primitiveItemValueData.lineCap,
          isSolid: primitiveItemValueData.isSolid,
          isFill: primitiveItemValueData.isFill,
          fillColorData: primitiveItemValueData.fillColorData,
          segSize: (0,_common_math_Calculation__WEBPACK_IMPORTED_MODULE_5__.mm2px)(primitiveItemValueData.segSize, _common_InsConfig__WEBPACK_IMPORTED_MODULE_3__.InsConfig.DPI[0]),
          gapSize: (0,_common_math_Calculation__WEBPACK_IMPORTED_MODULE_5__.mm2px)(primitiveItemValueData.gapSize, _common_InsConfig__WEBPACK_IMPORTED_MODULE_3__.InsConfig.DPI[0]),
          isFixedStrokeWidth: primitiveItemValueData.isFixedStrokeWidth
        });
        this._circleManager.primitives.set(primitiveItemKeyId, objectItem);
      }
      cursor += slicePrimitiveCount;
    }
  }
  updateD2CircleItems(targetPrimitives) {
    for (let [key, primitiveItemValueData] of targetPrimitives) {
      if (!this._circleManager.primitives.has(key)) {
        continue;
      }
      const primitiveItem = this._circleManager.primitives.get(key);
      primitiveItem.syncStatus({
        status: primitiveItemValueData.status,
        cx: (0,_common_math_Calculation__WEBPACK_IMPORTED_MODULE_5__.mm2px)(primitiveItemValueData.centerPoint.x, _common_InsConfig__WEBPACK_IMPORTED_MODULE_3__.InsConfig.DPI[0]),
        cy: (0,_common_math_Calculation__WEBPACK_IMPORTED_MODULE_5__.mm2px)(primitiveItemValueData.centerPoint.y, _common_InsConfig__WEBPACK_IMPORTED_MODULE_3__.InsConfig.DPI[1]),
        r: (0,_common_math_Calculation__WEBPACK_IMPORTED_MODULE_5__.mm2px)(primitiveItemValueData.radius, _common_InsConfig__WEBPACK_IMPORTED_MODULE_3__.InsConfig.DPI[0]),
        strokeWidth: (0,_common_math_Calculation__WEBPACK_IMPORTED_MODULE_5__.mm2px)(primitiveItemValueData.strokeWidth, _common_InsConfig__WEBPACK_IMPORTED_MODULE_3__.InsConfig.DPI[0]),
        strokeColorData: primitiveItemValueData.strokeColorData,
        alpha: primitiveItemValueData.alpha,
        lineCap: primitiveItemValueData.lineCap,
        isSolid: primitiveItemValueData.isSolid,
        isFill: primitiveItemValueData.isFill,
        fillColorData: primitiveItemValueData.fillColorData,
        segSize: (0,_common_math_Calculation__WEBPACK_IMPORTED_MODULE_5__.mm2px)(primitiveItemValueData.segSize, _common_InsConfig__WEBPACK_IMPORTED_MODULE_3__.InsConfig.DPI[0]),
        gapSize: (0,_common_math_Calculation__WEBPACK_IMPORTED_MODULE_5__.mm2px)(primitiveItemValueData.gapSize, _common_InsConfig__WEBPACK_IMPORTED_MODULE_3__.InsConfig.DPI[0]),
        isFixedStrokeWidth: primitiveItemValueData.isFixedStrokeWidth
      });
    }
  }
  deleteD2CircleItems(targetIds) {
    const arrTargetIds = Array.from(targetIds);
    for (let i = 0; i < arrTargetIds.length; i++) {
      if (!this._circleManager.primitives.has(arrTargetIds[i])) {
        continue;
      }
      const primitiveItem = this._circleManager.primitives.get(arrTargetIds[i]);
      const objectBlendBuffer = primitiveItem.objectBlendBuffer;
      const isEmpty = primitiveItem.remove();
      if (isEmpty) {
        this._circleManager.removeEmptyBufferItem(objectBlendBuffer);
      }
      this._circleManager.primitives.delete(arrTargetIds[i]);
    }
  }
  /****************************************************************************************************/
  /****************************************************************************************************/
  /****************************************************************************************************/
  addD2ArcItems(targetPrimitives) {
    const allKeys = (0,_common_utils_Utils__WEBPACK_IMPORTED_MODULE_4__.getAllKeysFromMap)(targetPrimitives);
    const keyLength = allKeys.length;
    let cursor = 0;
    while (cursor < keyLength) {
      let slicePrimitiveCount = _common_utils_ObjectBlendBuffer__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_PRIMITIVE_CHUNK_SIZE;
      if (cursor < keyLength) {
        slicePrimitiveCount = Math.min(keyLength - cursor, _common_utils_ObjectBlendBuffer__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_PRIMITIVE_CHUNK_SIZE);
      }
      let objectBlendBuffer = this._arcManager.getNextEmptyBufferItem(slicePrimitiveCount);
      if (!objectBlendBuffer) {
        objectBlendBuffer = _primitives2d_d2SingleArc_D2ArcBufferGL__WEBPACK_IMPORTED_MODULE_15__.D2ArcBufferGL.createObjectBlendBuffer(this.scene);
        this._arcManager.addBuffer(objectBlendBuffer);
      }
      const bitmapIndexIds = objectBlendBuffer.getNextEmptyIndex(slicePrimitiveCount);
      for (let i = 0; i < slicePrimitiveCount; i++) {
        const primitiveItemKeyId = allKeys[cursor + i];
        const primitiveItemValueData = targetPrimitives.get(primitiveItemKeyId);
        const objectItem = new _primitives2d_d2SingleArc_D2ArcObjectGL__WEBPACK_IMPORTED_MODULE_14__.D2ArcObjectGL(objectBlendBuffer, bitmapIndexIds[i], {
          status: primitiveItemValueData.status,
          cx: (0,_common_math_Calculation__WEBPACK_IMPORTED_MODULE_5__.mm2px)(primitiveItemValueData.centerPoint.x, _common_InsConfig__WEBPACK_IMPORTED_MODULE_3__.InsConfig.DPI[0]),
          cy: (0,_common_math_Calculation__WEBPACK_IMPORTED_MODULE_5__.mm2px)(primitiveItemValueData.centerPoint.y, _common_InsConfig__WEBPACK_IMPORTED_MODULE_3__.InsConfig.DPI[1]),
          r: (0,_common_math_Calculation__WEBPACK_IMPORTED_MODULE_5__.mm2px)(primitiveItemValueData.radius, _common_InsConfig__WEBPACK_IMPORTED_MODULE_3__.InsConfig.DPI[0]),
          startAngle: primitiveItemValueData.startAngle,
          endAngle: primitiveItemValueData.endAngle,
          sweep: primitiveItemValueData.sweep,
          strokeWidth: (0,_common_math_Calculation__WEBPACK_IMPORTED_MODULE_5__.mm2px)(primitiveItemValueData.strokeWidth, _common_InsConfig__WEBPACK_IMPORTED_MODULE_3__.InsConfig.DPI[0]),
          strokeColorData: primitiveItemValueData.strokeColorData,
          alpha: primitiveItemValueData.alpha,
          lineCap: primitiveItemValueData.lineCap,
          isSolid: primitiveItemValueData.isSolid,
          isFill: primitiveItemValueData.isFill,
          fillColorData: primitiveItemValueData.fillColorData,
          segSize: (0,_common_math_Calculation__WEBPACK_IMPORTED_MODULE_5__.mm2px)(primitiveItemValueData.segSize, _common_InsConfig__WEBPACK_IMPORTED_MODULE_3__.InsConfig.DPI[0]),
          gapSize: (0,_common_math_Calculation__WEBPACK_IMPORTED_MODULE_5__.mm2px)(primitiveItemValueData.gapSize, _common_InsConfig__WEBPACK_IMPORTED_MODULE_3__.InsConfig.DPI[0]),
          isFixedStrokeWidth: primitiveItemValueData.isFixedStrokeWidth
        });
        this._arcManager.primitives.set(primitiveItemKeyId, objectItem);
      }
      cursor += slicePrimitiveCount;
    }
  }
  updateD2ArcItems(targetPrimitives) {
    for (let [key, primitiveItemValueData] of targetPrimitives) {
      if (!this._arcManager.primitives.has(key)) {
        continue;
      }
      const primitiveItem = this._arcManager.primitives.get(key);
      primitiveItem.syncStatus({
        status: primitiveItemValueData.status,
        cx: (0,_common_math_Calculation__WEBPACK_IMPORTED_MODULE_5__.mm2px)(primitiveItemValueData.centerPoint.x, _common_InsConfig__WEBPACK_IMPORTED_MODULE_3__.InsConfig.DPI[0]),
        cy: (0,_common_math_Calculation__WEBPACK_IMPORTED_MODULE_5__.mm2px)(primitiveItemValueData.centerPoint.y, _common_InsConfig__WEBPACK_IMPORTED_MODULE_3__.InsConfig.DPI[1]),
        r: (0,_common_math_Calculation__WEBPACK_IMPORTED_MODULE_5__.mm2px)(primitiveItemValueData.radius, _common_InsConfig__WEBPACK_IMPORTED_MODULE_3__.InsConfig.DPI[0]),
        startAngle: primitiveItemValueData.startAngle,
        endAngle: primitiveItemValueData.endAngle,
        sweep: primitiveItemValueData.sweep,
        strokeWidth: (0,_common_math_Calculation__WEBPACK_IMPORTED_MODULE_5__.mm2px)(primitiveItemValueData.strokeWidth, _common_InsConfig__WEBPACK_IMPORTED_MODULE_3__.InsConfig.DPI[0]),
        strokeColorData: primitiveItemValueData.strokeColorData,
        alpha: primitiveItemValueData.alpha,
        lineCap: primitiveItemValueData.lineCap,
        isSolid: primitiveItemValueData.isSolid,
        isFill: primitiveItemValueData.isFill,
        fillColorData: primitiveItemValueData.fillColorData,
        segSize: (0,_common_math_Calculation__WEBPACK_IMPORTED_MODULE_5__.mm2px)(primitiveItemValueData.segSize, _common_InsConfig__WEBPACK_IMPORTED_MODULE_3__.InsConfig.DPI[0]),
        gapSize: (0,_common_math_Calculation__WEBPACK_IMPORTED_MODULE_5__.mm2px)(primitiveItemValueData.gapSize, _common_InsConfig__WEBPACK_IMPORTED_MODULE_3__.InsConfig.DPI[0]),
        isFixedStrokeWidth: primitiveItemValueData.isFixedStrokeWidth
      });
    }
  }
  deleteD2ArcItems(targetIds) {
    const arrTargetIds = Array.from(targetIds);
    for (let i = 0; i < arrTargetIds.length; i++) {
      if (!this._arcManager.primitives.has(arrTargetIds[i])) {
        continue;
      }
      const primitiveItem = this._arcManager.primitives.get(arrTargetIds[i]);
      const objectBlendBuffer = primitiveItem.objectBlendBuffer;
      const isEmpty = primitiveItem.remove();
      if (isEmpty) {
        this._arcManager.removeEmptyBufferItem(objectBlendBuffer);
      }
      this._arcManager.primitives.delete(arrTargetIds[i]);
    }
  }
  /****************************************************************************************************/
  /****************************************************************************************************/
  /****************************************************************************************************/
  addD2TextItems(targetPrimitives) {
    const allKeys = (0,_common_utils_Utils__WEBPACK_IMPORTED_MODULE_4__.getAllKeysFromMap)(targetPrimitives);
    const keyLength = allKeys.length;
    let cursor = 0;
    while (cursor < keyLength) {
      let slicePrimitiveCount = 1;
      let objectBlendBuffer = _primitives2d_d2SingleText_D2TextBufferGL__WEBPACK_IMPORTED_MODULE_18__.D2TextBufferGL.createObjectBlendBuffer(this.scene);
      this._textManager.addBuffer(objectBlendBuffer);
      const bitmapIndexIds = objectBlendBuffer.getNextEmptyIndex(slicePrimitiveCount);
      const primitiveItemKeyId = allKeys[cursor];
      const primitiveItemValueData = targetPrimitives.get(primitiveItemKeyId);
      const objectItem = new _primitives2d_d2SingleText_D2TextObjectGL__WEBPACK_IMPORTED_MODULE_17__.D2TextObjectGL(objectBlendBuffer, bitmapIndexIds[0], {
        status: primitiveItemValueData.status,
        refreshToken: primitiveItemValueData.refreshToken,
        strokeColorData: primitiveItemValueData.strokeColorData,
        alpha: primitiveItemValueData.alpha,
        vertexData: primitiveItemValueData.vertexData
      });
      this._textManager.primitives.set(primitiveItemKeyId, objectItem);
      cursor += slicePrimitiveCount;
    }
  }
  updateD2TextItems(targetPrimitives) {
    for (let [key, primitiveItemValueData] of targetPrimitives) {
      if (!this._textManager.primitives.has(key)) {
        continue;
      }
      const primitiveItem = this._textManager.primitives.get(key);
      primitiveItem.syncStatus({
        status: primitiveItemValueData.status,
        refreshToken: primitiveItemValueData.refreshToken,
        strokeColorData: primitiveItemValueData.strokeColorData,
        alpha: primitiveItemValueData.alpha,
        vertexData: primitiveItemValueData.vertexData
      });
    }
  }
  deleteD2TextItems(targetIds) {
    const arrTargetIds = Array.from(targetIds);
    for (let i = 0; i < arrTargetIds.length; i++) {
      if (!this._textManager.primitives.has(arrTargetIds[i])) {
        continue;
      }
      const primitiveItem = this._textManager.primitives.get(arrTargetIds[i]);
      const objectBlendBuffer = primitiveItem.objectBlendBuffer;
      const isEmpty = primitiveItem.remove();
      if (isEmpty) {
        this._textManager.removeEmptyBufferItem(objectBlendBuffer);
      }
      this._textManager.primitives.delete(arrTargetIds[i]);
    }
  }
  render() {
    this._pointManager.program.setEnableColor();
    this._lineManager.program.setEnableColor();
    this._circleManager.program.setEnableColor();
    this._arcManager.program.setEnableColor();
    this._textManager.program.setEnableColor();
    this._pointManager.render(this.scene, this);
    this._lineManager.render(this.scene, this);
    this._circleManager.render(this.scene, this);
    this._arcManager.render(this.scene, this);
    this._textManager.render(this.scene, this);
  }
  clear() {
    this._pointManager.clear();
    this._lineManager.clear();
    this._circleManager.clear();
    this._arcManager.clear();
    this._textManager.clear();
  }
}


/***/ }),

/***/ "./src/engine/webgl/plane/PrimitiveManager.ts":
/*!****************************************************!*\
  !*** ./src/engine/webgl/plane/PrimitiveManager.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PrimitiveManager: () => (/* binding */ PrimitiveManager)
/* harmony export */ });
/* harmony import */ var _common_utils_Utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../common/utils/Utils */ "./src/engine/common/utils/Utils.ts");


class PrimitiveManager {
  constructor(program) {
    this._program = program;
    this._objectBlendBuffers = [];
    this._primitives = /* @__PURE__ */ new Map();
  }
  get primitives() {
    return this._primitives;
  }
  get program() {
    return this._program;
  }
  isEmpty() {
    let isEmpty = true;
    for (let i = 0; i < this._objectBlendBuffers.length; i++) {
      if (!this._objectBlendBuffers[i].isEmpty()) {
        isEmpty = false;
      }
    }
    return isEmpty;
  }
  addBuffer(objectBlendBuffer) {
    this._objectBlendBuffers.push(objectBlendBuffer);
  }
  /**
   * 在绘制基础几何形状时, 将需要使用到的各类参数 Buffers(BaseBufferGL 实例)统一保存到 ObjectBlendBuffer 实例中
   * 再将 ObjectBlendBuffer 实例挂载到继承自本类(PrimitiveManager)的各项子类实例 A 的 this._objectBlendBuffers 属性中
   *
   * 对于任意的一个 ObjectBlendBuffer 实例, 其对应保存的 Buffers(BaseBufferGL 实例)在被创建之初就已申请了适当长度的 ArrayBuffer
   * 因此对于后续新创建的基础几何形状数据, 应首先尝试获取可能存在空闲片段的 Buffer(BaseBufferGL 实例)
   * 并返回该组 Buffers(BaseBufferGL 实例) 所在的 ObjectBlendBuffer 实例
   */
  getNextEmptyBufferItem(count = 1) {
    for (let i = 0; i < this._objectBlendBuffers.length; i++) {
      if (this._objectBlendBuffers[i].hasNextEmpty(count)) {
        return this._objectBlendBuffers[i];
      }
    }
    return null;
  }
  removeAllEmptyBuffers() {
    for (let i = 0; i < this._objectBlendBuffers.length; i++) {
      const objectBlendBuffer = this._objectBlendBuffers[i];
      if (objectBlendBuffer.isEmpty()) {
        objectBlendBuffer.drop();
        (0,_common_utils_Utils__WEBPACK_IMPORTED_MODULE_0__.removeItemFromList)(this._objectBlendBuffers, objectBlendBuffer);
      }
    }
  }
  removeEmptyBufferItem(objectBlendBuffer) {
    if (objectBlendBuffer.isEmpty()) {
      objectBlendBuffer.drop();
      (0,_common_utils_Utils__WEBPACK_IMPORTED_MODULE_0__.removeItemFromList)(this._objectBlendBuffers, objectBlendBuffer);
    }
  }
  render(scene, plane) {
    for (let i = 0; i < this._objectBlendBuffers.length; i++) {
      const objectBlendBuffer = this._objectBlendBuffers[i];
      objectBlendBuffer.bindBufferData();
      this._program.render(scene, plane, objectBlendBuffer);
    }
  }
  clear() {
    for (let i = 0; i < this._objectBlendBuffers.length; i++) {
      this._objectBlendBuffers[i].drop();
    }
    this._objectBlendBuffers.length = 0;
  }
}


/***/ }),

/***/ "./src/engine/webgl/primitives2d/InstancedProgramGL.ts":
/*!*************************************************************!*\
  !*** ./src/engine/webgl/primitives2d/InstancedProgramGL.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   InstancedProgramGL: () => (/* binding */ InstancedProgramGL)
/* harmony export */ });
/* harmony import */ var _ProgramGL__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ProgramGL */ "./src/engine/webgl/primitives2d/ProgramGL.ts");


class InstancedProgramGL extends _ProgramGL__WEBPACK_IMPORTED_MODULE_0__.ProgramGL {
  constructor(renderer, vs, fs, indexData) {
    super(renderer, vs, fs);
    this._instancedArrays = this.renderer.getInstancedArrays();
    this._a_indexLoction = this.renderer.getWebGLAttributeLocation(this.webGLProgram, "a_index");
    this._indexWebGLBuffer = this.renderer.gl.createBuffer();
    this.renderer.gl.bindBuffer(this.renderer.gl.ARRAY_BUFFER, this._indexWebGLBuffer);
    this.renderer.gl.bufferData(this.renderer.gl.ARRAY_BUFFER, indexData, this.renderer.gl.STATIC_DRAW);
    this.renderer.gl.vertexAttribPointer(this._a_indexLoction, 1, this.renderer.gl.FLOAT, false, 0, 0);
  }
  get instancedArrays() {
    return this._instancedArrays;
  }
  // protected getWebGLAttributeLocation(name: string): number {
  // 	return super.getWebGLAttributeLocation(name)
  // }
  // protected getWebGLUniformLocation(name: string): WebGLUniformLocation {
  // 	return super.getWebGLUniformLocation(name)
  // }
  setEnable() {
    const gl = this.renderer.gl;
    gl.bindBuffer(gl.ARRAY_BUFFER, this._indexWebGLBuffer);
    gl.vertexAttribPointer(this._a_indexLoction, 1, gl.FLOAT, false, 0, 0);
    gl.enableVertexAttribArray(this._a_indexLoction);
    for (let loc of this.attributeLocaltions) {
      this._instancedArrays.vertexAttribDivisorANGLE(loc, 1);
    }
    super.setEnable();
  }
  setDisable() {
    const gl = this.renderer.gl;
    gl.disableVertexAttribArray(this._a_indexLoction);
    for (let loc of this.attributeLocaltions) {
      this._instancedArrays.vertexAttribDivisorANGLE(loc, 0);
    }
    super.setDisable();
  }
  setEnableLoction(loc) {
    super.setEnableLoction(loc);
  }
  setDisableLoction(loc) {
    super.setDisableLoction(loc);
  }
}


/***/ }),

/***/ "./src/engine/webgl/primitives2d/ObjectGL.ts":
/*!***************************************************!*\
  !*** ./src/engine/webgl/primitives2d/ObjectGL.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ObjectGL: () => (/* binding */ ObjectGL)
/* harmony export */ });
/* harmony import */ var _common_PrimitiveObject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../common/PrimitiveObject */ "./src/engine/common/PrimitiveObject.ts");


class ObjectGL extends _common_PrimitiveObject__WEBPACK_IMPORTED_MODULE_0__.PrimitiveObject {
  constructor(objectBlendBuffer) {
    super();
    this._objectBlendBuffer = objectBlendBuffer;
  }
  get objectBlendBuffer() {
    return this._objectBlendBuffer;
  }
  set objectBlendBuffer(value) {
    this._objectBlendBuffer = value;
  }
}


/***/ }),

/***/ "./src/engine/webgl/primitives2d/PrimitiveProgram.ts":
/*!***********************************************************!*\
  !*** ./src/engine/webgl/primitives2d/PrimitiveProgram.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PrimitiveProgram: () => (/* binding */ PrimitiveProgram)
/* harmony export */ });

class PrimitiveProgram {
}


/***/ }),

/***/ "./src/engine/webgl/primitives2d/ProgramGL.ts":
/*!****************************************************!*\
  !*** ./src/engine/webgl/primitives2d/ProgramGL.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ProgramGL: () => (/* binding */ ProgramGL)
/* harmony export */ });
/* harmony import */ var _PrimitiveProgram__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PrimitiveProgram */ "./src/engine/webgl/primitives2d/PrimitiveProgram.ts");


class ProgramGL extends _PrimitiveProgram__WEBPACK_IMPORTED_MODULE_0__.PrimitiveProgram {
  constructor(renderer, vs, fs) {
    super();
    this._renderer = renderer;
    this._webGLProgram = this._renderer.createProgram(vs, fs);
    this._attributeLocaltions = [];
    this._disabledAttributeLocaltions = /* @__PURE__ */ new Set();
  }
  get renderer() {
    return this._renderer;
  }
  get webGLProgram() {
    return this._webGLProgram;
  }
  get attributeLocaltions() {
    return this._attributeLocaltions;
  }
  get disabledAttributeLocaltions() {
    return this._disabledAttributeLocaltions;
  }
  getWebGLAttributeLocation(name) {
    const loc = this._renderer.getWebGLAttributeLocation(this._webGLProgram, name);
    this.attributeLocaltions.push(loc);
    return loc;
  }
  getWebGLUniformLocation(name) {
    const loc = this._renderer.getWebGLUniformLocation(this._webGLProgram, name);
    return loc;
  }
  setEnable() {
    const gl = this._renderer.gl;
    for (let loc of this.attributeLocaltions) {
      gl.enableVertexAttribArray(loc);
    }
    for (let loc of this._disabledAttributeLocaltions) {
      gl.enableVertexAttribArray(loc);
      gl.vertexAttrib4f(loc, 0, 0, 0, 1);
    }
  }
  setDisable() {
    const gl = this._renderer.gl;
    for (let loc of this.attributeLocaltions) {
      gl.disableVertexAttribArray(loc);
    }
  }
  setEnableLoction(loc) {
    this._disabledAttributeLocaltions.delete(loc);
  }
  setDisableLoction(loc) {
    this._disabledAttributeLocaltions.add(loc);
  }
}


/***/ }),

/***/ "./src/engine/webgl/primitives2d/d2AnyTest/D2AnyTestProgramGL.ts":
/*!***********************************************************************!*\
  !*** ./src/engine/webgl/primitives2d/d2AnyTest/D2AnyTestProgramGL.ts ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2AnyTestProgramGL: () => (/* binding */ D2AnyTestProgramGL)
/* harmony export */ });
/* harmony import */ var _ProgramGL__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ProgramGL */ "./src/engine/webgl/primitives2d/ProgramGL.ts");
/* harmony import */ var _common_geometry_vector_Vector3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../common/geometry/vector/Vector3 */ "./src/engine/common/geometry/vector/Vector3.ts");
/* harmony import */ var _D2AnyTestShaderGL__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./D2AnyTestShaderGL */ "./src/engine/webgl/primitives2d/d2AnyTest/D2AnyTestShaderGL.ts");




const VERTEX_SIZE = 3;
const COLOR_SIZE = 4;
class D2AnyTestProgramGL extends _ProgramGL__WEBPACK_IMPORTED_MODULE_0__.ProgramGL {
  constructor(renderer) {
    super(renderer, _D2AnyTestShaderGL__WEBPACK_IMPORTED_MODULE_2__.D2AnyTestShaderGL.createVS(), _D2AnyTestShaderGL__WEBPACK_IMPORTED_MODULE_2__.D2AnyTestShaderGL.createFS());
    this._a_objPosition = this.getWebGLAttributeLocation(`a_objPosition`);
    this._a_color = this.getWebGLAttributeLocation(`a_color`);
    this._origin = _common_geometry_vector_Vector3__WEBPACK_IMPORTED_MODULE_1__.Vector3.ORIGIN;
    this._posData = [];
    this._posBuffer = renderer.createWebGLArrayBufferByArrayBuffer(new Float32Array(this._posData), renderer.gl.STATIC_DRAW);
    this._colorData = [];
    this._coloBuffer = renderer.createWebGLArrayBufferByArrayBuffer(new Float32Array(this._colorData), renderer.gl.STATIC_DRAW);
    this.flush();
  }
  setEnableColor() {
  }
  setDisableColor() {
  }
  updateCanvasRect(canvasWidth, canvasHeight) {
    this._viewWidth = canvasWidth;
    this._viewHeight = canvasHeight;
    this.flush();
  }
  render(scene) {
    const gl = this.renderer.gl;
    gl.useProgram(this.webGLProgram);
    gl.enableVertexAttribArray(this._a_objPosition);
    gl.enableVertexAttribArray(this._a_color);
    this.setUniformData(scene);
    gl.bindBuffer(gl.ARRAY_BUFFER, this._posBuffer.webGLBuffer);
    gl.vertexAttribPointer(this._a_objPosition, VERTEX_SIZE, gl.FLOAT, false, 0, 0);
    gl.bindBuffer(gl.ARRAY_BUFFER, this._coloBuffer.webGLBuffer);
    gl.vertexAttribPointer(this._a_color, COLOR_SIZE, gl.FLOAT, false, 0, 0);
    gl.drawArrays(gl.TRIANGLES, 0, this._posData.length / VERTEX_SIZE);
    gl.disableVertexAttribArray(this._a_objPosition);
  }
  flush() {
    const gl = this.renderer.gl;
    gl.bindBuffer(gl.ARRAY_BUFFER, this._posBuffer.webGLBuffer);
    this._posData = [
      -0.5,
      0.5,
      1,
      -0.5,
      -0.5,
      1,
      0.5,
      -0.5,
      1,
      -0.5,
      0.5,
      1,
      0.5,
      -0.5,
      1,
      0.5,
      0.5,
      1
    ];
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(this._posData), gl.STATIC_DRAW);
    gl.bindBuffer(gl.ARRAY_BUFFER, null);
    gl.bindBuffer(gl.ARRAY_BUFFER, this._coloBuffer.webGLBuffer);
    this._colorData = [
      0.1,
      0,
      0,
      1,
      0.4,
      0,
      0,
      1,
      0.7,
      0,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1
    ];
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(this._colorData), gl.STATIC_DRAW);
    gl.bindBuffer(gl.ARRAY_BUFFER, null);
  }
  setUniformData(scene) {
    const camera = scene.camera;
    const gl = this.renderer.gl;
    gl.uniformMatrix4fv(this._u_matrix, false, new Float32Array(camera.getViewMatrix4().data));
  }
}


/***/ }),

/***/ "./src/engine/webgl/primitives2d/d2AnyTest/D2AnyTestShaderGL.ts":
/*!**********************************************************************!*\
  !*** ./src/engine/webgl/primitives2d/d2AnyTest/D2AnyTestShaderGL.ts ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2AnyTestShaderGL: () => (/* binding */ D2AnyTestShaderGL)
/* harmony export */ });

class D2AnyTestShaderGL {
  static createVS() {
    return `
            precision mediump float;
            attribute vec3 a_objPosition;
            attribute vec4 a_color;
            uniform mat4 u_matrix;
            varying vec3 v_objPosition;
            varying vec4 v_color;

            bool nearZero(float n) {
                return abs(n) <= 0.0000001;
            }

            void main() {
                v_objPosition = a_objPosition;
                v_color = a_color;
                gl_Position = vec4(a_objPosition.xyz, 1.0);
            }
        `;
  }
  static createFS() {
    return `
            precision mediump float;
            varying vec3 v_objPosition;
            varying vec4 v_color;

            bool isLess(float x, float edge) {
                return step(x, edge) == 1.0;
            }

            void main () {
                vec4 color = v_color;
                color.x = smoothstep(0.4, 0.4, color.x);
                gl_FragColor = color;
            }
        `;
  }
}


/***/ }),

/***/ "./src/engine/webgl/primitives2d/d2GridAxis/D2AxisProgramGL.ts":
/*!*********************************************************************!*\
  !*** ./src/engine/webgl/primitives2d/d2GridAxis/D2AxisProgramGL.ts ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2AxisProgramGL: () => (/* binding */ D2AxisProgramGL)
/* harmony export */ });
/* harmony import */ var _ProgramGL__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ProgramGL */ "./src/engine/webgl/primitives2d/ProgramGL.ts");
/* harmony import */ var _D2AxisShaderGL__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./D2AxisShaderGL */ "./src/engine/webgl/primitives2d/d2GridAxis/D2AxisShaderGL.ts");
/* harmony import */ var _common_geometry_vector_Vector3__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../common/geometry/vector/Vector3 */ "./src/engine/common/geometry/vector/Vector3.ts");
/* harmony import */ var _common_AxisParam__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../common/AxisParam */ "./src/engine/common/AxisParam.ts");
/* harmony import */ var _common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../common/geometry/vector/Vector2 */ "./src/engine/common/geometry/vector/Vector2.ts");
/* harmony import */ var _common_geometry_matrix_CanvasMatrix4__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../common/geometry/matrix/CanvasMatrix4 */ "./src/engine/common/geometry/matrix/CanvasMatrix4.ts");







const VERTEX_SIZE = 3;
class D2AxisProgramGL extends _ProgramGL__WEBPACK_IMPORTED_MODULE_0__.ProgramGL {
  constructor(renderer) {
    super(renderer, _D2AxisShaderGL__WEBPACK_IMPORTED_MODULE_1__.D2AxisShaderGL.createVS(), _D2AxisShaderGL__WEBPACK_IMPORTED_MODULE_1__.D2AxisShaderGL.createFS());
    this._axisParamInstance = _common_AxisParam__WEBPACK_IMPORTED_MODULE_3__.AxisParam.getInstance();
    this._a_objPosition = this.getWebGLAttributeLocation(`a_objPosition`);
    this._u_antialias = this.getWebGLUniformLocation(`u_antialias`);
    this._u_matrix = this.getWebGLUniformLocation(`u_matrix`);
    this._u_gridSize = this.getWebGLUniformLocation(`u_gridSize`);
    this._u_moveCount = this.getWebGLUniformLocation(`u_moveCount`);
    this._u_origin = this.getWebGLUniformLocation(`u_origin`);
    this._u_gridColor = this.getWebGLUniformLocation(`u_gridColor`);
    this._u_multiGridColor = this.getWebGLUniformLocation(`u_multiGridColor`);
    this._u_gridDotColor = this.getWebGLUniformLocation(`u_gridDotColor`);
    this._u_axisColor = this.getWebGLUniformLocation(`u_axisColor`);
    this._u_multiRatio = this.getWebGLUniformLocation(`u_multiRatio`);
    this._u_drawType = this.getWebGLUniformLocation(`u_drawType`);
    this._u_isShowGrid = this.getWebGLUniformLocation(`u_isShowGrid`);
    this._u_isShowMultiGrid = this.getWebGLUniformLocation(`u_isShowMultiGrid`);
    this._u_isShowGridDot = this.getWebGLUniformLocation(`u_isShowGridDot`);
    this._u_isShowAxis = this.getWebGLUniformLocation(`u_isShowAxis`);
    this._viewWidth = 0;
    this._viewHeight = 0;
    this._ratio = 1;
    this._origin = _common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_4__.Vector2.ORIGIN;
    this._linePosData = [];
    this._dotPosData = [];
    this._linePosBuffer = renderer.createWebGLArrayBufferByArrayBuffer(new Float32Array(this._linePosData), renderer.gl.STATIC_DRAW);
    this._dotPosBuffer = renderer.createWebGLArrayBufferByArrayBuffer(new Float32Array(this._dotPosData), renderer.gl.STATIC_DRAW);
    this.flush();
  }
  setEnableColor() {
  }
  setDisableColor() {
  }
  updateCanvasRect(canvasWidth, canvasHeight) {
    this._viewWidth = canvasWidth;
    this._viewHeight = canvasHeight;
    this.flush();
  }
  render(scene) {
    const gl = this.renderer.gl;
    gl.useProgram(this.webGLProgram);
    gl.enableVertexAttribArray(this._a_objPosition);
    this.setUniformData(scene);
    this.drawLines();
    this.drawDots();
    gl.disableVertexAttribArray(this._a_objPosition);
  }
  flush() {
    const gl = this.renderer.gl;
    gl.bindBuffer(gl.ARRAY_BUFFER, this._linePosBuffer.webGLBuffer);
    this._linePosData = _D2AxisShaderGL__WEBPACK_IMPORTED_MODULE_1__.D2AxisShaderGL.createLinePositionsData(this._viewWidth, this._viewHeight);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(this._linePosData), gl.STATIC_DRAW);
    gl.bindBuffer(gl.ARRAY_BUFFER, null);
    gl.bindBuffer(gl.ARRAY_BUFFER, this._dotPosBuffer.webGLBuffer);
    this._dotPosData = _D2AxisShaderGL__WEBPACK_IMPORTED_MODULE_1__.D2AxisShaderGL.createDotPositionsData(this._viewWidth, this._viewHeight);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(this._dotPosData), gl.STATIC_DRAW);
    gl.bindBuffer(gl.ARRAY_BUFFER, null);
  }
  calcTransform(scene) {
    const axisParamOrigin = this._axisParamInstance.origin;
    const camera = scene.camera;
    const camraProjectionMatrix4 = camera.getRectProjectionMatrix4();
    const minPixel = 20;
    const maxPixel = 30;
    const scale = camera.getZoomRatio();
    const min = Math.min(this._axisParamInstance.axisStepX, this._axisParamInstance.axisStepY);
    const pixel = min * scale * this._ratio;
    if (pixel < minPixel) {
      this._ratio = maxPixel / (min * scale);
    }
    if (this._ratio > 1 && pixel > maxPixel) {
      this._ratio = minPixel / (min * scale);
    }
    if (this._ratio < 1) {
      this._ratio = 1;
    }
    const baseMatrix4 = _common_geometry_matrix_CanvasMatrix4__WEBPACK_IMPORTED_MODULE_5__.CanvasMatrix4.setScale(this._ratio, this._ratio, 1).multiply4(_common_geometry_matrix_CanvasMatrix4__WEBPACK_IMPORTED_MODULE_5__.CanvasMatrix4.setTranslate(new _common_geometry_vector_Vector3__WEBPACK_IMPORTED_MODULE_2__.Vector3(axisParamOrigin.x, axisParamOrigin.y, 0))).multiply4(camera.getLookMatrix4().multiply4(camera.getZoomMatrix4()));
    const scaleRatio = this._ratio * scale;
    const baseOrigin = _common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_4__.Vector2.ORIGIN.multiplyMatrix4(baseMatrix4);
    const distX = baseOrigin.x - baseOrigin.x % (this._axisParamInstance.axisStepX * scaleRatio);
    const distY = baseOrigin.y - baseOrigin.y % (this._axisParamInstance.axisStepY * scaleRatio);
    this._origin = baseOrigin.multiplyMatrix4(camraProjectionMatrix4);
    const transform = baseMatrix4.multiply4(_common_geometry_matrix_CanvasMatrix4__WEBPACK_IMPORTED_MODULE_5__.CanvasMatrix4.setTranslate(new _common_geometry_vector_Vector3__WEBPACK_IMPORTED_MODULE_2__.Vector3(-distX, -distY, 0))).multiply4(camraProjectionMatrix4);
    const axisStepTransform = new _common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_4__.Vector2(this._axisParamInstance.axisStepX, this._axisParamInstance.axisStepY).multiplyMatrix4(
      _common_geometry_matrix_CanvasMatrix4__WEBPACK_IMPORTED_MODULE_5__.CanvasMatrix4.setScale(this._ratio, this._ratio, 1).multiply4(_common_geometry_matrix_CanvasMatrix4__WEBPACK_IMPORTED_MODULE_5__.CanvasMatrix4.setScale(scale, scale, 1)).multiply4(camraProjectionMatrix4)
    );
    return {
      matrix: transform,
      moveCountX: this._origin.x >= 0 ? Math.floor(this._origin.x / axisStepTransform.x) : Math.ceil(this._origin.x / axisStepTransform.x),
      moveCountY: this._origin.y >= 0 ? Math.floor(this._origin.y / axisStepTransform.y) : Math.ceil(this._origin.y / axisStepTransform.y)
    };
  }
  setUniformData(scene) {
    const gl = this.renderer.gl;
    const { matrix, moveCountX, moveCountY } = this.calcTransform(scene);
    gl.uniform2fv(
      this._u_antialias,
      new Float32Array([this._axisParamInstance.isAntialias ? 1.5 : 0.5, this._axisParamInstance.isAntialias ? 0 : 1])
    );
    gl.uniform2fv(this._u_gridSize, new Float32Array([this._axisParamInstance.axisStepX, this._axisParamInstance.axisStepY]));
    gl.uniform2fv(this._u_moveCount, new Float32Array([moveCountX, moveCountY]));
    gl.uniform2fv(this._u_origin, new Float32Array([this._origin.x, this._origin.y]));
    gl.uniform4fv(
      this._u_gridColor,
      new Float32Array([
        this._axisParamInstance.gridColor.r,
        this._axisParamInstance.gridColor.g,
        this._axisParamInstance.gridColor.b,
        this._axisParamInstance.gridAlpha
      ])
    );
    gl.uniform4fv(
      this._u_multiGridColor,
      new Float32Array([
        this._axisParamInstance.multiGridColor.r,
        this._axisParamInstance.multiGridColor.g,
        this._axisParamInstance.multiGridColor.b,
        this._axisParamInstance.multiGridAlpha
      ])
    );
    gl.uniform4fv(
      this._u_gridDotColor,
      new Float32Array([
        this._axisParamInstance.gridDotColor.r,
        this._axisParamInstance.gridDotColor.g,
        this._axisParamInstance.gridDotColor.b,
        this._axisParamInstance.gridDotAlpha
      ])
    );
    gl.uniform4fv(
      this._u_axisColor,
      new Float32Array([
        this._axisParamInstance.axisColor.r,
        this._axisParamInstance.axisColor.g,
        this._axisParamInstance.axisColor.b,
        this._axisParamInstance.axisAlpha
      ])
    );
    gl.uniform1f(this._u_multiRatio, this._axisParamInstance.multiRatio);
    gl.uniform1f(this._u_isShowGrid, this._axisParamInstance.isShowGrid ? 1 : 0);
    gl.uniform1f(this._u_isShowMultiGrid, this._axisParamInstance.isShowMultiGrid ? 1 : 0);
    gl.uniform1f(this._u_isShowAxis, this._axisParamInstance.isShowAxis ? 1 : 0);
    gl.uniform1f(this._u_isShowGridDot, this._axisParamInstance.isShowGridDot ? 1 : 0);
    gl.uniformMatrix4fv(this._u_matrix, false, new Float32Array(matrix.data));
  }
  drawLines() {
    const gl = this.renderer.gl;
    gl.uniform1f(this._u_drawType, 1);
    gl.bindBuffer(gl.ARRAY_BUFFER, this._linePosBuffer.webGLBuffer);
    gl.vertexAttribPointer(this._a_objPosition, VERTEX_SIZE, gl.FLOAT, false, 0, 0);
    gl.drawArrays(gl.LINES, 0, this._linePosData.length / VERTEX_SIZE);
  }
  drawDots() {
    const gl = this.renderer.gl;
    if (!this._axisParamInstance.isShowGridDot) {
      return;
    }
    gl.uniform1f(this._u_drawType, 2);
    gl.bindBuffer(gl.ARRAY_BUFFER, this._dotPosBuffer.webGLBuffer);
    gl.vertexAttribPointer(this._a_objPosition, VERTEX_SIZE, gl.FLOAT, false, 0, 0);
    gl.drawArrays(gl.POINTS, 0, this._dotPosData.length / VERTEX_SIZE);
  }
}


/***/ }),

/***/ "./src/engine/webgl/primitives2d/d2GridAxis/D2AxisShaderGL.ts":
/*!********************************************************************!*\
  !*** ./src/engine/webgl/primitives2d/d2GridAxis/D2AxisShaderGL.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2AxisShaderGL: () => (/* binding */ D2AxisShaderGL)
/* harmony export */ });
/* harmony import */ var _common_AxisParam__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../common/AxisParam */ "./src/engine/common/AxisParam.ts");
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Utils */ "./src/engine/webgl/primitives2d/d2GridAxis/Utils.ts");



class D2AxisShaderGL {
  static createVS() {
    return `
            precision mediump float;
            attribute vec3 a_objPosition;
            uniform vec2 u_antialias;
            uniform mat4 u_matrix;
            uniform vec2 u_gridSize;
            uniform vec2 u_moveCount;
            uniform vec2 u_origin;
            uniform vec4 u_gridColor;
            uniform vec4 u_multiGridColor;
            uniform vec4 u_gridDotColor;
            uniform vec4 u_axisColor;
            uniform float u_multiRatio;
            uniform float u_drawType;
            uniform float u_isShowGrid;
            uniform float u_isShowMultiGrid;
            uniform float u_isShowGridDot;
            uniform float u_isShowAxis;
            varying vec4 v_color;

            bool nearZero(float n) {
                return abs(n) <= 0.0000001;
            }

            void main() {
                if (u_antialias.x == 0.5) {
                    gl_PointSize = 1.0 * (1.0 - u_antialias.y) + 1.5 * u_antialias.y;
                } else {
                    gl_PointSize = 2.0 * u_antialias.x;
                }
                vec4 objPosition = u_matrix * vec4(a_objPosition, 1.0);
                if (u_drawType == 2.0) {
                    if (u_isShowGridDot == 1.0) {
                        // #IF: \u4EC5\u663E\u793A\u7F51\u70B9
                        v_color = u_gridDotColor;
                        gl_Position = objPosition;
                    }
                    return;
                }
                vec4 origin = u_matrix * vec4(u_origin, 1.0, 1.0);
                vec2 pos = vec2(objPosition.xy) - u_origin;
                bool isAxis = false;
                bool isMultiGrid = false;
                float indexVert = a_objPosition.x / u_gridSize.x;
                float indexHori = a_objPosition.y / u_gridSize.y;
                float dx = floor((indexVert - u_moveCount.x) + 0.5);
                float dy = floor((indexHori - u_moveCount.y) + 0.5);
                if (dx > 0.0) {
                    dx = -dx;
                }
                if (dy > 0.0) {
                    dy = -dy;
                }
                if (a_objPosition.z == 0.0) {
                    isAxis = nearZero(pos.x);
                    isMultiGrid = nearZero(mod(dx, u_multiRatio));
                } else if (a_objPosition.z == 0.1) {
                    isAxis = nearZero(pos.y) || nearZero(pos.x);
                    isMultiGrid = nearZero(mod(dy, u_multiRatio));
                } else {
                    isAxis = nearZero(pos.x) || nearZero(pos.y);
                    isMultiGrid = nearZero(mod(dx, u_multiRatio)) || nearZero(mod(dy, u_multiRatio));
                }
                if (isAxis) {
                    if (u_isShowAxis != 1.0) {
                        if (u_isShowGrid == 1.0) {
                            v_color = u_gridColor;
                        }
                    } else {
                        v_color = u_axisColor;
                    }
                }  else {
                    if (u_isShowGrid != 1.0) {
                        return;
                    }
                    if (isMultiGrid) {
                        if (u_isShowMultiGrid != 1.0) {
                            v_color = u_gridColor;
                        } else {
                            v_color = u_multiGridColor;
                        }
                    } else {
                        v_color = u_gridColor;
                    }
                }
                gl_Position = objPosition;
            }
        `;
  }
  static createFS() {
    return `
            precision mediump float;
            varying vec4 v_color;

            void main () {
                gl_FragColor = v_color;
            }
        `;
  }
  static createLinePositionsData(viewWidth, viewHeight) {
    const positionsData = [];
    const ratio = 30;
    const axisParam = _common_AxisParam__WEBPACK_IMPORTED_MODULE_0__.AxisParam.getInstance();
    const width = viewWidth / ratio * axisParam.axisStepX * 4;
    const height = viewHeight / ratio * axisParam.axisStepY * 4;
    for (let x = 0; x < width; x += axisParam.axisStepX) {
      (0,_Utils__WEBPACK_IMPORTED_MODULE_1__.fillLineVertical)(positionsData, x, height);
    }
    for (let x = -axisParam.axisStepX; x > -width; x -= axisParam.axisStepX) {
      (0,_Utils__WEBPACK_IMPORTED_MODULE_1__.fillLineVertical)(positionsData, x, height);
    }
    for (let y = 0; y < height; y += axisParam.axisStepY) {
      (0,_Utils__WEBPACK_IMPORTED_MODULE_1__.fillLineHorizontal)(positionsData, y, width);
    }
    for (let y = -axisParam.axisStepY; y > -height; y -= axisParam.axisStepY) {
      (0,_Utils__WEBPACK_IMPORTED_MODULE_1__.fillLineHorizontal)(positionsData, y, width);
    }
    return positionsData;
  }
  static createDotPositionsData(viewWidth, viewHeight) {
    const positionsData = [];
    const ratio = 30;
    const axisParam = _common_AxisParam__WEBPACK_IMPORTED_MODULE_0__.AxisParam.getInstance();
    const width = viewWidth / ratio * axisParam.axisStepX * 4;
    const height = viewHeight / ratio * axisParam.axisStepY * 4;
    for (let x = 0; x < width; x += axisParam.axisStepX) {
      for (let y = 0; y < height; y += axisParam.axisStepY) {
        (0,_Utils__WEBPACK_IMPORTED_MODULE_1__.fillDot)(positionsData, x, y);
      }
      for (let y = -axisParam.axisStepY; y > -height; y -= axisParam.axisStepY) {
        (0,_Utils__WEBPACK_IMPORTED_MODULE_1__.fillDot)(positionsData, x, y);
      }
    }
    for (let x = -axisParam.axisStepX; x > -width; x -= axisParam.axisStepX) {
      for (let y = 0; y < height; y += axisParam.axisStepY) {
        (0,_Utils__WEBPACK_IMPORTED_MODULE_1__.fillDot)(positionsData, x, y);
      }
      for (let y = -axisParam.axisStepY; y > -height; y -= axisParam.axisStepY) {
        (0,_Utils__WEBPACK_IMPORTED_MODULE_1__.fillDot)(positionsData, x, y);
      }
    }
    return positionsData;
  }
}


/***/ }),

/***/ "./src/engine/webgl/primitives2d/d2GridAxis/Utils.ts":
/*!***********************************************************!*\
  !*** ./src/engine/webgl/primitives2d/d2GridAxis/Utils.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   fillDot: () => (/* binding */ fillDot),
/* harmony export */   fillLineHorizontal: () => (/* binding */ fillLineHorizontal),
/* harmony export */   fillLineVertical: () => (/* binding */ fillLineVertical)
/* harmony export */ });

function fillLineVertical(posData, x, height) {
  posData.push(x, -height, 0, x, height, 0);
}
function fillLineHorizontal(posData, y, width) {
  posData.push(-width, y, 0.1, width, y, 0.1);
}
function fillDot(posData, x, y) {
  posData.push(x, y, 0.1);
}


/***/ }),

/***/ "./src/engine/webgl/primitives2d/d2SingleArc/D2ArcBufferGL.ts":
/*!********************************************************************!*\
  !*** ./src/engine/webgl/primitives2d/d2SingleArc/D2ArcBufferGL.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2ArcBufferGL: () => (/* binding */ D2ArcBufferGL)
/* harmony export */ });
/* harmony import */ var _common_utils_ObjectBlendBuffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../common/utils/ObjectBlendBuffer */ "./src/engine/common/utils/ObjectBlendBuffer.ts");
/* harmony import */ var _D2ArcObjectGL__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./D2ArcObjectGL */ "./src/engine/webgl/primitives2d/d2SingleArc/D2ArcObjectGL.ts");



class D2ArcBufferGL {
  static createObjectBlendBuffer(scene) {
    const objectBlendBuffer = new _common_utils_ObjectBlendBuffer__WEBPACK_IMPORTED_MODULE_0__.ObjectBlendBuffer(_common_utils_ObjectBlendBuffer__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_PRIMITIVE_CHUNK_SIZE, [
      {
        size: _D2ArcObjectGL__WEBPACK_IMPORTED_MODULE_1__.arcProgramObjPositionUnitSize,
        creator: (byteSize) => {
          return scene.renderer.createWebGLArrayBufferBySizeUseFloat32(byteSize, scene.renderer.gl.STATIC_DRAW);
        }
      },
      {
        size: _D2ArcObjectGL__WEBPACK_IMPORTED_MODULE_1__.arcProgramAngleUnitSize,
        creator: (byteSize) => {
          return scene.renderer.createWebGLArrayBufferBySizeUseFloat32(byteSize, scene.renderer.gl.STATIC_DRAW);
        }
      },
      {
        size: _D2ArcObjectGL__WEBPACK_IMPORTED_MODULE_1__.arcProgramParamUnitSize,
        creator: (byteSize) => {
          return scene.renderer.createWebGLArrayBufferBySizeUseFloat32(byteSize, scene.renderer.gl.STATIC_DRAW);
        }
      },
      {
        size: _D2ArcObjectGL__WEBPACK_IMPORTED_MODULE_1__.arcProgramStrokeColorUnitSize,
        creator: (byteSize) => {
          return scene.renderer.createWebGLArrayBufferBySizeUseFloat32(byteSize, scene.renderer.gl.STATIC_DRAW);
        }
      },
      {
        size: _D2ArcObjectGL__WEBPACK_IMPORTED_MODULE_1__.arcProgramFillColorUnitSize,
        creator: (byteSize) => {
          return scene.renderer.createWebGLArrayBufferBySizeUseFloat32(byteSize, scene.renderer.gl.STATIC_DRAW);
        }
      }
    ]);
    return objectBlendBuffer;
  }
}


/***/ }),

/***/ "./src/engine/webgl/primitives2d/d2SingleArc/D2ArcInstancedProgramGL.ts":
/*!******************************************************************************!*\
  !*** ./src/engine/webgl/primitives2d/d2SingleArc/D2ArcInstancedProgramGL.ts ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2ArcInstancedProgramGL: () => (/* binding */ D2ArcInstancedProgramGL)
/* harmony export */ });
/* harmony import */ var _D2ArcObjectGL__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./D2ArcObjectGL */ "./src/engine/webgl/primitives2d/d2SingleArc/D2ArcObjectGL.ts");
/* harmony import */ var _InstancedProgramGL__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../InstancedProgramGL */ "./src/engine/webgl/primitives2d/InstancedProgramGL.ts");
/* harmony import */ var _D2ArcShaderGL__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./D2ArcShaderGL */ "./src/engine/webgl/primitives2d/d2SingleArc/D2ArcShaderGL.ts");




const INIT_INDEX_DATA = [0, 1, 2];
class D2ArcInstancedProgramGL extends _InstancedProgramGL__WEBPACK_IMPORTED_MODULE_1__.InstancedProgramGL {
  constructor(renderer) {
    super(renderer, _D2ArcShaderGL__WEBPACK_IMPORTED_MODULE_2__.D2ArcShaderGL.createVS(), _D2ArcShaderGL__WEBPACK_IMPORTED_MODULE_2__.D2ArcShaderGL.createFS(), new Float32Array(INIT_INDEX_DATA));
    this._a_objPosition = this.getWebGLAttributeLocation(`a_objPosition`);
    this._a_angle = this.getWebGLAttributeLocation(`a_angle`);
    this._a_param = this.getWebGLAttributeLocation(`a_param`);
    this._a_strokeColor = this.getWebGLAttributeLocation(`a_strokeColor`);
    this._a_fillColor = this.getWebGLAttributeLocation(`a_fillColor`);
    this._u_matrix = this.getWebGLUniformLocation(`u_matrix`);
  }
  setEnableColor() {
    this.setEnableLoction(this.renderer.getWebGLAttributeLocation(this.webGLProgram, `a_strokeColor`));
    this.setEnableLoction(this.renderer.getWebGLAttributeLocation(this.webGLProgram, `a_fillColor`));
  }
  setDisableColor() {
    this.setDisableLoction(this.renderer.getWebGLAttributeLocation(this.webGLProgram, `a_strokeColor`));
    this.setDisableLoction(this.renderer.getWebGLAttributeLocation(this.webGLProgram, `a_fillColor`));
  }
  render(scene, plane, objectBlendBuffer) {
    const gl = this.renderer.gl;
    gl.useProgram(this.webGLProgram);
    this.setEnable();
    gl.bindBuffer(gl.ARRAY_BUFFER, objectBlendBuffer.getBaseBuffer(_D2ArcObjectGL__WEBPACK_IMPORTED_MODULE_0__.ED2ArcProgramBufferIndex.objPositions).webGLBuffer);
    gl.vertexAttribPointer(this._a_objPosition, _D2ArcObjectGL__WEBPACK_IMPORTED_MODULE_0__.arcProgramObjPositionUnitSize, gl.FLOAT, false, 0, 0);
    gl.bindBuffer(gl.ARRAY_BUFFER, objectBlendBuffer.getBaseBuffer(_D2ArcObjectGL__WEBPACK_IMPORTED_MODULE_0__.ED2ArcProgramBufferIndex.angle).webGLBuffer);
    gl.vertexAttribPointer(this._a_angle, _D2ArcObjectGL__WEBPACK_IMPORTED_MODULE_0__.arcProgramAngleUnitSize, gl.FLOAT, false, 0, 0);
    gl.bindBuffer(gl.ARRAY_BUFFER, objectBlendBuffer.getBaseBuffer(_D2ArcObjectGL__WEBPACK_IMPORTED_MODULE_0__.ED2ArcProgramBufferIndex.param).webGLBuffer);
    gl.vertexAttribPointer(this._a_param, _D2ArcObjectGL__WEBPACK_IMPORTED_MODULE_0__.arcProgramParamUnitSize, gl.FLOAT, false, 0, 0);
    gl.bindBuffer(gl.ARRAY_BUFFER, objectBlendBuffer.getBaseBuffer(_D2ArcObjectGL__WEBPACK_IMPORTED_MODULE_0__.ED2ArcProgramBufferIndex.strokeColor).webGLBuffer);
    gl.vertexAttribPointer(this._a_strokeColor, _D2ArcObjectGL__WEBPACK_IMPORTED_MODULE_0__.arcProgramStrokeColorUnitSize, gl.FLOAT, false, 0, 0);
    gl.bindBuffer(gl.ARRAY_BUFFER, objectBlendBuffer.getBaseBuffer(_D2ArcObjectGL__WEBPACK_IMPORTED_MODULE_0__.ED2ArcProgramBufferIndex.fillColor).webGLBuffer);
    gl.vertexAttribPointer(this._a_fillColor, _D2ArcObjectGL__WEBPACK_IMPORTED_MODULE_0__.arcProgramFillColorUnitSize, gl.FLOAT, false, 0, 0);
    const viewMatrix4 = scene.camera.getViewMatrix4(true);
    gl.uniformMatrix4fv(this._u_matrix, false, new Float32Array(viewMatrix4.data));
    this.instancedArrays.drawArraysInstancedANGLE(gl.TRIANGLES, 0, INIT_INDEX_DATA.length, objectBlendBuffer.getSize());
    this.setDisable();
  }
}


/***/ }),

/***/ "./src/engine/webgl/primitives2d/d2SingleArc/D2ArcObjectGL.ts":
/*!********************************************************************!*\
  !*** ./src/engine/webgl/primitives2d/d2SingleArc/D2ArcObjectGL.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2ArcObjectGL: () => (/* binding */ D2ArcObjectGL),
/* harmony export */   ED2ArcProgramBufferIndex: () => (/* binding */ ED2ArcProgramBufferIndex),
/* harmony export */   arcProgramAngleUnitSize: () => (/* binding */ arcProgramAngleUnitSize),
/* harmony export */   arcProgramFillColorUnitSize: () => (/* binding */ arcProgramFillColorUnitSize),
/* harmony export */   arcProgramObjPositionUnitSize: () => (/* binding */ arcProgramObjPositionUnitSize),
/* harmony export */   arcProgramParamUnitSize: () => (/* binding */ arcProgramParamUnitSize),
/* harmony export */   arcProgramStrokeColorUnitSize: () => (/* binding */ arcProgramStrokeColorUnitSize)
/* harmony export */ });
/* harmony import */ var _ObjectGL__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ObjectGL */ "./src/engine/webgl/primitives2d/ObjectGL.ts");
/* harmony import */ var _D2ArcShaderGL__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./D2ArcShaderGL */ "./src/engine/webgl/primitives2d/d2SingleArc/D2ArcShaderGL.ts");



var ED2ArcProgramBufferIndex = /* @__PURE__ */ ((ED2ArcProgramBufferIndex2) => {
  ED2ArcProgramBufferIndex2[ED2ArcProgramBufferIndex2["objPositions"] = 0] = "objPositions";
  ED2ArcProgramBufferIndex2[ED2ArcProgramBufferIndex2["angle"] = 1] = "angle";
  ED2ArcProgramBufferIndex2[ED2ArcProgramBufferIndex2["param"] = 2] = "param";
  ED2ArcProgramBufferIndex2[ED2ArcProgramBufferIndex2["strokeColor"] = 3] = "strokeColor";
  ED2ArcProgramBufferIndex2[ED2ArcProgramBufferIndex2["fillColor"] = 4] = "fillColor";
  return ED2ArcProgramBufferIndex2;
})(ED2ArcProgramBufferIndex || {});
const arcProgramObjPositionUnitSize = 4;
const arcProgramAngleUnitSize = 4;
const arcProgramParamUnitSize = 4;
const arcProgramStrokeColorUnitSize = 4;
const arcProgramFillColorUnitSize = 4;
class D2ArcObjectGL extends _ObjectGL__WEBPACK_IMPORTED_MODULE_0__.ObjectGL {
  constructor(objectBlendBuffer, primitiveItemBitIndex, data) {
    super(objectBlendBuffer);
    this.primitiveItemBitIndex = primitiveItemBitIndex;
    this.update(data);
  }
  syncStatus(data) {
    this.update(data);
  }
  update(data) {
    if (this.objectBlendBuffer === null) {
      throw new Error(`the buffer does not exist.`);
    }
    this.objectBlendBuffer.updateBaseBufferByIndex(
      0 /* objPositions */,
      this.primitiveItemBitIndex,
      _D2ArcShaderGL__WEBPACK_IMPORTED_MODULE_1__.D2ArcShaderGL.createObjPositionData(data)
    );
    this.objectBlendBuffer.updateBaseBufferByIndex(
      1 /* angle */,
      this.primitiveItemBitIndex,
      _D2ArcShaderGL__WEBPACK_IMPORTED_MODULE_1__.D2ArcShaderGL.createAngleData(data)
    );
    this.objectBlendBuffer.updateBaseBufferByIndex(
      2 /* param */,
      this.primitiveItemBitIndex,
      _D2ArcShaderGL__WEBPACK_IMPORTED_MODULE_1__.D2ArcShaderGL.createParamData(data)
    );
    this.objectBlendBuffer.updateBaseBufferByIndex(
      3 /* strokeColor */,
      this.primitiveItemBitIndex,
      _D2ArcShaderGL__WEBPACK_IMPORTED_MODULE_1__.D2ArcShaderGL.createStrokeColorData(data)
    );
    this.objectBlendBuffer.updateBaseBufferByIndex(
      4 /* fillColor */,
      this.primitiveItemBitIndex,
      _D2ArcShaderGL__WEBPACK_IMPORTED_MODULE_1__.D2ArcShaderGL.createFillColorData(data)
    );
  }
  remove() {
    if (this.objectBlendBuffer === null) {
      throw new Error(`the buffer does not exist.`);
    }
    const isEmpty = this.objectBlendBuffer.remove(this.primitiveItemBitIndex);
    this.objectBlendBuffer = null;
    return isEmpty;
  }
}


/***/ }),

/***/ "./src/engine/webgl/primitives2d/d2SingleArc/D2ArcShaderGL.ts":
/*!********************************************************************!*\
  !*** ./src/engine/webgl/primitives2d/d2SingleArc/D2ArcShaderGL.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2ArcShaderGL: () => (/* binding */ D2ArcShaderGL)
/* harmony export */ });
/* harmony import */ var _config_CommonProfile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../config/CommonProfile */ "./src/engine/config/CommonProfile.ts");
/* harmony import */ var _config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../config/PrimitiveProfile */ "./src/engine/config/PrimitiveProfile.ts");



class D2ArcShaderGL {
  static createVS() {
    return `
			precision mediump float;
			attribute lowp float a_index;
			attribute vec4 a_objPosition;  // [cx, cy, radius, stroke-width]
			attribute vec4 a_angle;  // [startAngle, endAngle, sweepAngle, <un-use>]
			attribute vec4 a_param;  // [alpha, is-round, stroke-width, is-fill]
			attribute vec4 a_strokeColor;
			attribute vec4 a_fillColor;
			uniform mat4 u_matrix;
			varying vec4 v_objPosition;
			varying vec4 v_position;
			varying vec4 v_strokeColor;
			varying vec4 v_fillColor;
			varying vec4 v_angle;
			varying vec4 v_param;
			varying float R;
			varying float r;

			float getLess(float a, float b) {
                return a < b ? 1.0 : 0.0;
            }
			float getEqual(float value, float refer) {
                return value == refer ? 1.0 : 0.0;
            }

			void main() {
				if (a_angle[3] == 0.0) {
					return;
				}
				R = a_objPosition[2] + a_objPosition[3] / 2.0;
				r = a_objPosition[2] - a_objPosition[3] / 2.0;
				float strokeWidth = a_objPosition[3];
				if (strokeWidth < 0.0 || r < 0.0 ) {
					return;
				}
				vec4 position = vec4(a_objPosition.x, a_objPosition.y, 0.0, 1.0);
				float strokWidth = a_objPosition[3];
				// \u9700\u8981\u5C06\u4E09\u89D2\u5F62\u7684\u9876\u70B9\u5916\u6269 strokWidth \u7684\u8DDD\u79BB
                vec2 top = 
                    vec2(a_objPosition.x, a_objPosition.y) 
                    + vec2(0, 2.0 * a_objPosition.z + strokWidth);
                vec2 leftBottom = 
                    vec2(a_objPosition.x, a_objPosition.y) 
                    + vec2(-1.0 * (sqrt(3.0) * a_objPosition.z + sqrt(3.0) * strokWidth), -1.0 * (a_objPosition.z + strokWidth / 2.0));
                vec2 rightBottom = 
                    vec2(a_objPosition.x, a_objPosition.y) 
                    + vec2(sqrt(3.0) * a_objPosition.z + sqrt(3.0) * strokWidth, -1.0 * (a_objPosition.z + strokWidth / 2.0));
                position.xy = top * getEqual(a_index, 0.0) + leftBottom * getEqual(a_index, 1.0) + rightBottom * getEqual(a_index, 2.0);
				gl_Position = u_matrix * position;
				v_objPosition = a_objPosition;
				v_angle = a_angle;
				v_param = a_param;
				v_position = position;
				v_strokeColor = a_strokeColor;
				v_fillColor = a_fillColor;
			}
        `;
  }
  static createFS() {
    return `
			precision mediump float;
			varying vec4 v_objPosition;
			varying vec4 v_position;
			varying vec4 v_strokeColor;
			varying vec4 v_fillColor;
			varying vec4 v_angle;
			varying vec4 v_param;
			varying float R;
			varying float r;

			void main() {
				float startAngle = v_angle[0];
				float endAngle = v_angle[1];
				float sweepAngle = v_angle[2];
				float radius = v_objPosition[2];
				float strokeWidth = v_objPosition[3];
				vec2 circleCenter = v_objPosition.xy;
				bool isFill = v_param[3] == 1.0;
				float alpha = v_param[0];
				// \u5706\u5FC3\u5230\u4E09\u89D2\u9762\u4E0A\u4EFB\u610F\u70B9\u7684\u5411\u91CF, \u5E76\u8BA1\u7B97\u5176\u5355\u4F4D\u5411\u91CF
				vec2 circleDirLine = v_position.xy - circleCenter;
				vec2 norCircleDirLine = normalize(circleDirLine);
				// \u5706\u5FC3\u5230\u4E09\u89D2\u9762\u4E0A\u4EFB\u610F\u70B9\u7684\u8DDD\u79BB
				float d = length(circleDirLine);
				if (d > R) {
					discard;
				} else {
					// \u5706\u5FC3\u5230 startAngle \u5BF9\u5E94\u7684\u5706\u4E0A\u7684\u70B9\u7684\u5411\u91CF, \u5E76\u8BA1\u7B97\u5176\u5355\u4F4D\u5411\u91CF
					// \u5706\u5FC3\u5230 endAngle \u5BF9\u5E94\u7684\u5706\u4E0A\u7684\u70B9\u7684\u5411\u91CF, \u5E76\u8BA1\u7B97\u5176\u5355\u4F4D\u5411\u91CF
					vec2 circleStartLine = vec2(radius * cos(startAngle), radius * sin(startAngle));
					vec2 circleEndLine = vec2(radius * cos(endAngle), radius * sin(endAngle));
					vec2 norCircleStartLine = normalize(circleStartLine);
					vec2 norCircleEndLine = normalize(circleEndLine);
					// startAngle \u5BF9\u5E94\u7684\u89D2\u5EA6\u5728\u5706\u4E0A\u7684\u5750\u6807(\u76F8\u5BF9\u4E8E\u5750\u6807\u539F\u70B9)
					// endAngle \u5BF9\u5E94\u7684\u89D2\u5EA6\u5728\u5706\u4E0A\u7684\u5750\u6807(\u76F8\u5BF9\u4E8E\u5750\u6807\u539F\u70B9)
					vec2 startLine = circleCenter.xy + circleStartLine;
					vec2 endLine = circleCenter.xy + circleEndLine;
					// \u4E09\u89D2\u9762\u4E0A\u4EFB\u610F\u4E00\u70B9\u5230 startAngle \u5BF9\u5E94\u7684\u5706\u4E0A\u7684\u70B9\u7684\u8DDD\u79BB
					// \u4E09\u89D2\u9762\u4E0A\u4EFB\u610F\u4E00\u70B9\u5230 endAngle \u5BF9\u5E94\u7684\u5706\u4E0A\u7684\u70B9\u7684\u8DDD\u79BB
					float d1 = length(v_position.xy - startLine);
					float d2 = length(v_position.xy - endLine);
					// \u5411\u91CF norCircleStartLine x norCircleDirLine
					// \u5373 norCircleStartLine \u4E0E norCircleDirLine \u6240\u6784\u6210\u7684\u5E73\u884C\u56DB\u8FB9\u5F62\u7684\u6709\u5411\u9762\u79EF SA
					// SA \u5927\u4E8E 0, \u5373 norCircleDirLine \u4F4D\u4E8E norCircleStartLine \u7684\u9006\u65F6\u9488\u65CB\u8F6C\u65B9\u4F4D
					float SA = norCircleStartLine.x * norCircleDirLine.y - norCircleStartLine.y * norCircleDirLine.x;
					// \u5411\u91CF norCircleEndLine x norCircleDirLine
					// \u5373 norCircleEndLine \u4E0E norCircleDirLine \u6240\u6784\u6210\u7684\u5E73\u884C\u56DB\u8FB9\u5F62\u7684\u6709\u5411\u9762\u79EF EA
					// EA \u5C0F\u4E8E 0, \u5373 norCircleDirLine \u4F4D\u4E8E norCircleEndLine \u7684\u987A\u65F6\u9488\u65CB\u8F6C\u65B9\u4F4D
					float EA = norCircleEndLine.x * norCircleDirLine.y - norCircleEndLine.y * norCircleDirLine.x;
					float PI = 3.1415926535897932384626433832795;
					if ((sweepAngle < PI && SA > 0.0 && EA < 0.0) || (sweepAngle >= PI && (SA > 0.0 || EA < 0.0))) {
						// \u5706\u5F27\u4E3B\u6BB5
						if (d < r) {
							// \u5706\u5F27\u9762
							if (isFill) {
								gl_FragColor = vec4(v_fillColor.xyz, alpha);
							}
							return;
						}
						gl_FragColor = vec4(v_strokeColor.xyz, alpha);
						// if (d < r) {
						// 	gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);
						// 	return;
						// }
						// gl_FragColor = vec4(1.0, 0.0, 0.0, 0.5);
					} else if (d1 < strokeWidth / 2.0 && SA <= 0.0) {
						// \u8D77\u59CB\u70B9\u5706\u89D2
					 	if (isFill) {
							discard;
							return;
						}
						if (d < r) {
							// \u5706\u5F27\u9762
							return;
						}
						gl_FragColor = vec4(v_strokeColor.xyz, alpha);
						// if (d < r) {
						// 	gl_FragColor = vec4(0.0, 1.0, 0.0, 1.0);
						// 	return;
						// }
						// gl_FragColor = vec4(0.0, 1.0, 0.0, 0.5);
					} else if (d2 < strokeWidth / 2.0 && EA >= 0.0) {
						// \u7ED3\u675F\u70B9\u5706\u89D2
					 	if (isFill) {
							discard;
							return;
						}
						if (d < r) {
							// \u5706\u5F27\u9762
							return;
						}
						gl_FragColor = vec4(v_strokeColor.xyz, alpha);
						// if (d < r) {
						// 	gl_FragColor = vec4(0.0, 0.0, 1.0, 1.0);
						// 	return;
						// }
						// gl_FragColor = vec4(0.0, 0.0, 1.0, 0.5);
					} else {
						// discard;
					}
				}
			}
        `;
  }
  static createObjPositionData(data) {
    const { cx, cy, r, strokeWidth } = data;
    return [cx, cy, r, strokeWidth];
  }
  static createAngleData(data) {
    const { startAngle, endAngle, sweep } = data;
    let sng = startAngle % (Math.PI * 2);
    let eng = endAngle % (Math.PI * 2);
    let sng1 = sweep === _config_CommonProfile__WEBPACK_IMPORTED_MODULE_0__.ESweep.CCW ? sng : eng;
    let eng1 = sweep === _config_CommonProfile__WEBPACK_IMPORTED_MODULE_0__.ESweep.CCW ? eng : sng;
    return [sng1, eng1, eng1 > sng1 ? eng1 - sng1 : eng1 - sng1 + Math.PI, 1];
  }
  static createParamData(data) {
    const { strokeWidth, strokeColorData, alpha, lineCap, isFill } = data;
    return [alpha * strokeColorData.a, lineCap === _config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_1__.ECanvas2DLineCap.ROUND ? 1 : 0, strokeWidth, isFill ? 1 : 0];
  }
  static createStrokeColorData(data) {
    const { strokeColorData } = data;
    return [strokeColorData.r, strokeColorData.g, strokeColorData.b, strokeColorData.a];
  }
  static createFillColorData(data) {
    const { fillColorData } = data;
    return [fillColorData.r, fillColorData.g, fillColorData.b, fillColorData.a];
  }
}


/***/ }),

/***/ "./src/engine/webgl/primitives2d/d2SingleCircle/D2CircleBufferGL.ts":
/*!**************************************************************************!*\
  !*** ./src/engine/webgl/primitives2d/d2SingleCircle/D2CircleBufferGL.ts ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2CircleBufferGL: () => (/* binding */ D2CircleBufferGL)
/* harmony export */ });
/* harmony import */ var _common_utils_ObjectBlendBuffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../common/utils/ObjectBlendBuffer */ "./src/engine/common/utils/ObjectBlendBuffer.ts");
/* harmony import */ var _D2CircleObjectGL__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./D2CircleObjectGL */ "./src/engine/webgl/primitives2d/d2SingleCircle/D2CircleObjectGL.ts");



class D2CircleBufferGL {
  static createObjectBlendBuffer(scene) {
    const objectBlendBuffer = new _common_utils_ObjectBlendBuffer__WEBPACK_IMPORTED_MODULE_0__.ObjectBlendBuffer(_common_utils_ObjectBlendBuffer__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_PRIMITIVE_CHUNK_SIZE, [
      {
        size: _D2CircleObjectGL__WEBPACK_IMPORTED_MODULE_1__.circleProgramObjPositionUnitSize,
        creator: (byteSize) => {
          return scene.renderer.createWebGLArrayBufferBySizeUseFloat32(byteSize, scene.renderer.gl.STATIC_DRAW);
        }
      },
      {
        size: _D2CircleObjectGL__WEBPACK_IMPORTED_MODULE_1__.circleProgramParamUnitSize,
        creator: (byteSize) => {
          return scene.renderer.createWebGLArrayBufferBySizeUseFloat32(byteSize, scene.renderer.gl.STATIC_DRAW);
        }
      },
      {
        size: _D2CircleObjectGL__WEBPACK_IMPORTED_MODULE_1__.circleProgramStrokeColorUnitSize,
        creator: (byteSize) => {
          return scene.renderer.createWebGLArrayBufferBySizeUseFloat32(byteSize, scene.renderer.gl.STATIC_DRAW);
        }
      },
      {
        size: _D2CircleObjectGL__WEBPACK_IMPORTED_MODULE_1__.circleProgramFillColorUnitSize,
        creator: (byteSize) => {
          return scene.renderer.createWebGLArrayBufferBySizeUseFloat32(byteSize, scene.renderer.gl.STATIC_DRAW);
        }
      }
    ]);
    return objectBlendBuffer;
  }
}


/***/ }),

/***/ "./src/engine/webgl/primitives2d/d2SingleCircle/D2CircleInstancedProgramGL.ts":
/*!************************************************************************************!*\
  !*** ./src/engine/webgl/primitives2d/d2SingleCircle/D2CircleInstancedProgramGL.ts ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2CircleInstancedProgramGL: () => (/* binding */ D2CircleInstancedProgramGL)
/* harmony export */ });
/* harmony import */ var _D2CircleObjectGL__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./D2CircleObjectGL */ "./src/engine/webgl/primitives2d/d2SingleCircle/D2CircleObjectGL.ts");
/* harmony import */ var _InstancedProgramGL__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../InstancedProgramGL */ "./src/engine/webgl/primitives2d/InstancedProgramGL.ts");
/* harmony import */ var _D2CircleShaderGL__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./D2CircleShaderGL */ "./src/engine/webgl/primitives2d/d2SingleCircle/D2CircleShaderGL.ts");




const INIT_INDEX_DATA = [0, 1, 2];
class D2CircleInstancedProgramGL extends _InstancedProgramGL__WEBPACK_IMPORTED_MODULE_1__.InstancedProgramGL {
  constructor(renderer) {
    super(renderer, _D2CircleShaderGL__WEBPACK_IMPORTED_MODULE_2__.D2CircleShaderGL.createVS(), _D2CircleShaderGL__WEBPACK_IMPORTED_MODULE_2__.D2CircleShaderGL.createFS(), new Float32Array(INIT_INDEX_DATA));
    this._a_objPosition = this.getWebGLAttributeLocation(`a_objPosition`);
    this._a_param = this.getWebGLAttributeLocation(`a_param`);
    this._a_strokeColor = this.getWebGLAttributeLocation(`a_strokeColor`);
    this._a_fillColor = this.getWebGLAttributeLocation(`a_fillColor`);
    this._u_matrix = this.getWebGLUniformLocation(`u_matrix`);
  }
  setEnableColor() {
    this.setEnableLoction(this.renderer.getWebGLAttributeLocation(this.webGLProgram, `a_strokeColor`));
    this.setEnableLoction(this.renderer.getWebGLAttributeLocation(this.webGLProgram, `a_fillColor`));
  }
  setDisableColor() {
    this.setDisableLoction(this.renderer.getWebGLAttributeLocation(this.webGLProgram, `a_strokeColor`));
    this.setDisableLoction(this.renderer.getWebGLAttributeLocation(this.webGLProgram, `a_fillColor`));
  }
  render(scene, plane, objectBlendBuffer) {
    const gl = this.renderer.gl;
    gl.useProgram(this.webGLProgram);
    this.setEnable();
    gl.bindBuffer(gl.ARRAY_BUFFER, objectBlendBuffer.getBaseBuffer(_D2CircleObjectGL__WEBPACK_IMPORTED_MODULE_0__.ED2CircleProgramBufferIndex.objPositions).webGLBuffer);
    gl.vertexAttribPointer(this._a_objPosition, _D2CircleObjectGL__WEBPACK_IMPORTED_MODULE_0__.circleProgramObjPositionUnitSize, gl.FLOAT, false, 0, 0);
    gl.bindBuffer(gl.ARRAY_BUFFER, objectBlendBuffer.getBaseBuffer(_D2CircleObjectGL__WEBPACK_IMPORTED_MODULE_0__.ED2CircleProgramBufferIndex.param).webGLBuffer);
    gl.vertexAttribPointer(this._a_param, _D2CircleObjectGL__WEBPACK_IMPORTED_MODULE_0__.circleProgramParamUnitSize, gl.FLOAT, false, 0, 0);
    gl.bindBuffer(gl.ARRAY_BUFFER, objectBlendBuffer.getBaseBuffer(_D2CircleObjectGL__WEBPACK_IMPORTED_MODULE_0__.ED2CircleProgramBufferIndex.strokeColor).webGLBuffer);
    gl.vertexAttribPointer(this._a_strokeColor, _D2CircleObjectGL__WEBPACK_IMPORTED_MODULE_0__.circleProgramStrokeColorUnitSize, gl.FLOAT, false, 0, 0);
    gl.bindBuffer(gl.ARRAY_BUFFER, objectBlendBuffer.getBaseBuffer(_D2CircleObjectGL__WEBPACK_IMPORTED_MODULE_0__.ED2CircleProgramBufferIndex.fillColor).webGLBuffer);
    gl.vertexAttribPointer(this._a_fillColor, _D2CircleObjectGL__WEBPACK_IMPORTED_MODULE_0__.circleProgramFillColorUnitSize, gl.FLOAT, false, 0, 0);
    const viewMatrix4 = scene.camera.getViewMatrix4(true);
    gl.uniformMatrix4fv(this._u_matrix, false, new Float32Array(viewMatrix4.data));
    this.instancedArrays.drawArraysInstancedANGLE(gl.TRIANGLES, 0, INIT_INDEX_DATA.length, objectBlendBuffer.getSize());
    this.setDisable();
  }
}


/***/ }),

/***/ "./src/engine/webgl/primitives2d/d2SingleCircle/D2CircleObjectGL.ts":
/*!**************************************************************************!*\
  !*** ./src/engine/webgl/primitives2d/d2SingleCircle/D2CircleObjectGL.ts ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2CircleObjectGL: () => (/* binding */ D2CircleObjectGL),
/* harmony export */   ED2CircleProgramBufferIndex: () => (/* binding */ ED2CircleProgramBufferIndex),
/* harmony export */   circleProgramFillColorUnitSize: () => (/* binding */ circleProgramFillColorUnitSize),
/* harmony export */   circleProgramObjPositionUnitSize: () => (/* binding */ circleProgramObjPositionUnitSize),
/* harmony export */   circleProgramParamUnitSize: () => (/* binding */ circleProgramParamUnitSize),
/* harmony export */   circleProgramStrokeColorUnitSize: () => (/* binding */ circleProgramStrokeColorUnitSize)
/* harmony export */ });
/* harmony import */ var _ObjectGL__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ObjectGL */ "./src/engine/webgl/primitives2d/ObjectGL.ts");
/* harmony import */ var _D2CircleShaderGL__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./D2CircleShaderGL */ "./src/engine/webgl/primitives2d/d2SingleCircle/D2CircleShaderGL.ts");



var ED2CircleProgramBufferIndex = /* @__PURE__ */ ((ED2CircleProgramBufferIndex2) => {
  ED2CircleProgramBufferIndex2[ED2CircleProgramBufferIndex2["objPositions"] = 0] = "objPositions";
  ED2CircleProgramBufferIndex2[ED2CircleProgramBufferIndex2["param"] = 1] = "param";
  ED2CircleProgramBufferIndex2[ED2CircleProgramBufferIndex2["strokeColor"] = 2] = "strokeColor";
  ED2CircleProgramBufferIndex2[ED2CircleProgramBufferIndex2["fillColor"] = 3] = "fillColor";
  return ED2CircleProgramBufferIndex2;
})(ED2CircleProgramBufferIndex || {});
const circleProgramObjPositionUnitSize = 4;
const circleProgramParamUnitSize = 4;
const circleProgramStrokeColorUnitSize = 4;
const circleProgramFillColorUnitSize = 4;
class D2CircleObjectGL extends _ObjectGL__WEBPACK_IMPORTED_MODULE_0__.ObjectGL {
  constructor(objectBlendBuffer, primitiveItemBitIndex, data) {
    super(objectBlendBuffer);
    this.primitiveItemBitIndex = primitiveItemBitIndex;
    this.update(data);
  }
  syncStatus(data) {
    this.update(data);
  }
  update(data) {
    if (this.objectBlendBuffer === null) {
      throw new Error(`the buffer does not exist.`);
    }
    this.objectBlendBuffer.updateBaseBufferByIndex(
      0 /* objPositions */,
      this.primitiveItemBitIndex,
      _D2CircleShaderGL__WEBPACK_IMPORTED_MODULE_1__.D2CircleShaderGL.createObjPositionData(data)
    );
    this.objectBlendBuffer.updateBaseBufferByIndex(
      1 /* param */,
      this.primitiveItemBitIndex,
      _D2CircleShaderGL__WEBPACK_IMPORTED_MODULE_1__.D2CircleShaderGL.createParamData(data)
    );
    this.objectBlendBuffer.updateBaseBufferByIndex(
      2 /* strokeColor */,
      this.primitiveItemBitIndex,
      _D2CircleShaderGL__WEBPACK_IMPORTED_MODULE_1__.D2CircleShaderGL.createStrokeColorData(data)
    );
    this.objectBlendBuffer.updateBaseBufferByIndex(
      3 /* fillColor */,
      this.primitiveItemBitIndex,
      _D2CircleShaderGL__WEBPACK_IMPORTED_MODULE_1__.D2CircleShaderGL.createFillColorData(data)
    );
  }
  remove() {
    if (this.objectBlendBuffer === null) {
      throw new Error(`the buffer does not exist.`);
    }
    const isEmpty = this.objectBlendBuffer.remove(this.primitiveItemBitIndex);
    this.objectBlendBuffer = null;
    return isEmpty;
  }
}


/***/ }),

/***/ "./src/engine/webgl/primitives2d/d2SingleCircle/D2CircleShaderGL.ts":
/*!**************************************************************************!*\
  !*** ./src/engine/webgl/primitives2d/d2SingleCircle/D2CircleShaderGL.ts ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2CircleShaderGL: () => (/* binding */ D2CircleShaderGL)
/* harmony export */ });
/* harmony import */ var _config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../config/PrimitiveProfile */ "./src/engine/config/PrimitiveProfile.ts");


class D2CircleShaderGL {
  static createVS() {
    return `
            precision mediump float;
            attribute lowp float a_index;
            attribute vec4 a_objPosition;  // [cx, cy, r, is-fill]
            attribute vec4 a_param;  // [alpha, is-round, stroke-width, <un-use>]
            attribute vec4 a_strokeColor;
            attribute vec4 a_fillColor;
            uniform mat4 u_matrix;
            varying vec4 v_objPosition;
            varying vec4 v_param;
            varying vec4 v_position;
            varying vec4 v_strokeColor;
            varying vec4 v_fillColor;

            float getEqual(float value, float refer) {
                return value == refer ? 1.0 : 0.0;
            }

            void main() {
                if (a_objPosition[2] < 0.0) {
                    return;
                }
                float strokeWidth = a_param[2];
                vec4 position = vec4(a_objPosition.x, a_objPosition.y, 0.0, 1.0);
                // \u9700\u8981\u5C06\u4E09\u89D2\u5F62\u7684\u9876\u70B9\u5916\u6269 strokeWidth \u7684\u8DDD\u79BB
                vec2 top = 
                    vec2(a_objPosition.x, a_objPosition.y) 
                    + vec2(0, 2.0 * a_objPosition.z + strokeWidth);
                vec2 leftBottom = 
                    vec2(a_objPosition.x, a_objPosition.y) 
                    + vec2(-1.0 * (sqrt(3.0) * a_objPosition.z + sqrt(3.0) * strokeWidth), -1.0 * (a_objPosition.z + strokeWidth / 2.0));
                vec2 rightBottom = 
                    vec2(a_objPosition.x, a_objPosition.y) 
                    + vec2(sqrt(3.0) * a_objPosition.z + sqrt(3.0) * strokeWidth, -1.0 * (a_objPosition.z + strokeWidth / 2.0));
                position.xy = top * getEqual(a_index, 0.0) + leftBottom * getEqual(a_index, 1.0) + rightBottom * getEqual(a_index, 2.0);
                gl_Position = u_matrix * position;
                v_objPosition = a_objPosition;
                v_position = position;
                v_strokeColor = a_strokeColor;
                v_fillColor = a_fillColor;
                v_param = a_param;
            }
        `;
  }
  static createFS() {
    return `
            precision mediump float;
            varying vec4 v_objPosition;
            varying vec4 v_position;
            varying vec4 v_param;
            varying vec4 v_strokeColor;
            varying vec4 v_fillColor;

            void main() {
                vec2 circleCenter = v_objPosition.xy;
                float strokeWidth = v_param[2];
                float alpha = v_param[0];
                float radius = v_objPosition.z;
                bool isFill = v_objPosition.w == 1.0;
                vec2 circleDirLine = v_position.xy - circleCenter;
                bool isOuter = length(circleDirLine) > radius + strokeWidth / 2.0;
                bool isInner = length(circleDirLine) < radius - strokeWidth / 2.0;
                if (isOuter) {
                    discard;
                    return;
                } else if (isInner) {
                    if (!isFill) {
                        discard;
                        return;
                    }
                    gl_FragColor = vec4(v_fillColor.xyz, alpha);
                } else {
                    gl_FragColor = vec4(v_strokeColor.xyz, alpha);
                }
            }
        `;
  }
  static createObjPositionData(data) {
    const { cx, cy, r, isFill } = data;
    return [cx, cy, r, isFill ? 1 : 0];
  }
  static createParamData(data) {
    const { strokeWidth, strokeColorData, alpha, lineCap } = data;
    return [alpha * strokeColorData.a, lineCap === _config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_0__.ECanvas2DLineCap.ROUND ? 1 : 0, strokeWidth, 0];
  }
  static createStrokeColorData(data) {
    const { strokeColorData } = data;
    return [strokeColorData.r, strokeColorData.g, strokeColorData.b, strokeColorData.a];
  }
  static createFillColorData(data) {
    const { fillColorData } = data;
    return [fillColorData.r, fillColorData.g, fillColorData.b, fillColorData.a];
  }
}


/***/ }),

/***/ "./src/engine/webgl/primitives2d/d2SingleLine/D2LineBufferGL.ts":
/*!**********************************************************************!*\
  !*** ./src/engine/webgl/primitives2d/d2SingleLine/D2LineBufferGL.ts ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2LineBufferGL: () => (/* binding */ D2LineBufferGL)
/* harmony export */ });
/* harmony import */ var _common_utils_ObjectBlendBuffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../common/utils/ObjectBlendBuffer */ "./src/engine/common/utils/ObjectBlendBuffer.ts");
/* harmony import */ var _D2LineObjectGL__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./D2LineObjectGL */ "./src/engine/webgl/primitives2d/d2SingleLine/D2LineObjectGL.ts");



class D2LineBufferGL {
  static createObjectBlendBuffer(scene) {
    const objectBlendBuffer = new _common_utils_ObjectBlendBuffer__WEBPACK_IMPORTED_MODULE_0__.ObjectBlendBuffer(_common_utils_ObjectBlendBuffer__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_PRIMITIVE_CHUNK_SIZE, [
      {
        size: _D2LineObjectGL__WEBPACK_IMPORTED_MODULE_1__.lineProgramObjPositionUnitSize,
        creator: (byteSize) => {
          return scene.renderer.createWebGLArrayBufferBySizeUseFloat32(byteSize, scene.renderer.gl.STATIC_DRAW);
        }
      },
      {
        size: _D2LineObjectGL__WEBPACK_IMPORTED_MODULE_1__.lineProgramParamUnitSize,
        creator: (byteSize) => {
          return scene.renderer.createWebGLArrayBufferBySizeUseFloat32(byteSize, scene.renderer.gl.STATIC_DRAW);
        }
      },
      {
        size: _D2LineObjectGL__WEBPACK_IMPORTED_MODULE_1__.lineProgramProfileUnitSize,
        creator: (byteSize) => {
          return scene.renderer.createWebGLArrayBufferBySizeUseFloat32(byteSize, scene.renderer.gl.STATIC_DRAW);
        }
      },
      {
        size: _D2LineObjectGL__WEBPACK_IMPORTED_MODULE_1__.lineProgramColorUnitSize,
        creator: (byteSize) => {
          return scene.renderer.createWebGLArrayBufferBySizeUseFloat32(byteSize, scene.renderer.gl.STATIC_DRAW);
        }
      }
    ]);
    return objectBlendBuffer;
  }
}


/***/ }),

/***/ "./src/engine/webgl/primitives2d/d2SingleLine/D2LineInstancedProgramGL.ts":
/*!********************************************************************************!*\
  !*** ./src/engine/webgl/primitives2d/d2SingleLine/D2LineInstancedProgramGL.ts ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2LineInstancedProgramGL: () => (/* binding */ D2LineInstancedProgramGL)
/* harmony export */ });
/* harmony import */ var _D2LineObjectGL__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./D2LineObjectGL */ "./src/engine/webgl/primitives2d/d2SingleLine/D2LineObjectGL.ts");
/* harmony import */ var _InstancedProgramGL__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../InstancedProgramGL */ "./src/engine/webgl/primitives2d/InstancedProgramGL.ts");
/* harmony import */ var _D2LineShaderGL__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./D2LineShaderGL */ "./src/engine/webgl/primitives2d/d2SingleLine/D2LineShaderGL.ts");




const INIT_INDEX_DATA = [0, 1, 2, 3, 4, 5];
class D2LineInstancedProgramGL extends _InstancedProgramGL__WEBPACK_IMPORTED_MODULE_1__.InstancedProgramGL {
  constructor(renderer) {
    super(renderer, _D2LineShaderGL__WEBPACK_IMPORTED_MODULE_2__.D2LineShaderGL.createVS(), _D2LineShaderGL__WEBPACK_IMPORTED_MODULE_2__.D2LineShaderGL.createFS(), new Float32Array(INIT_INDEX_DATA));
    this._a_objPosition = this.getWebGLAttributeLocation(`a_objPosition`);
    this._a_param = this.getWebGLAttributeLocation(`a_param`);
    this._a_profile = this.getWebGLAttributeLocation(`a_profile`);
    this._a_color = this.getWebGLAttributeLocation(`a_color`);
    this._u_matrix = this.getWebGLUniformLocation(`u_matrix`);
    this._u_zoomRatio = this.getWebGLUniformLocation(`u_zoomRatio`);
  }
  setEnableColor() {
    this.setEnableLoction(this.renderer.getWebGLAttributeLocation(this.webGLProgram, `a_color`));
  }
  setDisableColor() {
    this.setDisableLoction(this.renderer.getWebGLAttributeLocation(this.webGLProgram, `a_color`));
  }
  render(scene, plane, objectBlendBuffer) {
    const gl = this.renderer.gl;
    gl.useProgram(this.webGLProgram);
    this.setEnable();
    gl.bindBuffer(gl.ARRAY_BUFFER, objectBlendBuffer.getBaseBuffer(_D2LineObjectGL__WEBPACK_IMPORTED_MODULE_0__.ED2LineProgramBufferIndex.objPositions).webGLBuffer);
    gl.vertexAttribPointer(this._a_objPosition, _D2LineObjectGL__WEBPACK_IMPORTED_MODULE_0__.lineProgramObjPositionUnitSize, gl.FLOAT, false, 0, 0);
    gl.bindBuffer(gl.ARRAY_BUFFER, objectBlendBuffer.getBaseBuffer(_D2LineObjectGL__WEBPACK_IMPORTED_MODULE_0__.ED2LineProgramBufferIndex.param).webGLBuffer);
    gl.vertexAttribPointer(this._a_param, _D2LineObjectGL__WEBPACK_IMPORTED_MODULE_0__.lineProgramParamUnitSize, gl.FLOAT, false, 0, 0);
    gl.bindBuffer(gl.ARRAY_BUFFER, objectBlendBuffer.getBaseBuffer(_D2LineObjectGL__WEBPACK_IMPORTED_MODULE_0__.ED2LineProgramBufferIndex.profile).webGLBuffer);
    gl.vertexAttribPointer(this._a_profile, _D2LineObjectGL__WEBPACK_IMPORTED_MODULE_0__.lineProgramProfileUnitSize, gl.FLOAT, false, 0, 0);
    gl.bindBuffer(gl.ARRAY_BUFFER, objectBlendBuffer.getBaseBuffer(_D2LineObjectGL__WEBPACK_IMPORTED_MODULE_0__.ED2LineProgramBufferIndex.color).webGLBuffer);
    gl.vertexAttribPointer(this._a_color, _D2LineObjectGL__WEBPACK_IMPORTED_MODULE_0__.lineProgramColorUnitSize, gl.FLOAT, false, 0, 0);
    const viewMatrix4 = scene.camera.getViewMatrix4(true);
    gl.uniformMatrix4fv(this._u_matrix, false, new Float32Array(viewMatrix4.data));
    const zoomRatio = scene.camera.getZoomRatio();
    gl.uniform1f(this._u_zoomRatio, zoomRatio);
    this.instancedArrays.drawArraysInstancedANGLE(gl.TRIANGLES, 0, INIT_INDEX_DATA.length, objectBlendBuffer.getSize());
    this.setDisable();
  }
}


/***/ }),

/***/ "./src/engine/webgl/primitives2d/d2SingleLine/D2LineObjectGL.ts":
/*!**********************************************************************!*\
  !*** ./src/engine/webgl/primitives2d/d2SingleLine/D2LineObjectGL.ts ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2LineObjectGL: () => (/* binding */ D2LineObjectGL),
/* harmony export */   ED2LineProgramBufferIndex: () => (/* binding */ ED2LineProgramBufferIndex),
/* harmony export */   lineProgramColorUnitSize: () => (/* binding */ lineProgramColorUnitSize),
/* harmony export */   lineProgramObjPositionUnitSize: () => (/* binding */ lineProgramObjPositionUnitSize),
/* harmony export */   lineProgramParamUnitSize: () => (/* binding */ lineProgramParamUnitSize),
/* harmony export */   lineProgramProfileUnitSize: () => (/* binding */ lineProgramProfileUnitSize)
/* harmony export */ });
/* harmony import */ var _ObjectGL__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ObjectGL */ "./src/engine/webgl/primitives2d/ObjectGL.ts");
/* harmony import */ var _D2LineShaderGL__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./D2LineShaderGL */ "./src/engine/webgl/primitives2d/d2SingleLine/D2LineShaderGL.ts");



var ED2LineProgramBufferIndex = /* @__PURE__ */ ((ED2LineProgramBufferIndex2) => {
  ED2LineProgramBufferIndex2[ED2LineProgramBufferIndex2["objPositions"] = 0] = "objPositions";
  ED2LineProgramBufferIndex2[ED2LineProgramBufferIndex2["param"] = 1] = "param";
  ED2LineProgramBufferIndex2[ED2LineProgramBufferIndex2["profile"] = 2] = "profile";
  ED2LineProgramBufferIndex2[ED2LineProgramBufferIndex2["color"] = 3] = "color";
  return ED2LineProgramBufferIndex2;
})(ED2LineProgramBufferIndex || {});
const lineProgramObjPositionUnitSize = 4;
const lineProgramParamUnitSize = 4;
const lineProgramProfileUnitSize = 4;
const lineProgramColorUnitSize = 4;
class D2LineObjectGL extends _ObjectGL__WEBPACK_IMPORTED_MODULE_0__.ObjectGL {
  constructor(objectBlendBuffer, primitiveItemBitIndex, data) {
    super(objectBlendBuffer);
    this.primitiveItemBitIndex = primitiveItemBitIndex;
    this.update(data);
  }
  syncStatus(data) {
    this.update(data);
  }
  update(data) {
    if (this.objectBlendBuffer === null) {
      throw new Error(`the buffer does not exist.`);
    }
    this.objectBlendBuffer.updateBaseBufferByIndex(
      0 /* objPositions */,
      this.primitiveItemBitIndex,
      _D2LineShaderGL__WEBPACK_IMPORTED_MODULE_1__.D2LineShaderGL.createObjPositionData(data)
    );
    this.objectBlendBuffer.updateBaseBufferByIndex(
      1 /* param */,
      this.primitiveItemBitIndex,
      _D2LineShaderGL__WEBPACK_IMPORTED_MODULE_1__.D2LineShaderGL.createParamData(data)
    );
    this.objectBlendBuffer.updateBaseBufferByIndex(
      2 /* profile */,
      this.primitiveItemBitIndex,
      _D2LineShaderGL__WEBPACK_IMPORTED_MODULE_1__.D2LineShaderGL.createProfileData(data)
    );
    this.objectBlendBuffer.updateBaseBufferByIndex(
      3 /* color */,
      this.primitiveItemBitIndex,
      _D2LineShaderGL__WEBPACK_IMPORTED_MODULE_1__.D2LineShaderGL.createColorData(data)
    );
  }
  remove() {
    if (this.objectBlendBuffer === null) {
      throw new Error(`the buffer does not exist.`);
    }
    const isEmpty = this.objectBlendBuffer.remove(this.primitiveItemBitIndex);
    this.objectBlendBuffer = null;
    return isEmpty;
  }
}


/***/ }),

/***/ "./src/engine/webgl/primitives2d/d2SingleLine/D2LineShaderGL.ts":
/*!**********************************************************************!*\
  !*** ./src/engine/webgl/primitives2d/d2SingleLine/D2LineShaderGL.ts ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2LineShaderGL: () => (/* binding */ D2LineShaderGL)
/* harmony export */ });
/* harmony import */ var _config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../config/PrimitiveProfile */ "./src/engine/config/PrimitiveProfile.ts");


class D2LineShaderGL {
  static createVS() {
    return `
            precision mediump float;
            attribute lowp float a_index;
            attribute vec4 a_objPosition;  // [sx, sy, ex, ey]
            attribute vec4 a_param;  // [alpha, is-round, stroke-width, is-solid]
            attribute vec4 a_profile;  // [seg-size, gap-size, is-fixed-stroke-width, <un-use>]
            attribute vec4 a_color;
            uniform mat4 u_matrix;
            uniform float u_zoomRatio;
            varying vec4 v_objPosition;
            varying vec2 v_position;
            varying vec4 v_param;
            varying vec4 v_profile;
            varying vec4 v_color;
            varying vec4 v_options;
            varying float v_zoomRatio;

            float getEqual(float value, float refer) {
                return value == refer ? 1.0 : 0.0;
            }
            float getLess(float a, float b) {
                return a < b ? 1.0 : 0.0;
            }

            void main() {
                float round = a_param[1];
                float width = a_param[2];
                bool isFixedStrokeWidth = a_profile[2] == 1.0;
                if (isFixedStrokeWidth) {
                    width = width / u_zoomRatio;
                }
                float halfWidth = width / 2.0;
                v_param = vec4(a_param[0], a_param[1], width, a_param[3]);
                vec4 position = vec4(0.0, 0.0, 0.0, 1.0);
                // \u7EBF\u6BB5\u7684\u7EC8\u70B9\u5411\u91CF - \u7EBF\u6BB5\u7684\u8D77\u70B9\u5411\u91CF
                // \u5373\u7EBF\u6BB5\u5411\u91CF
                vec2 lineDirect = a_objPosition.zw - a_objPosition.xy;
                vec2 norLineDirect = normalize(lineDirect);
                // \u5C06\u7EBF\u6BB5\u7684\u5355\u4F4D\u5411\u91CF\u7ED5\u539F\u70B9\u9006\u65F6\u9488\u65CB\u8F6C 90 \u5EA6
                vec2 vertical = vec2(-norLineDirect.y, norLineDirect.x);
                // \u53C2\u8003 ./doc \u56FE\u793A
                // \u6C42"\u5BBD\u7EBF"\u77E9\u5F62\u56DB\u4E2A\u9876\u70B9\u7684\u5750\u6807
                vec2 v1 = a_objPosition.xy;
                vec2 v2 = a_objPosition.zw;
                vec2 v3 = vec2(vertical * halfWidth);
                vec2 v4 = norLineDirect * halfWidth * round;
                vec2 leftTop = v1 - v3 - v4;
                vec2 leftBottom = v2 - v3 + v4;
                vec2 rightBottom = v2 + v3 + v4;
                vec2 rightTop = v1 + v3 - v4;
                position.xy = 
                    leftTop * ((getEqual(a_index, 0.0) + getEqual(a_index, 3.0)))
                    + leftBottom * (getEqual(a_index, 1.0))
                    + rightBottom * (getEqual(a_index, 2.0) + getEqual(a_index, 4.0))
                    + rightTop * (getEqual(a_index, 5.0));
                gl_Position = u_matrix * vec4(position.xy, 0.0, 1.0);
                v_position = position.xy;
                v_objPosition = a_objPosition;
                float minW = halfWidth;
                minW = getLess(0.0, minW) * minW;
                v_options = vec4(halfWidth, minW, lineDirect.x, lineDirect.y);
                v_profile = a_profile;
                v_color = a_color;
                v_zoomRatio = u_zoomRatio;
            }
        `;
  }
  static createFS() {
    return `
            precision mediump float;
            varying vec4 v_objPosition;  // [sx, sy, ex, ey]
            varying vec2 v_position;
            varying vec4 v_param;
            varying vec4 v_profile;
            varying vec4 v_color;
            varying vec4 v_options;  // [halfWidth, minW, lineDirect.x, lineDirect.y]
            varying float v_zoomRatio;
        
            // \u5411\u91CF A \u5728\u5411\u91CF B \u4E0A\u7684\u6295\u5F71
            vec2 project(vec2 a, vec2 b) {
                float dotProduct = dot(a, b);
                float squaredLengthB = dot(b, b);
                if (squaredLengthB == 0.0) {
                    return vec2(0.0);
                }
                return dotProduct / squaredLengthB * b;
            }
            // \u5411\u91CF A \u5728\u5411\u91CF B \u4E0A\u7684\u6295\u5F71
            vec2 projectVector(vec2 A, vec2 B) {
                // \u8BA1\u7B97\u5411\u91CF B \u7684\u5355\u4F4D\u5411\u91CF
                vec2 unitB = normalize(B);                
                // \u8BA1\u7B97\u5411\u91CF A \u5728\u5411\u91CF B \u4E0A\u7684\u6295\u5F71\u957F\u5EA6
                float projectionLength = dot(A, unitB);
                if (projectionLength == 0.0) {
                    return vec2(0.0);
                }
                // \u8BA1\u7B97\u6295\u5F71\u5411\u91CF
                return projectionLength * unitB;
            }

            void main() {
                float halfWidth = v_options[0];
                float minW = v_options[1];
                float segLength = v_profile[0];
                float gapLength = v_profile[1];
                float alpha = v_param[0];
                bool isFixedStrokeWidth = v_profile[2] == 1.0;
                if (isFixedStrokeWidth) {
                    segLength = segLength / v_zoomRatio;
                    gapLength = gapLength / v_zoomRatio;
                }
                // \u7EBF\u6BB5\u5411\u91CF
                vec2 lineDirect = vec2(v_options[2], v_options[3]);
                vec2 norLineDirect = normalize(lineDirect);
                float lineLen = length(lineDirect);
                vec2 lineStart2Corner = v_position - v_objPosition.xy;
                float v = dot(lineStart2Corner, norLineDirect);
                if (v < 0.0) {
                    // v < 0.0
                    // \u6B64\u65F6 lineStart2Corner \u4F4D\u4E8E\u7EBF\u6BB5\u8D77\u70B9\u5916\u4FA7\u7684\u77E9\u5F62\u8303\u56F4\u5185
                    float radiuLen = length(lineStart2Corner);
                    if (radiuLen > halfWidth) {
                        discard;
                    } else {
                        gl_FragColor = vec4(v_color.xyz, alpha);
                    }
                } else if (v > lineLen) {
                    // v > lineLen
                    // \u6B64\u65F6 lineStart2Corner \u4F4D\u4E8E\u7EBF\u6BB5\u7EC8\u70B9\u5916\u4FA7\u7684\u77E9\u5F62\u8303\u56F4\u5185
                    float radiuLen = length(v_position - v_objPosition.zw);
                    if (radiuLen > halfWidth) {
                        discard;
                    } else {
                        gl_FragColor = vec4(v_color.xyz, alpha);
                    }
                } else {
                    if (v_param[3] == 1.0) {
                        gl_FragColor = vec4(v_color.xyz, alpha);
                        return;
                    }
                    vec2 cl = project(lineStart2Corner, norLineDirect);
                    float pLen = length(cl);
                    float m = mod(pLen, (segLength + gapLength));
                    float c = floor(pLen / (segLength + gapLength));
                    if (m <= segLength) {
                        gl_FragColor = vec4(v_color.xyz, alpha);
                    } else {
                        vec2 scaleVec1 = norLineDirect * (c * (segLength + gapLength) + segLength);
                        vec2 scaleVec2 = norLineDirect * ((c + 1.0) * (segLength + gapLength));
                        if (length(lineDirect) <= length(scaleVec2)) {
                            gl_FragColor = vec4(v_color.xyz, alpha);
                        } else {
                            float radiuLen1 = length(lineStart2Corner - scaleVec1);
                            float radiuLen2 = length(lineStart2Corner - scaleVec2);
                            if (v_param[1] == 1.0 && (radiuLen1 <= halfWidth || radiuLen2 <= halfWidth)) {
                                gl_FragColor = vec4(v_color.xyz, alpha);
                            } else {
                                discard;
                            }
                        }
                    }
                }
            }
        `;
  }
  static createObjPositionData(data) {
    const { sx, sy, ex, ey } = data;
    return [sx, sy, ex, ey];
  }
  static createParamData(data) {
    const { strokeWidth, strokeColorData, alpha, lineCap, isSolid } = data;
    return [alpha * strokeColorData.a, lineCap === _config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_0__.ECanvas2DLineCap.ROUND ? 1 : 0, strokeWidth, isSolid ? 1 : 0];
  }
  static createProfileData(data) {
    const { segSize, gapSize, isFixedStrokeWidth } = data;
    return [segSize, gapSize, isFixedStrokeWidth ? 1 : 0, 0];
  }
  static createColorData(data) {
    const { strokeColorData } = data;
    return [strokeColorData.r, strokeColorData.g, strokeColorData.b, strokeColorData.a];
  }
}


/***/ }),

/***/ "./src/engine/webgl/primitives2d/d2SinglePoint/D2PointInstancedProgramGL.ts":
/*!**********************************************************************************!*\
  !*** ./src/engine/webgl/primitives2d/d2SinglePoint/D2PointInstancedProgramGL.ts ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2PointInstancedProgramGL: () => (/* binding */ D2PointInstancedProgramGL)
/* harmony export */ });
/* harmony import */ var _InstancedProgramGL__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../InstancedProgramGL */ "./src/engine/webgl/primitives2d/InstancedProgramGL.ts");
/* harmony import */ var _D2PointShaderGL__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./D2PointShaderGL */ "./src/engine/webgl/primitives2d/d2SinglePoint/D2PointShaderGL.ts");
/* harmony import */ var _D2PointObjectGL__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./D2PointObjectGL */ "./src/engine/webgl/primitives2d/d2SinglePoint/D2PointObjectGL.ts");




const INIT_INDEX_DATA = [0, 1, 2];
class D2PointInstancedProgramGL extends _InstancedProgramGL__WEBPACK_IMPORTED_MODULE_0__.InstancedProgramGL {
  constructor(renderer) {
    super(renderer, _D2PointShaderGL__WEBPACK_IMPORTED_MODULE_1__.D2PointShaderGL.createVS(), _D2PointShaderGL__WEBPACK_IMPORTED_MODULE_1__.D2PointShaderGL.createFS(), new Float32Array(INIT_INDEX_DATA));
    this._a_objPosition = this.getWebGLAttributeLocation(`a_objPosition`);
    this._a_param = this.getWebGLAttributeLocation(`a_param`);
    this._a_color = this.getWebGLAttributeLocation(`a_color`);
    this._u_matrix = this.getWebGLUniformLocation(`u_matrix`);
    this._u_zoomRatio = this.getWebGLUniformLocation(`u_zoomRatio`);
  }
  setEnableColor() {
    this.setEnableLoction(this.renderer.getWebGLAttributeLocation(this.webGLProgram, `a_color`));
  }
  setDisableColor() {
    this.setDisableLoction(this.renderer.getWebGLAttributeLocation(this.webGLProgram, `a_color`));
  }
  render(scene, plane, objectBlendBuffer) {
    const gl = this.renderer.gl;
    gl.useProgram(this.webGLProgram);
    this.setEnable();
    gl.bindBuffer(gl.ARRAY_BUFFER, objectBlendBuffer.getBaseBuffer(_D2PointObjectGL__WEBPACK_IMPORTED_MODULE_2__.ED2PointProgramBufferIndex.objPositions).webGLBuffer);
    gl.vertexAttribPointer(this._a_objPosition, _D2PointObjectGL__WEBPACK_IMPORTED_MODULE_2__.pointProgramObjPositionUnitSize, gl.FLOAT, false, 0, 0);
    gl.bindBuffer(gl.ARRAY_BUFFER, objectBlendBuffer.getBaseBuffer(_D2PointObjectGL__WEBPACK_IMPORTED_MODULE_2__.ED2PointProgramBufferIndex.param).webGLBuffer);
    gl.vertexAttribPointer(this._a_param, _D2PointObjectGL__WEBPACK_IMPORTED_MODULE_2__.pointProgramParamUnitSize, gl.FLOAT, false, 0, 0);
    gl.bindBuffer(gl.ARRAY_BUFFER, objectBlendBuffer.getBaseBuffer(_D2PointObjectGL__WEBPACK_IMPORTED_MODULE_2__.ED2PointProgramBufferIndex.color).webGLBuffer);
    gl.vertexAttribPointer(this._a_color, _D2PointObjectGL__WEBPACK_IMPORTED_MODULE_2__.pointProgramColorUnitSize, gl.FLOAT, false, 0, 0);
    const viewMatrix4 = scene.camera.getViewMatrix4(true);
    gl.uniformMatrix4fv(this._u_matrix, false, new Float32Array(viewMatrix4.data));
    const zoomRatio = scene.camera.getZoomRatio();
    gl.uniform1f(this._u_zoomRatio, zoomRatio);
    this.instancedArrays.drawArraysInstancedANGLE(gl.TRIANGLES, 0, INIT_INDEX_DATA.length, objectBlendBuffer.getSize());
    this.setDisable();
  }
}


/***/ }),

/***/ "./src/engine/webgl/primitives2d/d2SinglePoint/D2PointObjectGL.ts":
/*!************************************************************************!*\
  !*** ./src/engine/webgl/primitives2d/d2SinglePoint/D2PointObjectGL.ts ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2PointObjectGL: () => (/* binding */ D2PointObjectGL),
/* harmony export */   ED2PointProgramBufferIndex: () => (/* binding */ ED2PointProgramBufferIndex),
/* harmony export */   pointProgramColorUnitSize: () => (/* binding */ pointProgramColorUnitSize),
/* harmony export */   pointProgramObjPositionUnitSize: () => (/* binding */ pointProgramObjPositionUnitSize),
/* harmony export */   pointProgramParamUnitSize: () => (/* binding */ pointProgramParamUnitSize)
/* harmony export */ });
/* harmony import */ var _ObjectGL__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ObjectGL */ "./src/engine/webgl/primitives2d/ObjectGL.ts");
/* harmony import */ var _D2PointShaderGL__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./D2PointShaderGL */ "./src/engine/webgl/primitives2d/d2SinglePoint/D2PointShaderGL.ts");



var ED2PointProgramBufferIndex = /* @__PURE__ */ ((ED2PointProgramBufferIndex2) => {
  ED2PointProgramBufferIndex2[ED2PointProgramBufferIndex2["objPositions"] = 0] = "objPositions";
  ED2PointProgramBufferIndex2[ED2PointProgramBufferIndex2["param"] = 1] = "param";
  ED2PointProgramBufferIndex2[ED2PointProgramBufferIndex2["color"] = 2] = "color";
  return ED2PointProgramBufferIndex2;
})(ED2PointProgramBufferIndex || {});
const pointProgramObjPositionUnitSize = 4;
const pointProgramParamUnitSize = 4;
const pointProgramColorUnitSize = 4;
class D2PointObjectGL extends _ObjectGL__WEBPACK_IMPORTED_MODULE_0__.ObjectGL {
  constructor(objectBlendBuffer, primitiveItemBitIndex, data) {
    super(objectBlendBuffer);
    this.primitiveItemBitIndex = primitiveItemBitIndex;
    this.update(data);
  }
  syncStatus(data) {
    this.update(data);
  }
  update(data) {
    if (this.objectBlendBuffer === null) {
      throw new Error(`the buffer does not exist.`);
    }
    this.objectBlendBuffer.updateBaseBufferByIndex(
      0 /* objPositions */,
      this.primitiveItemBitIndex,
      _D2PointShaderGL__WEBPACK_IMPORTED_MODULE_1__.D2PointShaderGL.createObjPositionData(data)
    );
    this.objectBlendBuffer.updateBaseBufferByIndex(
      1 /* param */,
      this.primitiveItemBitIndex,
      _D2PointShaderGL__WEBPACK_IMPORTED_MODULE_1__.D2PointShaderGL.createParamData(data)
    );
    this.objectBlendBuffer.updateBaseBufferByIndex(
      2 /* color */,
      this.primitiveItemBitIndex,
      _D2PointShaderGL__WEBPACK_IMPORTED_MODULE_1__.D2PointShaderGL.createColorData(data)
    );
  }
  remove() {
    if (this.objectBlendBuffer === null) {
      throw new Error(`the buffer does not exist.`);
    }
    const isEmpty = this.objectBlendBuffer.remove(this.primitiveItemBitIndex);
    this.objectBlendBuffer = null;
    return isEmpty;
  }
}


/***/ }),

/***/ "./src/engine/webgl/primitives2d/d2SinglePoint/D2PointShaderGL.ts":
/*!************************************************************************!*\
  !*** ./src/engine/webgl/primitives2d/d2SinglePoint/D2PointShaderGL.ts ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2PointShaderGL: () => (/* binding */ D2PointShaderGL)
/* harmony export */ });
/* harmony import */ var _config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../config/PrimitiveProfile */ "./src/engine/config/PrimitiveProfile.ts");


class D2PointShaderGL {
  static createVS() {
    return `
            attribute lowp float a_index;
            attribute vec4 a_objPosition;  // [cx, cy, size, shape]
            attribute vec4 a_param;  // [alpha, is-round, stroke-width, is-fixed-pixel-width]
            attribute vec4 a_color;
            uniform mat4 u_matrix;
            uniform float u_zoomRatio;
            varying vec4 v_objPosition;
            varying vec4 v_param;
            varying vec4 v_position;
            varying vec4 v_color;
            varying float v_zoomRatio;

            float getEqual(float value, float refer) {
                return value == refer ? 1.0 : 0.0;
            }

            void main() {
                if (a_objPosition[2] < 0.0) {
                    return;
                }
                float radius = a_objPosition.z / u_zoomRatio;
                vec4 position = vec4(a_objPosition.x, a_objPosition.y, 0.0, 1.0);
                if (a_objPosition.w == 2.0) {
                    // \u4E09\u89D2\u5F62
                    //...
                } else if (a_objPosition.w == 1.0) {
                    // \u5706\u70B9
                    radius = radius * 2.0;
                }
                vec2 top = 
                    vec2(a_objPosition.x, a_objPosition.y) 
                    + vec2(0, radius);
                vec2 leftBottom = 
                    vec2(a_objPosition.x, a_objPosition.y) 
                    + vec2(-1.0 * (sqrt(3.0) * radius / 2.0), -1.0 * (radius / 2.0));
                vec2 rightBottom = 
                    vec2(a_objPosition.x, a_objPosition.y) 
                    + vec2(sqrt(3.0) * radius / 2.0, -1.0 * (radius / 2.0));
                position.xy = top * getEqual(a_index, 0.0) + leftBottom * getEqual(a_index, 1.0) + rightBottom * getEqual(a_index, 2.0);
                gl_Position = u_matrix * position;
                v_objPosition = a_objPosition;
                v_position = position;
                v_color = a_color;
                v_param = a_param;
                v_zoomRatio = u_zoomRatio;
            }
        `;
  }
  static createFS() {
    return `
            precision mediump float;
            varying vec4 v_objPosition;
            varying vec4 v_position;
            varying vec4 v_param;
            varying vec4 v_color;
            varying float v_zoomRatio;

            void main() {
                float alpha = v_param[0];
                float strokWidth = v_param[1];
                float radius = v_objPosition.z / v_zoomRatio;
                if (v_objPosition.w == 2.0) {
                    // \u4E09\u89D2\u5F62
                    //...
                } else if (v_objPosition.w == 1.0) {
                    // \u5706\u70B9
                    if (length(v_position.xy - v_objPosition.xy) > radius) {
                        discard;
                    }
                }
                gl_FragColor = vec4(v_color.xyz, alpha);
            }
        `;
  }
  static createObjPositionData(data) {
    const { cx, cy, size, shape } = data;
    return [cx, cy, size, shape === _config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_0__.ED2PointShape.DOT ? 1 : 2];
  }
  static createParamData(data) {
    const { alpha, strokeColorData } = data;
    return [alpha * strokeColorData.a, 1, 1, 0];
  }
  static createColorData(data) {
    const { strokeColorData } = data;
    return [strokeColorData.r, strokeColorData.g, strokeColorData.b, strokeColorData.a];
  }
}


/***/ }),

/***/ "./src/engine/webgl/primitives2d/d2SingleText/D2TextBufferGL.ts":
/*!**********************************************************************!*\
  !*** ./src/engine/webgl/primitives2d/d2SingleText/D2TextBufferGL.ts ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2TextBufferGL: () => (/* binding */ D2TextBufferGL)
/* harmony export */ });
/* harmony import */ var _common_utils_ObjectBlendBuffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../common/utils/ObjectBlendBuffer */ "./src/engine/common/utils/ObjectBlendBuffer.ts");
/* harmony import */ var _D2TextObjectGL__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./D2TextObjectGL */ "./src/engine/webgl/primitives2d/d2SingleText/D2TextObjectGL.ts");



class D2TextBufferGL {
  static createObjectBlendBuffer(scene) {
    const objectBlendBuffer = new _common_utils_ObjectBlendBuffer__WEBPACK_IMPORTED_MODULE_0__.ObjectBlendBuffer(
      Math.max(_D2TextObjectGL__WEBPACK_IMPORTED_MODULE_1__.textProgramIndicesUnitSize, _D2TextObjectGL__WEBPACK_IMPORTED_MODULE_1__.textProgramObjPositionUnitSize, _D2TextObjectGL__WEBPACK_IMPORTED_MODULE_1__.textProgramParamUnitSize, _D2TextObjectGL__WEBPACK_IMPORTED_MODULE_1__.textProgramColorUnitSize) * 3,
      [
        {
          size: _D2TextObjectGL__WEBPACK_IMPORTED_MODULE_1__.textProgramIndicesUnitSize,
          creator: (byteSize) => {
            return scene.renderer.createWebGLElementBufferBySizeUseUint32(byteSize, scene.renderer.gl.STATIC_DRAW);
          }
        },
        {
          size: _D2TextObjectGL__WEBPACK_IMPORTED_MODULE_1__.textProgramObjPositionUnitSize,
          creator: (byteSize) => {
            return scene.renderer.createWebGLArrayBufferBySizeUseFloat32(byteSize, scene.renderer.gl.STATIC_DRAW);
          }
        },
        {
          size: _D2TextObjectGL__WEBPACK_IMPORTED_MODULE_1__.textProgramParamUnitSize,
          creator: (byteSize) => {
            return scene.renderer.createWebGLArrayBufferBySizeUseFloat32(byteSize, scene.renderer.gl.STATIC_DRAW);
          }
        },
        {
          size: _D2TextObjectGL__WEBPACK_IMPORTED_MODULE_1__.textProgramColorUnitSize,
          creator: (byteSize) => {
            return scene.renderer.createWebGLArrayBufferBySizeUseFloat32(byteSize, scene.renderer.gl.STATIC_DRAW);
          }
        }
      ]
    );
    return objectBlendBuffer;
  }
}


/***/ }),

/***/ "./src/engine/webgl/primitives2d/d2SingleText/D2TextObjectGL.ts":
/*!**********************************************************************!*\
  !*** ./src/engine/webgl/primitives2d/d2SingleText/D2TextObjectGL.ts ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2TextObjectGL: () => (/* binding */ D2TextObjectGL),
/* harmony export */   ED2TextProgramBufferIndex: () => (/* binding */ ED2TextProgramBufferIndex),
/* harmony export */   textProgramColorUnitSize: () => (/* binding */ textProgramColorUnitSize),
/* harmony export */   textProgramIndicesUnitSize: () => (/* binding */ textProgramIndicesUnitSize),
/* harmony export */   textProgramObjPositionUnitSize: () => (/* binding */ textProgramObjPositionUnitSize),
/* harmony export */   textProgramParamUnitSize: () => (/* binding */ textProgramParamUnitSize)
/* harmony export */ });
/* harmony import */ var _ObjectGL__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ObjectGL */ "./src/engine/webgl/primitives2d/ObjectGL.ts");
/* harmony import */ var _D2TextShaderGL__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./D2TextShaderGL */ "./src/engine/webgl/primitives2d/d2SingleText/D2TextShaderGL.ts");



var ED2TextProgramBufferIndex = /* @__PURE__ */ ((ED2TextProgramBufferIndex2) => {
  ED2TextProgramBufferIndex2[ED2TextProgramBufferIndex2["indices"] = 0] = "indices";
  ED2TextProgramBufferIndex2[ED2TextProgramBufferIndex2["objPositions"] = 1] = "objPositions";
  ED2TextProgramBufferIndex2[ED2TextProgramBufferIndex2["param"] = 2] = "param";
  ED2TextProgramBufferIndex2[ED2TextProgramBufferIndex2["color"] = 3] = "color";
  return ED2TextProgramBufferIndex2;
})(ED2TextProgramBufferIndex || {});
const textProgramIndicesUnitSize = 1;
const textProgramObjPositionUnitSize = 2;
const textProgramParamUnitSize = 4;
const textProgramColorUnitSize = 4;
class D2TextObjectGL extends _ObjectGL__WEBPACK_IMPORTED_MODULE_0__.ObjectGL {
  constructor(objectBlendBuffer, primitiveItemBitIndex, data) {
    super(objectBlendBuffer);
    this.primitiveItemBitIndex = primitiveItemBitIndex;
    this._refreshToken = "";
    this._vertexMixinData = {
      positions: [],
      indices: []
    };
    this.update(data);
  }
  syncStatus(data) {
    this.update(data);
  }
  update(data) {
    if (this.objectBlendBuffer === null) {
      throw new Error(`the buffer does not exist.`);
    }
    if (this._refreshToken !== data.refreshToken) {
      this._vertexMixinData.indices = data.vertexData.indices;
      this._vertexMixinData.positions = _D2TextShaderGL__WEBPACK_IMPORTED_MODULE_1__.D2TextShaderGL.translatePositions(data.vertexData.positions);
      this.objectBlendBuffer.overwriteBufferData(0 /* indices */, new Uint16Array(this._vertexMixinData.indices));
      this.objectBlendBuffer.overwriteBufferData(1 /* objPositions */, new Float32Array(this._vertexMixinData.positions));
    }
    this.objectBlendBuffer.updateBaseBufferByIndex(
      2 /* param */,
      this.primitiveItemBitIndex,
      _D2TextShaderGL__WEBPACK_IMPORTED_MODULE_1__.D2TextShaderGL.createParamData(data)
    );
    this.objectBlendBuffer.updateBaseBufferByIndex(
      3 /* color */,
      this.primitiveItemBitIndex,
      _D2TextShaderGL__WEBPACK_IMPORTED_MODULE_1__.D2TextShaderGL.createColorData(data)
    );
  }
  remove() {
    if (this.objectBlendBuffer === null) {
      throw new Error(`the buffer does not exist.`);
    }
    const isEmpty = this.objectBlendBuffer.remove(this.primitiveItemBitIndex, new Float32Array([]));
    this.objectBlendBuffer.overwriteBufferData(0 /* indices */, new Uint16Array([]));
    this.objectBlendBuffer.overwriteBufferData(1 /* objPositions */, new Float32Array([]));
    this.objectBlendBuffer = null;
    return isEmpty;
  }
}


/***/ }),

/***/ "./src/engine/webgl/primitives2d/d2SingleText/D2TextProgramGL.ts":
/*!***********************************************************************!*\
  !*** ./src/engine/webgl/primitives2d/d2SingleText/D2TextProgramGL.ts ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2TextProgramGL: () => (/* binding */ D2TextProgramGL)
/* harmony export */ });
/* harmony import */ var _D2TextShaderGL__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./D2TextShaderGL */ "./src/engine/webgl/primitives2d/d2SingleText/D2TextShaderGL.ts");
/* harmony import */ var _D2TextObjectGL__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./D2TextObjectGL */ "./src/engine/webgl/primitives2d/d2SingleText/D2TextObjectGL.ts");
/* harmony import */ var _ProgramGL__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ProgramGL */ "./src/engine/webgl/primitives2d/ProgramGL.ts");




class D2TextProgramGL extends _ProgramGL__WEBPACK_IMPORTED_MODULE_2__.ProgramGL {
  constructor(renderer) {
    super(renderer, _D2TextShaderGL__WEBPACK_IMPORTED_MODULE_0__.D2TextShaderGL.createVS(), _D2TextShaderGL__WEBPACK_IMPORTED_MODULE_0__.D2TextShaderGL.createFS());
    this._a_objPosition = this.getWebGLAttributeLocation(`a_objPosition`);
    this._u_param = this.getWebGLUniformLocation(`u_param`);
    this._u_color = this.getWebGLUniformLocation(`u_color`);
    this._u_matrix = this.getWebGLUniformLocation(`u_matrix`);
  }
  setEnableColor() {
  }
  setDisableColor() {
  }
  render(scene, plane, objectBlendBuffer) {
    const gl = this.renderer.gl;
    gl.useProgram(this.webGLProgram);
    this.setEnable();
    gl.bindBuffer(gl.ARRAY_BUFFER, objectBlendBuffer.getBaseBuffer(_D2TextObjectGL__WEBPACK_IMPORTED_MODULE_1__.ED2TextProgramBufferIndex.objPositions).webGLBuffer);
    gl.vertexAttribPointer(this._a_objPosition, _D2TextObjectGL__WEBPACK_IMPORTED_MODULE_1__.textProgramObjPositionUnitSize, gl.FLOAT, false, 0, 0);
    const viewMatrix4 = scene.camera.getViewMatrix4(true);
    gl.uniformMatrix4fv(this._u_matrix, false, new Float32Array(viewMatrix4.data));
    const params = objectBlendBuffer.getBaseBuffer(_D2TextObjectGL__WEBPACK_IMPORTED_MODULE_1__.ED2TextProgramBufferIndex.param).data;
    const colos = objectBlendBuffer.getBaseBuffer(_D2TextObjectGL__WEBPACK_IMPORTED_MODULE_1__.ED2TextProgramBufferIndex.color).data;
    gl.uniform4f(this._u_param, params[0], params[1], params[2], params[3]);
    gl.uniform4f(this._u_color, colos[0], colos[1], colos[2], colos[3]);
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, objectBlendBuffer.getBaseBuffer(_D2TextObjectGL__WEBPACK_IMPORTED_MODULE_1__.ED2TextProgramBufferIndex.indices).webGLBuffer);
    gl.drawElements(gl.TRIANGLES, objectBlendBuffer.getBufferSize(_D2TextObjectGL__WEBPACK_IMPORTED_MODULE_1__.ED2TextProgramBufferIndex.indices), gl.UNSIGNED_SHORT, 0);
    this.setDisable();
  }
}


/***/ }),

/***/ "./src/engine/webgl/primitives2d/d2SingleText/D2TextShaderGL.ts":
/*!**********************************************************************!*\
  !*** ./src/engine/webgl/primitives2d/d2SingleText/D2TextShaderGL.ts ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2TextShaderGL: () => (/* binding */ D2TextShaderGL)
/* harmony export */ });
/* harmony import */ var _common_InsConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../common/InsConfig */ "./src/engine/common/InsConfig.ts");
/* harmony import */ var _common_math_Calculation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../common/math/Calculation */ "./src/engine/common/math/Calculation.ts");



class D2TextShaderGL {
  static createVS() {
    return `
			precision mediump float;
            attribute vec2 a_objPosition;  // [x, y]
            uniform vec4 u_param;  // [alpha, font-size, <un-use>, <un-use>]
            uniform vec4 u_color;
            uniform mat4 u_matrix;
			varying vec4 v_param;
            varying vec4 v_color;

            void main() {
                vec4 position = vec4(a_objPosition.x, a_objPosition.y, 0.0, 1.0);
                gl_Position = u_matrix * position;
                v_color = u_color;
                v_param = u_param;
            }
        `;
  }
  static createFS() {
    return `
            precision mediump float;
            varying vec4 v_param;
            varying vec4 v_color;

            void main() {
				float alpha = v_param[0];
				gl_FragColor = vec4(v_color.xyz, alpha);
            }
        `;
  }
  static createParamData(data) {
    const { alpha, strokeColorData } = data;
    return [alpha * strokeColorData.a, 0, 0, 0];
  }
  static createColorData(data) {
    const { strokeColorData } = data;
    return [strokeColorData.r, strokeColorData.g, strokeColorData.b, strokeColorData.a];
  }
  static translatePositions(sourcePositions) {
    const allPositions = [];
    for (let i = 0; i < sourcePositions.length; i++) {
      allPositions.push((0,_common_math_Calculation__WEBPACK_IMPORTED_MODULE_1__.mm2px)(sourcePositions[i], _common_InsConfig__WEBPACK_IMPORTED_MODULE_0__.InsConfig.DPI[0]));
    }
    return allPositions;
  }
}


/***/ }),

/***/ "./src/engine/webgl/renderer/RendererGL.ts":
/*!*************************************************!*\
  !*** ./src/engine/webgl/renderer/RendererGL.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   RendererGL: () => (/* binding */ RendererGL)
/* harmony export */ });
/* harmony import */ var _common_Renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../common/Renderer */ "./src/engine/common/Renderer.ts");
/* harmony import */ var _common_utils_BaseBuffer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../common/utils/BaseBuffer */ "./src/engine/common/utils/BaseBuffer.ts");
/* harmony import */ var _utils_BaseBufferGL__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/BaseBufferGL */ "./src/engine/webgl/utils/BaseBufferGL.ts");

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};



class RendererGL extends _common_Renderer__WEBPACK_IMPORTED_MODULE_0__.Renderer {
  constructor(canvasElement, webglAttributes) {
    super(canvasElement);
    this.gl = canvasElement.getContext("webgl", __spreadValues({
      depth: false,
      antialias: true,
      stencil: false,
      aplha: false,
      premultipliedAplha: false
    }, webglAttributes));
    if (!this.gl) {
      throw new Error(`failed to initialize WebGL.`);
    }
    this._isCoreGraphic = false;
    this._frameBufferStack = [];
    this.gl.viewport(0, 0, 1, 1);
  }
  get isCoreGraphic() {
    return this._isCoreGraphic;
  }
  set isCoreGraphic(value) {
    this._isCoreGraphic = value;
  }
  clearCanvas() {
    const { width, height, origin } = this;
    this.gl.viewport(0, 0, width, height);
    this.gl.clearColor(0, 0, 0, 1);
    this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);
  }
  getWebGLAttributeLocation(webGLProgram, name) {
    const loc = this.gl.getAttribLocation(webGLProgram, name);
    if (loc < 0 || loc === null) {
      throw new Error(`failed to get attribute-location ${name} in ${webGLProgram}.`);
    }
    return loc;
  }
  getWebGLUniformLocation(webGLProgram, name) {
    const loc = this.gl.getUniformLocation(webGLProgram, name);
    if (loc === null) {
      throw new Error(`failed to get uniform-location ${name} in ${webGLProgram}.`);
    }
    return loc;
  }
  createShader(type, sourceCode) {
    const shader = this.gl.createShader(type);
    if (shader === null) {
      throw new Error(`failed to get create webgl shader ${type}.`);
    }
    this.gl.shaderSource(shader, sourceCode);
    this.gl.compileShader(shader);
    if (!this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS)) {
      const msg = this.gl.getShaderInfoLog(shader);
      throw new Error(msg || `failed to get compile webgl shader ${type}.`);
    }
    return shader;
  }
  createProgram(vs, fs) {
    const vertexShader = this.createShader(this.gl.VERTEX_SHADER, vs);
    const fragmentShader = this.createShader(this.gl.FRAGMENT_SHADER, fs);
    const webGLProgram = this.gl.createProgram();
    if (webGLProgram === null) {
      throw new Error(`failed to get create webgl program.`);
    }
    this.gl.attachShader(webGLProgram, vertexShader);
    this.gl.attachShader(webGLProgram, fragmentShader);
    this.gl.linkProgram(webGLProgram);
    if (!this.gl.getProgramParameter(webGLProgram, this.gl.LINK_STATUS)) {
      const msg = this.gl.getProgramInfoLog(webGLProgram);
      throw new Error(msg || `failed to get link webgl program.`);
    }
    return webGLProgram;
  }
  createWebGLArrayBufferBySizeUseFloat32(byteSize, usage) {
    return new _utils_BaseBufferGL__WEBPACK_IMPORTED_MODULE_2__.BaseBufferGL(
      this.gl,
      this.gl.ARRAY_BUFFER,
      new Float32Array(byteSize / _common_utils_BaseBuffer__WEBPACK_IMPORTED_MODULE_1__.FLOAT32ARRAY_ITEM_BYTESIZE),
      _utils_BaseBufferGL__WEBPACK_IMPORTED_MODULE_2__.BaseBufferGL.createWebGLArrayBufferBySize.bind(_utils_BaseBufferGL__WEBPACK_IMPORTED_MODULE_2__.BaseBufferGL, this.gl, byteSize, usage)
    );
  }
  createWebGLElementBufferBySizeUseUint32(byteSize, usage) {
    return new _utils_BaseBufferGL__WEBPACK_IMPORTED_MODULE_2__.BaseBufferGL(
      this.gl,
      this.gl.ELEMENT_ARRAY_BUFFER,
      new Uint32Array(byteSize / _common_utils_BaseBuffer__WEBPACK_IMPORTED_MODULE_1__.UNIT32ARRAY_ITEM_BYTESIZE),
      _utils_BaseBufferGL__WEBPACK_IMPORTED_MODULE_2__.BaseBufferGL.createWebGLElementBufferBySize.bind(_utils_BaseBufferGL__WEBPACK_IMPORTED_MODULE_2__.BaseBufferGL, this.gl, byteSize, usage)
    );
  }
  createWebGLArrayBufferByArrayBuffer(data, usage) {
    return new _utils_BaseBufferGL__WEBPACK_IMPORTED_MODULE_2__.BaseBufferGL(
      this.gl,
      this.gl.ARRAY_BUFFER,
      data,
      _utils_BaseBufferGL__WEBPACK_IMPORTED_MODULE_2__.BaseBufferGL.createWebGLArrayBufferByArrayBuffer.bind(_utils_BaseBufferGL__WEBPACK_IMPORTED_MODULE_2__.BaseBufferGL, this.gl, data, usage)
    );
  }
  getInstancedArrays() {
    const ext = this.gl.getExtension(`ANGLE_instanced_arrays`);
    if (ext === null) {
      throw new Error(`failed to get webgl extension.`);
    }
    return ext;
  }
  enterfb(fb) {
    this._frameBufferStack.push(fb);
    this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, fb);
  }
  leavefb() {
    this._frameBufferStack.pop();
    const fb = this._frameBufferStack.length > 0 ? this._frameBufferStack[this._frameBufferStack.length - 1] : null;
    this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, fb);
  }
}


/***/ }),

/***/ "./src/engine/webgl/utils/BaseBufferGL.ts":
/*!************************************************!*\
  !*** ./src/engine/webgl/utils/BaseBufferGL.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BaseBufferGL: () => (/* binding */ BaseBufferGL)
/* harmony export */ });
/* harmony import */ var _common_utils_BaseBuffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../common/utils/BaseBuffer */ "./src/engine/common/utils/BaseBuffer.ts");


class BaseBufferGL extends _common_utils_BaseBuffer__WEBPACK_IMPORTED_MODULE_0__.BaseBuffer {
  constructor(gl, glArrayBufferType, data, createWebGLBuffer) {
    super(data);
    this._gl = gl;
    this._glArrayBufferType = glArrayBufferType;
    this._webGLBuffer = createWebGLBuffer();
    this.isModify = true;
  }
  static createWebGLArrayBufferBySize(gl, byteSize, usage) {
    const webGLBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, webGLBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, byteSize, usage);
    gl.bindBuffer(gl.ARRAY_BUFFER, null);
    return webGLBuffer;
  }
  static createWebGLArrayBufferByArrayBuffer(gl, data, usage) {
    const webGLBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, webGLBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, data, usage);
    gl.bindBuffer(gl.ARRAY_BUFFER, null);
    return webGLBuffer;
  }
  static createWebGLElementBufferBySize(gl, byteSize, usage) {
    const webGLBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, webGLBuffer);
    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, byteSize, usage);
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
    return webGLBuffer;
  }
  get webGLBuffer() {
    return this._webGLBuffer;
  }
  bindArrayBufferData() {
    if (!this.data || !this.isModify) {
      return;
    }
    if (this._glArrayBufferType === this._gl.ARRAY_BUFFER) {
      this._gl.bindBuffer(this._gl.ARRAY_BUFFER, this.webGLBuffer);
      this._gl.bufferData(this._gl.ARRAY_BUFFER, this.data, this._gl.STATIC_DRAW);
      this._gl.bindBuffer(this._gl.ARRAY_BUFFER, null);
    }
    if (this._glArrayBufferType === this._gl.ELEMENT_ARRAY_BUFFER) {
      this._gl.bindBuffer(this._gl.ELEMENT_ARRAY_BUFFER, this.webGLBuffer);
      this._gl.bufferData(this._gl.ELEMENT_ARRAY_BUFFER, this.data, this._gl.STATIC_DRAW);
      this._gl.bindBuffer(this._gl.ELEMENT_ARRAY_BUFFER, null);
    }
    this.isModify = false;
  }
  updateBaseBufferByIndex(offset, data) {
    if (!this.data) {
      return;
    }
    this.data.set(data, offset);
    this.isModify = true;
  }
  overwriteBufferData(arrayBuffer) {
    this.data = arrayBuffer;
    this.isModify = true;
  }
  drop() {
    this._gl.deleteBuffer(this.webGLBuffer);
  }
}


/***/ }),

/***/ "./src/geometry/primitives/BBox.Utils.ts":
/*!***********************************************!*\
  !*** ./src/geometry/primitives/BBox.Utils.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createD2ArcBbox2: () => (/* binding */ createD2ArcBbox2),
/* harmony export */   createD2CircleBbox2: () => (/* binding */ createD2CircleBbox2),
/* harmony export */   createD2LineBbox2: () => (/* binding */ createD2LineBbox2),
/* harmony export */   createD2TextBbox2: () => (/* binding */ createD2TextBbox2)
/* harmony export */ });
/* harmony import */ var _engine_common_geometry_bbox_BBox2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../engine/common/geometry/bbox/BBox2 */ "./src/engine/common/geometry/bbox/BBox2.ts");


function createD2LineBbox2(startPoint, endPoint, strokeWidth) {
  const halfWidth = strokeWidth * 0.5;
  const minX = Math.min(startPoint.x, endPoint.x) - halfWidth;
  const minY = Math.min(startPoint.y, endPoint.y) - halfWidth;
  const maxX = Math.max(startPoint.x, endPoint.x) + halfWidth;
  const maxY = Math.max(startPoint.y, endPoint.y) + halfWidth;
  return new _engine_common_geometry_bbox_BBox2__WEBPACK_IMPORTED_MODULE_0__.BBox2(minX, minY, maxX, maxY);
}
function createD2CircleBbox2(centerPoint, radius, skrokeWidth) {
  const halfWidth = radius + skrokeWidth * 0.5;
  const minX = centerPoint.x - halfWidth;
  const minY = centerPoint.y - halfWidth;
  const maxX = centerPoint.x + halfWidth;
  const maxY = centerPoint.y + halfWidth;
  return new _engine_common_geometry_bbox_BBox2__WEBPACK_IMPORTED_MODULE_0__.BBox2(minX, minY, maxX, maxY);
}
function createD2ArcBbox2(centerPoint, radius, skrokeWidth) {
  const halfWidth = radius + skrokeWidth * 0.5;
  const minX = centerPoint.x - halfWidth;
  const minY = centerPoint.y - halfWidth;
  const maxX = centerPoint.x + halfWidth;
  const maxY = centerPoint.y + halfWidth;
  return new _engine_common_geometry_bbox_BBox2__WEBPACK_IMPORTED_MODULE_0__.BBox2(minX, minY, maxX, maxY);
}
function createD2TextBbox2() {
  const minX = 0;
  const minY = 0;
  const maxX = 0;
  const maxY = 0;
  return new _engine_common_geometry_bbox_BBox2__WEBPACK_IMPORTED_MODULE_0__.BBox2(minX, minY, maxX, maxY);
}


/***/ }),

/***/ "./src/geometry/primitives/FontArray.ts":
/*!**********************************************!*\
  !*** ./src/geometry/primitives/FontArray.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createFontArray: () => (/* binding */ createFontArray)
/* harmony export */ });

function createFontArray(textContent) {
  const result = {
    textArray: [[]],
    textPolygonBbox2Arrays: [[]],
    textCanvasRenderMetricsArray: [[]],
    vertexDataArray: [[]]
  };
  const filterRawString = textContent.trim();
  let rowIndex = 0;
  for (let i = 0, colIndex = i; i < filterRawString.length; i++) {
    const text = filterRawString[i];
    if (text === "" || text === "	") {
      continue;
    }
    if (text === "\n" || text === "\r") {
      rowIndex += 1;
      result.textArray[rowIndex] = [];
      result.textPolygonBbox2Arrays[rowIndex] = [];
      result.textCanvasRenderMetricsArray[rowIndex] = [];
      result.vertexDataArray[rowIndex] = [];
      colIndex = 0;
      continue;
    }
    result.textArray[rowIndex][colIndex] = text;
    result.textPolygonBbox2Arrays[rowIndex][colIndex] = null;
    result.textCanvasRenderMetricsArray[rowIndex][colIndex] = null;
    result.vertexDataArray[rowIndex][colIndex] = {
      positions: [],
      indices: []
    };
    colIndex++;
  }
  return result;
}


/***/ }),

/***/ "./src/geometry/primitives/LinearPrimitive.ts":
/*!****************************************************!*\
  !*** ./src/geometry/primitives/LinearPrimitive.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LinearPrimitive: () => (/* binding */ LinearPrimitive)
/* harmony export */ });

class LinearPrimitive {
}


/***/ }),

/***/ "./src/geometry/primitives/StructLine.ts":
/*!***********************************************!*\
  !*** ./src/geometry/primitives/StructLine.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   StructLine: () => (/* binding */ StructLine)
/* harmony export */ });
/* harmony import */ var _engine_common_geometry_bbox_BBox2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../engine/common/geometry/bbox/BBox2 */ "./src/engine/common/geometry/bbox/BBox2.ts");
/* harmony import */ var _LinearPrimitive__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./LinearPrimitive */ "./src/geometry/primitives/LinearPrimitive.ts");



class StructLine extends _LinearPrimitive__WEBPACK_IMPORTED_MODULE_1__.LinearPrimitive {
  constructor(startPoint, endPoint) {
    super();
    this._startPoint = startPoint;
    this._endPoint = endPoint;
  }
  get startPoint() {
    return this._startPoint;
  }
  set startPoint(value) {
    this._startPoint = value;
  }
  get endPoint() {
    return this._endPoint;
  }
  set endPoint(value) {
    this._endPoint = value;
  }
  start() {
    return this.startPoint;
  }
  end() {
    return this.endPoint;
  }
  bbox2() {
    const minX = Math.min(this.startPoint.x, this.endPoint.x);
    const maxX = Math.max(this.startPoint.x, this.endPoint.x);
    const minY = Math.min(this.startPoint.y, this.endPoint.y);
    const maxY = Math.max(this.startPoint.y, this.endPoint.y);
    return new _engine_common_geometry_bbox_BBox2__WEBPACK_IMPORTED_MODULE_0__.BBox2(minX, minY, maxX, maxY);
  }
  toString() {
    return `StructLine (${this.startPoint.x}, ${this.startPoint.y}, ${this.endPoint.x}, ${this.endPoint.y})`;
  }
}


/***/ }),

/***/ "./src/geometry/primitives/TextLayout.ts":
/*!***********************************************!*\
  !*** ./src/geometry/primitives/TextLayout.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TextLayout: () => (/* binding */ TextLayout)
/* harmony export */ });
/* harmony import */ var _engine_common_geometry_bbox_BBox2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../engine/common/geometry/bbox/BBox2 */ "./src/engine/common/geometry/bbox/BBox2.ts");


class TextLayout {
  /**
   * 段落文本字符排版
   */
  static worldComposing(startPointData, textArray, textPolygonBbox2Arrays, textCanvasRenderMetricsArray, vertexDataArray, fontSize, fontScale) {
    const { outerRectBbox2 } = TextLayout.calculateOuterRectBbox2(textPolygonBbox2Arrays);
    let offsetX = 0;
    let offsetY = 0;
    let d2TextShapeBboxMinX = void 0;
    let d2TextShapeBboxMaxX = void 0;
    let d2TextShapeBboxMinY = void 0;
    let d2TextShapeBboxMaxY = void 0;
    const rowSize = textArray.length;
    for (let rowIndex = rowSize - 1, textIndex = -1; rowIndex >= 0; rowIndex--) {
      const colSize = textArray[rowIndex].length;
      offsetX = 0;
      offsetY += (outerRectBbox2.maxY - outerRectBbox2.minY) * fontScale;
      for (let colIndex = 0; colIndex < colSize; colIndex++) {
        textIndex++;
        let translateX = 0;
        let translateY = 0;
        if (colIndex <= 0) {
          offsetX = 0;
        } else {
          offsetX += fontSize * textCanvasRenderMetricsArray[rowIndex][colIndex - 1].fontCanvasRenderAreaRaitoW;
        }
        translateX = offsetX + startPointData[0];
        translateY = offsetY + startPointData[1];
        const vertextData = vertexDataArray[rowIndex][colIndex];
        for (let j = 0; j < vertextData.positions.length; j += 2) {
          vertextData.positions[j] = vertextData.positions[j] - outerRectBbox2.minX;
          vertextData.positions[j + 1] = vertextData.positions[j + 1] - outerRectBbox2.maxY;
          vertextData.positions[j] = vertextData.positions[j] * fontScale;
          vertextData.positions[j + 1] = vertextData.positions[j + 1] * fontScale;
          vertextData.positions[j] = vertextData.positions[j] + translateX;
          vertextData.positions[j + 1] = vertextData.positions[j + 1] + translateY;
          const x = vertextData.positions[j];
          const y = vertextData.positions[j + 1];
          if (typeof d2TextShapeBboxMinX === "undefined") {
            d2TextShapeBboxMinX = d2TextShapeBboxMaxX = x;
            d2TextShapeBboxMinY = d2TextShapeBboxMaxY = y;
          }
          d2TextShapeBboxMinX = d2TextShapeBboxMinX >= x ? x : d2TextShapeBboxMinX;
          d2TextShapeBboxMaxX = d2TextShapeBboxMaxX <= x ? x : d2TextShapeBboxMaxX;
          d2TextShapeBboxMinY = d2TextShapeBboxMinY >= y ? y : d2TextShapeBboxMinY;
          d2TextShapeBboxMaxY = d2TextShapeBboxMaxY <= y ? y : d2TextShapeBboxMaxY;
        }
      }
    }
    return {
      bbox2: new _engine_common_geometry_bbox_BBox2__WEBPACK_IMPORTED_MODULE_0__.BBox2(d2TextShapeBboxMinX, d2TextShapeBboxMinY, d2TextShapeBboxMaxX, d2TextShapeBboxMaxY),
      vertexDataArray
    };
  }
  /**
   * 计算该段文本在初始(未排版)状态下的包围盒
   * 		在未排版的情况下, 所有文本将以基线对齐的方式"堆叠"在同一坐标位置, 此时计算出该区域的最大包围盒
   */
  static calculateOuterRectBbox2(textPolygonBbox2Arrays) {
    let minX = 0;
    let minY = 0;
    let maxX = 0;
    let maxY = 0;
    for (let rowIndex = 0; rowIndex < textPolygonBbox2Arrays.length; rowIndex++) {
      const colSize = textPolygonBbox2Arrays[rowIndex].length;
      for (let colIndex = 0; colIndex < colSize; colIndex++) {
        const textPolygonBbox2 = textPolygonBbox2Arrays[rowIndex][colIndex];
        if (textPolygonBbox2) {
          if (rowIndex === 0 && colIndex === 0) {
            minX = textPolygonBbox2.minX;
            maxX = textPolygonBbox2.maxX;
            minY = textPolygonBbox2.minY;
            maxY = textPolygonBbox2.maxY;
          }
          minX = minX >= textPolygonBbox2.minX ? textPolygonBbox2.minX : minX;
          maxX = maxX <= textPolygonBbox2.maxX ? textPolygonBbox2.maxX : maxX;
          minY = minY >= textPolygonBbox2.minY ? textPolygonBbox2.minY : minY;
          maxY = maxY <= textPolygonBbox2.maxY ? textPolygonBbox2.maxY : maxY;
        }
      }
    }
    return {
      outerRectBbox2: {
        minX,
        maxX,
        minY,
        maxY
      }
    };
  }
  static translateVertexData(startPointData, vertexDataArray) {
    const vertexDataArray2 = [];
    let d2TextShapeBboxMinX = void 0;
    let d2TextShapeBboxMaxX = void 0;
    let d2TextShapeBboxMinY = void 0;
    let d2TextShapeBboxMaxY = void 0;
    for (let rowIndex = 0, textIndex = -1; rowIndex < vertexDataArray.length; rowIndex++) {
      vertexDataArray2[rowIndex] = [];
      for (let colIndex = 0; colIndex < vertexDataArray[rowIndex].length; colIndex++) {
        textIndex++;
        const vertextData = vertexDataArray[rowIndex][colIndex];
        const vertextData2 = {
          indices: [...vertextData.indices],
          positions: []
        };
        for (let j = 0; j < vertextData.positions.length; j += 2) {
          vertextData2.positions.push(vertextData.positions[j] + startPointData[0], vertextData.positions[j + 1] + startPointData[1]);
          const x = vertextData2.positions[j];
          const y = vertextData2.positions[j + 1];
          if (typeof d2TextShapeBboxMinX === "undefined") {
            d2TextShapeBboxMinX = d2TextShapeBboxMaxX = x;
            d2TextShapeBboxMinY = d2TextShapeBboxMaxY = y;
          }
          d2TextShapeBboxMinX = d2TextShapeBboxMinX >= x ? x : d2TextShapeBboxMinX;
          d2TextShapeBboxMaxX = d2TextShapeBboxMaxX <= x ? x : d2TextShapeBboxMaxX;
          d2TextShapeBboxMinY = d2TextShapeBboxMinY >= y ? y : d2TextShapeBboxMinY;
          d2TextShapeBboxMaxY = d2TextShapeBboxMaxY <= y ? y : d2TextShapeBboxMaxY;
        }
        vertexDataArray2[rowIndex][colIndex] = vertextData2;
      }
    }
    return {
      bbox2: new _engine_common_geometry_bbox_BBox2__WEBPACK_IMPORTED_MODULE_0__.BBox2(d2TextShapeBboxMinX, d2TextShapeBboxMinY, d2TextShapeBboxMaxX, d2TextShapeBboxMaxY),
      vertexDataArray: vertexDataArray2
    };
  }
}


/***/ }),

/***/ "./src/geometry/rtree2/Rectangle.ts":
/*!******************************************!*\
  !*** ./src/geometry/rtree2/Rectangle.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Rectangle: () => (/* binding */ Rectangle)
/* harmony export */ });

class Rectangle {
  /**
   * 判断 a 与 b 是否有重叠
   */
  static overlapRectangle(a, b) {
    if (a.h === 0 && a.w === 0 || b.h === 0 && b.w === 0) {
      return a.x <= b.x + b.w && a.x + a.w >= b.x && a.y <= b.y + b.h && a.y + a.h >= b.y;
    }
    return a.x < b.x + b.w && a.x + a.w > b.x && a.y < b.y + b.h && a.y + a.h > b.y;
  }
  /**
   * 判断 a 是否包含于 b 中
   */
  static containsRectangle(a, b) {
    return a.x + a.w <= b.x + b.w && a.x >= b.x && a.y + a.h <= b.y + b.h && a.y >= b.y;
  }
  /**
   * 读取 nodes 中各项的矩形尺寸, 重新修改 expandRect 的矩形尺寸
   * 以使得 expandRect 能够包含所有 nodes[i]
   */
  static makeMBR(expandRect, nodes) {
    if (!nodes.length) {
      return {
        x: 0,
        y: 0,
        w: 0,
        h: 0
      };
    }
    expandRect.x = nodes[0].x;
    expandRect.y = nodes[0].y;
    expandRect.w = nodes[0].w;
    expandRect.h = nodes[0].h;
    let len = nodes.length;
    for (let i = 1; i < len; i++) {
      Rectangle.expandRectangle(expandRect, nodes[i]);
    }
    return expandRect;
  }
  /**
   * 读取 b 的尺寸数据来修改 a 的尺寸数据
   * 使得 a 占用范围能够"包裹" b
   *
   * a - 待扩展的矩形
   * b - 被覆盖的矩形
   */
  static expandRectangle(a, b) {
    let nx = 0;
    let ny = 0;
    let axw = a.x + a.w;
    let bxw = b.x + b.w;
    let ayh = a.y + a.h;
    let byh = b.y + b.h;
    nx = a.x > b.x ? b.x : a.x;
    ny = a.y > b.y ? b.y : a.y;
    a.w = axw > bxw ? axw - nx : bxw - nx;
    a.h = ayh > byh ? ayh - ny : byh - ny;
    a.x = nx;
    a.y = ny;
    return a;
  }
  static squarifiedRatio(l, w, fill) {
    const a = (l + w) / 2;
    return a * a * fill;
  }
}


/***/ }),

/***/ "./src/geometry/rtree2/Rtree.ts":
/*!**************************************!*\
  !*** ./src/geometry/rtree2/Rtree.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   RTree: () => (/* binding */ RTree)
/* harmony export */ });
/* harmony import */ var _insertSubtree__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./insertSubtree */ "./src/geometry/rtree2/insertSubtree.ts");
/* harmony import */ var _removeSubtree__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./removeSubtree */ "./src/geometry/rtree2/removeSubtree.ts");
/* harmony import */ var _searchSubtree__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./searchSubtree */ "./src/geometry/rtree2/searchSubtree.ts");




class RTree {
  constructor(width = 10) {
    this._getWidth = width;
    this._root = null;
    this._minWidth = 3;
    this._maxWidth = 6;
    this._allItems = /* @__PURE__ */ new Set();
    this.refresh();
  }
  refresh() {
    let minWidth = this._minWidth;
    let maxWidth = this._maxWidth;
    if (!isNaN(this._getWidth)) {
      minWidth = Math.floor(this._getWidth / 2);
      maxWidth = this._getWidth;
    }
    this._allItems = /* @__PURE__ */ new Set();
    const rootTree = {
      x: 0,
      y: 0,
      w: 0,
      h: 0,
      nodes: [],
      id: `root`
    };
    this._root = rootTree;
    this._minWidth = minWidth;
    this._maxWidth = maxWidth;
  }
  getAllItems() {
    return this._allItems;
  }
  insertItemData(rect, obj) {
    this._allItems.add(obj);
    (0,_insertSubtree__WEBPACK_IMPORTED_MODULE_0__.insertSubtree)({ x: rect.x, y: rect.y, w: rect.w, h: rect.h, leaf: obj }, this._root, this._maxWidth, this._minWidth);
  }
  search(rect) {
    return (0,_searchSubtree__WEBPACK_IMPORTED_MODULE_2__.searchSubtree)(rect, this._root);
  }
  remove(rect, obj) {
    let removedList = [];
    if (!obj) {
      removedList = this.removeArea(rect);
    } else {
      removedList = this.removeObj(rect, obj);
    }
    for (let i = 0; i < removedList.length; i++) {
      this._allItems.delete(removedList[i].leaf);
    }
    return removedList;
  }
  clearAllItems() {
    this.refresh();
  }
  removeArea(rect) {
    let numberDeleted = 1;
    let allRemovedList = [];
    while (numberDeleted > 0) {
      const removedList = (0,_removeSubtree__WEBPACK_IMPORTED_MODULE_1__.removeSubtree)(rect, false, this._root, this._maxWidth, this._minWidth);
      numberDeleted = removedList.length;
      allRemovedList = allRemovedList.concat(removedList);
    }
    return allRemovedList;
  }
  removeObj(rect, obj) {
    const removedList = (0,_removeSubtree__WEBPACK_IMPORTED_MODULE_1__.removeSubtree)(rect, obj, this._root, this._maxWidth, this._minWidth);
    return removedList;
  }
}


/***/ }),

/***/ "./src/geometry/rtree2/chooseLeafSubtree.ts":
/*!**************************************************!*\
  !*** ./src/geometry/rtree2/chooseLeafSubtree.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   chooseLeafSubtree: () => (/* binding */ chooseLeafSubtree)
/* harmony export */ });
/* harmony import */ var _Rectangle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Rectangle */ "./src/geometry/rtree2/Rectangle.ts");


function chooseLeafSubtree(currentNode, root) {
  let bestChoiceIndex = -1;
  let bestChoiceStack = [];
  let bestChoiceArea = void 0;
  let first = true;
  let nodes = root.nodes;
  bestChoiceStack.push(root);
  do {
    if (!first) {
      bestChoiceStack.push(nodes[bestChoiceIndex]);
      nodes = nodes[bestChoiceIndex].nodes;
      bestChoiceIndex = -1;
    }
    first = false;
    for (let i = nodes.length - 1; i >= 0; i--) {
      let childNode = nodes[i];
      if ("leaf" in childNode) {
        bestChoiceIndex = -1;
        break;
      }
      const ax = Math.min(childNode.x, currentNode.x);
      const ay = Math.min(childNode.y, currentNode.y);
      const bx = Math.max(childNode.x + childNode.w, currentNode.x + currentNode.w);
      const by = Math.max(childNode.y + childNode.h, currentNode.y + currentNode.h);
      const nw = bx - ax;
      const nh = by - ay;
      const oldChildItemRatio = _Rectangle__WEBPACK_IMPORTED_MODULE_0__.Rectangle.squarifiedRatio(childNode.w, childNode.h, childNode.nodes.length + 1);
      const newChildItemRatio = _Rectangle__WEBPACK_IMPORTED_MODULE_0__.Rectangle.squarifiedRatio(nw, nh, childNode.nodes.length + 2);
      if (bestChoiceIndex < 0 || Math.abs(newChildItemRatio - oldChildItemRatio) < bestChoiceArea) {
        bestChoiceArea = Math.abs(newChildItemRatio - oldChildItemRatio);
        bestChoiceIndex = i;
      }
    }
  } while (bestChoiceIndex !== -1);
  return bestChoiceStack;
}


/***/ }),

/***/ "./src/geometry/rtree2/flatten.ts":
/*!****************************************!*\
  !*** ./src/geometry/rtree2/flatten.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   flatten: () => (/* binding */ flatten)
/* harmony export */ });

function flatten(trees) {
  const result = [];
  let treesCopy = trees.slice();
  while (treesCopy.length) {
    const current = treesCopy.pop();
    if (current.nodes) {
      treesCopy = treesCopy.concat(current.nodes);
      continue;
    }
    if (current.leaf) {
      result.push(current);
      continue;
    }
  }
  return result;
}


/***/ }),

/***/ "./src/geometry/rtree2/insertSubtree.ts":
/*!**********************************************!*\
  !*** ./src/geometry/rtree2/insertSubtree.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   insertSubtree: () => (/* binding */ insertSubtree)
/* harmony export */ });
/* harmony import */ var _linearSplit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./linearSplit */ "./src/geometry/rtree2/linearSplit.ts");
/* harmony import */ var _Rectangle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Rectangle */ "./src/geometry/rtree2/Rectangle.ts");
/* harmony import */ var _chooseLeafSubtree__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chooseLeafSubtree */ "./src/geometry/rtree2/chooseLeafSubtree.ts");




function insertSubtree(willInsertNode, root, maxWidth, minWidth) {
  if (root.nodes.length === 0) {
    root.x = willInsertNode.x;
    root.y = willInsertNode.y;
    root.w = willInsertNode.w;
    root.h = willInsertNode.h;
    root.nodes.push(willInsertNode);
    return;
  }
  let nodeDeepthPath = (0,_chooseLeafSubtree__WEBPACK_IMPORTED_MODULE_2__.chooseLeafSubtree)(willInsertNode, root);
  let nowHandleObj = willInsertNode;
  let bc = void 0;
  let bcChild = void 0;
  let expandRect = null;
  while (nodeDeepthPath.length > 0) {
    if (bc && "nodes" in bc && bc.nodes.length === 0) {
      expandRect = null;
      bcChild = bc;
      bc = nodeDeepthPath.pop();
      for (let t = 0; t < bc.nodes.length; t++) {
        if (bc.nodes[t] === bcChild) {
          const item = bc.nodes.splice(t, 1);
          break;
        } else if (bc.nodes[t].nodes.length === 0) {
          const item = bc.nodes.splice(t, 1);
          break;
        }
      }
    } else {
      bc = nodeDeepthPath.pop();
    }
    if (expandRect) {
      _Rectangle__WEBPACK_IMPORTED_MODULE_1__.Rectangle.expandRectangle(bc, expandRect);
      expandRect = { x: bc.x, y: bc.y, w: bc.w, h: bc.h };
    } else {
      if ("leaf" in nowHandleObj || "nodes" in nowHandleObj || Array.isArray(nowHandleObj)) {
        expandRect = null;
        if (Array.isArray(nowHandleObj)) {
          for (let ai = 0; ai < nowHandleObj.length; ai++) {
            _Rectangle__WEBPACK_IMPORTED_MODULE_1__.Rectangle.expandRectangle(bc, nowHandleObj[ai]);
          }
          bc.nodes = bc.nodes.concat(nowHandleObj);
        } else {
          _Rectangle__WEBPACK_IMPORTED_MODULE_1__.Rectangle.expandRectangle(bc, nowHandleObj);
          bc.nodes.push(nowHandleObj);
        }
        if (bc.nodes.length <= maxWidth) {
          expandRect = { x: bc.x, y: bc.y, w: bc.w, h: bc.h };
        } else {
          let fissionList = (0,_linearSplit__WEBPACK_IMPORTED_MODULE_0__.linearSplit)(bc.nodes, minWidth);
          if (nodeDeepthPath.length <= 0) {
            bc.nodes.push(fissionList[0]);
            nodeDeepthPath.push(bc);
            nowHandleObj = fissionList[1];
          } else {
            nowHandleObj = fissionList;
          }
        }
      }
    }
  }
}


/***/ }),

/***/ "./src/geometry/rtree2/linearSplit.ts":
/*!********************************************!*\
  !*** ./src/geometry/rtree2/linearSplit.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   linearSplit: () => (/* binding */ linearSplit)
/* harmony export */ });
/* harmony import */ var _Rectangle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Rectangle */ "./src/geometry/rtree2/Rectangle.ts");


function pickLinear(nodes) {
  let indexLowestEndX = nodes.length - 1;
  let indexHighestStartX = 0;
  let indexLowestEndY = nodes.length - 1;
  let indexHighestStartY = 0;
  for (let i = nodes.length - 2; i >= 0; i--) {
    const childItem = nodes[i];
    if (childItem.x > nodes[indexHighestStartX].x) {
      indexHighestStartX = i;
    } else if (childItem.x + childItem.w < nodes[indexLowestEndX].x + nodes[indexLowestEndX].w) {
      indexLowestEndX = i;
    }
    if (childItem.y > nodes[indexHighestStartY].y) {
      indexHighestStartY = i;
    } else if (childItem.y + childItem.h < nodes[indexLowestEndY].y + nodes[indexLowestEndY].h) {
      indexLowestEndY = i;
    }
  }
  const lowestEndX = nodes[indexLowestEndX].x + nodes[indexLowestEndX].w;
  const lowestEndY = nodes[indexLowestEndY].y + nodes[indexLowestEndY].h;
  const highestStartX = nodes[indexHighestStartX].x;
  const highestStartY = nodes[indexHighestStartY].y;
  const dx = Math.abs(lowestEndX - highestStartX);
  const dy = Math.abs(lowestEndY - highestStartY);
  let itemLowestEnd;
  let itemHighestStart;
  if (dx > dy) {
    if (indexLowestEndX > indexHighestStartX) {
      itemLowestEnd = nodes.splice(indexLowestEndX, 1)[0];
      itemHighestStart = nodes.splice(indexHighestStartX, 1)[0];
    } else {
      itemHighestStart = nodes.splice(indexHighestStartX, 1)[0];
      itemLowestEnd = nodes.splice(indexLowestEndX, 1)[0];
    }
  } else {
    if (indexLowestEndY > indexHighestStartY) {
      itemLowestEnd = nodes.splice(indexLowestEndY, 1)[0];
      itemHighestStart = nodes.splice(indexHighestStartY, 1)[0];
    } else {
      itemHighestStart = nodes.splice(indexHighestStartY, 1)[0];
      itemLowestEnd = nodes.splice(indexLowestEndY, 1)[0];
    }
  }
  return [
    {
      x: itemLowestEnd.x,
      y: itemLowestEnd.y,
      w: itemLowestEnd.w,
      h: itemLowestEnd.h,
      nodes: [itemLowestEnd]
    },
    {
      x: itemHighestStart.x,
      y: itemHighestStart.y,
      w: itemHighestStart.w,
      h: itemHighestStart.h,
      nodes: [itemHighestStart]
    }
  ];
}
function pickNext(nodes, a, b, minWidth) {
  let areaA = _Rectangle__WEBPACK_IMPORTED_MODULE_0__.Rectangle.squarifiedRatio(a.w, a.h, a.nodes.length + 1);
  let areaB = _Rectangle__WEBPACK_IMPORTED_MODULE_0__.Rectangle.squarifiedRatio(b.w, b.h, b.nodes.length + 1);
  let highAreaDelta = void 0;
  let highAreaNode = void 0;
  let lowestGrowthGroup = void 0;
  for (let i = nodes.length - 1; i >= 0; i--) {
    let l = nodes[i];
    let newAreaA = { x: 0, y: 0, w: 0, h: 0 };
    newAreaA.x = Math.min(a.x, l.x);
    newAreaA.y = Math.min(a.y, l.y);
    newAreaA.w = Math.max(a.x + a.w, l.x + l.w) - newAreaA.x;
    newAreaA.h = Math.max(a.y + a.h, l.y + l.h) - newAreaA.y;
    let changeNewAreaA = Math.abs(_Rectangle__WEBPACK_IMPORTED_MODULE_0__.Rectangle.squarifiedRatio(newAreaA.w, newAreaA.h, a.nodes.length + 2) - areaA);
    let newAreaB = { x: 0, y: 0, w: 0, h: 0 };
    newAreaB.x = Math.min(b.x, l.x);
    newAreaB.y = Math.min(b.y, l.y);
    newAreaB.w = Math.max(b.x + b.w, l.x + l.w) - newAreaB.x;
    newAreaB.h = Math.max(b.y + b.h, l.y + l.h) - newAreaB.y;
    let changeNewAreaB = Math.abs(_Rectangle__WEBPACK_IMPORTED_MODULE_0__.Rectangle.squarifiedRatio(newAreaB.w, newAreaB.h, b.nodes.length + 2) - areaB);
    if (!highAreaNode || !highAreaDelta || Math.abs(changeNewAreaB - changeNewAreaA) < highAreaDelta) {
      highAreaNode = i;
      highAreaDelta = Math.abs(changeNewAreaB - changeNewAreaA);
      lowestGrowthGroup = changeNewAreaB < changeNewAreaA ? b : a;
    }
  }
  let tempNode = nodes.splice(highAreaNode, 1)[0];
  if (a.nodes.length + nodes.length + 1 <= minWidth) {
    a.nodes.push(tempNode);
    _Rectangle__WEBPACK_IMPORTED_MODULE_0__.Rectangle.expandRectangle(a, tempNode);
  } else if (b.nodes.length + nodes.length + 1 <= minWidth) {
    b.nodes.push(tempNode);
    _Rectangle__WEBPACK_IMPORTED_MODULE_0__.Rectangle.expandRectangle(b, tempNode);
  } else {
    lowestGrowthGroup.nodes.push(tempNode);
    _Rectangle__WEBPACK_IMPORTED_MODULE_0__.Rectangle.expandRectangle(lowestGrowthGroup, tempNode);
  }
}
function linearSplit(nodes, minWidth) {
  let n = pickLinear(nodes);
  while (nodes.length > 0) {
    pickNext(nodes, n[0], n[1], minWidth);
  }
  return n;
}


/***/ }),

/***/ "./src/geometry/rtree2/removeSubtree.ts":
/*!**********************************************!*\
  !*** ./src/geometry/rtree2/removeSubtree.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   removeSubtree: () => (/* binding */ removeSubtree)
/* harmony export */ });
/* harmony import */ var _flatten__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./flatten */ "./src/geometry/rtree2/flatten.ts");
/* harmony import */ var _insertSubtree__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./insertSubtree */ "./src/geometry/rtree2/insertSubtree.ts");
/* harmony import */ var _Rectangle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Rectangle */ "./src/geometry/rtree2/Rectangle.ts");
/* harmony import */ var _searchSubtree__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./searchSubtree */ "./src/geometry/rtree2/searchSubtree.ts");





function removeSubtree(rect, obj, root, maxWidth, minWidth) {
  let removedList = [];
  if (!rect || !_Rectangle__WEBPACK_IMPORTED_MODULE_2__.Rectangle.overlapRectangle(rect, root)) {
    return removedList;
  }
  let handleObj = { x: rect.x, y: rect.y, w: rect.w, h: rect.h, target: obj };
  let chooseStack = [];
  let chooseChildIndexStack = [];
  let lastItemIndex = -1;
  let currentDepth = 1;
  let tree = null;
  let itemTree = null;
  chooseStack.push(root);
  chooseChildIndexStack.push(root.nodes.length - 1);
  TREE_LOOP:
    while (chooseStack.length > 0) {
      tree = chooseStack.pop();
      lastItemIndex = chooseChildIndexStack.pop();
      if ("target" in handleObj) {
        CHILDS_LOOP:
          while (lastItemIndex >= 0) {
            itemTree = tree.nodes[lastItemIndex];
            if (_Rectangle__WEBPACK_IMPORTED_MODULE_2__.Rectangle.overlapRectangle(handleObj, itemTree)) {
              if (handleObj.target && "leaf" in itemTree && itemTree.leaf === handleObj.target || !handleObj.target && ("leaf" in itemTree || _Rectangle__WEBPACK_IMPORTED_MODULE_2__.Rectangle.containsRectangle(itemTree, handleObj))) {
                const rmSelectedList = tree.nodes.splice(lastItemIndex, 1);
                if ("nodes" in itemTree) {
                  removedList = (0,_flatten__WEBPACK_IMPORTED_MODULE_0__.flatten)(rmSelectedList);
                } else {
                  removedList = rmSelectedList;
                }
                _Rectangle__WEBPACK_IMPORTED_MODULE_2__.Rectangle.makeMBR(tree, tree.nodes);
                delete handleObj.target;
                break TREE_LOOP;
              } else if ("nodes" in itemTree) {
                currentDepth++;
                chooseChildIndexStack.push(lastItemIndex - 1);
                chooseStack.push(tree);
                tree = itemTree;
                lastItemIndex = itemTree.nodes.length - 1;
              }
            }
            lastItemIndex--;
          }
      } else if ("nodes" in handleObj) {
        tree.nodes.splice(lastItemIndex, 1);
        _Rectangle__WEBPACK_IMPORTED_MODULE_2__.Rectangle.makeMBR(tree, tree.nodes);
        const childNodes = handleObj.nodes || [];
        for (let k = 0; k < childNodes.length; k++) {
          (0,_insertSubtree__WEBPACK_IMPORTED_MODULE_1__.insertSubtree)(childNodes[k], tree, minWidth, maxWidth);
        }
        handleObj.nodes = [];
        if (chooseStack.length === 0 && tree.nodes.length <= 1) {
          handleObj.nodes = (0,_searchSubtree__WEBPACK_IMPORTED_MODULE_3__.searchSubtree)({ x: tree.x, y: tree.y, w: tree.w, h: tree.h }, tree);
          tree.nodes = [];
          chooseStack.push(tree);
          chooseChildIndexStack.push(0);
          currentDepth -= 1;
          continue;
        }
        if (chooseStack.length > 0 && tree.nodes.length < minWidth) {
          handleObj.nodes = (0,_searchSubtree__WEBPACK_IMPORTED_MODULE_3__.searchSubtree)({ x: tree.x, y: tree.y, w: tree.w, h: tree.h }, tree);
          tree.nodes = [];
          currentDepth -= 1;
          continue;
        }
        delete handleObj.nodes;
        currentDepth -= 1;
      } else {
        _Rectangle__WEBPACK_IMPORTED_MODULE_2__.Rectangle.makeMBR(tree, tree.nodes);
      }
      currentDepth -= 1;
    }
  return removedList;
}


/***/ }),

/***/ "./src/geometry/rtree2/searchSubtree.ts":
/*!**********************************************!*\
  !*** ./src/geometry/rtree2/searchSubtree.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   searchSubtree: () => (/* binding */ searchSubtree)
/* harmony export */ });
/* harmony import */ var _Rectangle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Rectangle */ "./src/geometry/rtree2/Rectangle.ts");


function searchSubtree(rect, root) {
  const result = [];
  if (!_Rectangle__WEBPACK_IMPORTED_MODULE_0__.Rectangle.overlapRectangle(rect, root)) {
    return result;
  }
  const hitStack = [];
  hitStack.push(root.nodes);
  while (hitStack.length > 0) {
    const nodes = hitStack.pop();
    for (let i = nodes.length - 1; i >= 0; i--) {
      let ltree = nodes[i];
      if (_Rectangle__WEBPACK_IMPORTED_MODULE_0__.Rectangle.overlapRectangle(rect, ltree)) {
        if ("nodes" in ltree) {
          hitStack.push(ltree.nodes);
        } else if ("leaf" in ltree) {
          result.push(ltree);
        }
      }
    }
  }
  return result;
}


/***/ }),

/***/ "./src/helper/floatPanel.ts":
/*!**********************************!*\
  !*** ./src/helper/floatPanel.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FloatPanel: () => (/* binding */ FloatPanel)
/* harmony export */ });

const panelPublicStyle = `
	margin: 5px 0; 
	padding: 0 10px 1px 10px; 
	font-size: 12px;
	box-shadow: 1px 1px 4px rgba(0, 0, 0, 0.2); 
	background: rgba(25, 25, 25, 0.75); 
	border: 1px solid #666666; 
	border-radius: 3px;
`;
class FloatPanel {
  static createContainer(container, position = "RB") {
    const positionStyle = {
      LT: "left: 0; top: 0;",
      RT: "right: 0; top: 0;",
      LB: "left: 0; bottom: 0;",
      RB: "right: 0; bottom: 0;"
    }[position];
    const elementId = `floatPanel${Math.random()}`;
    const wrapperHTML = `
			<section id="${elementId}" style="
				position: fixed; 
				${positionStyle} 
				z-index: 9999; 
				user-select: none;
				padding: 5px 10px;
			">
			</section>
		`;
    container.append(document.createRange().createContextualFragment(wrapperHTML));
    return document.getElementById(elementId);
  }
}
FloatPanel.inputsPanelControl = {
  appendTo(container) {
    const wrapperHTML = `
				<main style="${panelPublicStyle}">
					<div style="padding: 2px 0; display: flex; justify-content: flex-start; align-items: center; align-content: center; color: #efefef;">
						<div>\u9F20\u6807\u5B9E\u65F6\u539F\u751F\u5750\u6807(Pixel):&nbsp;&nbsp;</div>
						<div id="infoMouseMoveNativeAbsPos" style="min-width: 75px;">-/-</div>
					</div>
					<div style="padding: 2px 0; display: flex; justify-content: flex-start; align-items: center; align-content: center; color: #efefef;">
						<div>\u9F20\u6807\u5B9E\u65F6\u573A\u666F\u5750\u6807(Pixel):&nbsp;&nbsp;</div>
						<div id="infoMouseMoveSceneTruthPos" style="min-width: 75px;">-/-</div>
					</div>
					<div style="padding: 2px 0; display: flex; justify-content: flex-start; align-items: center; align-content: center; color: #efefef;">
						<div>\u9F20\u6807\u5B9E\u65F6\u7269\u7406\u5750\u6807(mm):&nbsp;&nbsp;</div>
						<div id="infoMouseMoveScenePhysicsPos" style="min-width: 75px;">-/-</div>
					</div>
				</main>
			`;
    container.append(document.createRange().createContextualFragment(wrapperHTML));
  },
  update(data) {
    const infoMouseMoveNativeAbsPosElement = document.getElementById("infoMouseMoveNativeAbsPos");
    const infoMouseMoveSceneTruthPosElement = document.getElementById("infoMouseMoveSceneTruthPos");
    const infoMouseMoveScenePhysicsPosElement = document.getElementById("infoMouseMoveScenePhysicsPos");
    infoMouseMoveNativeAbsPosElement.innerHTML = `${data.moveSourceNativePixelX}/${data.moveSourceNativePixelY}`;
    infoMouseMoveSceneTruthPosElement.innerHTML = `${parseInt(String(data.moveScenePixelX))}/${parseInt(String(data.moveScenePixelY))}`;
    infoMouseMoveScenePhysicsPosElement.innerHTML = `${parseInt(String(data.moveScenePhysicsX))}/${parseInt(String(data.moveScenePhysicsY))}`;
  }
};
FloatPanel.canvasProfilePanelControl = {
  appendTo(container) {
    const wrapperHTML = `
				<main style="${panelPublicStyle}">
					<div style="padding: 2px 0; display: flex; justify-content: flex-start; align-items: center; align-content: center; color: #efefef;">
						<div>\u753B\u5E03\u7F29\u653E\u6BD4\u4F8B:&nbsp;&nbsp;</div>
						<div id="canvasZoomRatio" style="min-width: 75px;">-%</div>
					</div>
					<div style="padding: 2px 0; display: flex; justify-content: flex-start; align-items: center; align-content: center; color: #efefef;">
						<div>\u753B\u5E03\u5C3A\u5BF8:&nbsp;&nbsp;</div>
						<div id="canvasBoundingRect" style="min-width: 75px;">-%</div>
					</div>
					<div style="padding: 2px 0; display: flex; justify-content: flex-start; align-items: center; align-content: center; color: #efefef;">
						<div>DPI:&nbsp;&nbsp;</div>
						<div id="viewDPI" style="min-width: 75px;">-</div>
					</div>
				</main>
			`;
    container.append(document.createRange().createContextualFragment(wrapperHTML));
  },
  update(data) {
    const canvasZoomRatioElement = document.getElementById("canvasZoomRatio");
    const canvasBoundingRectElement = document.getElementById("canvasBoundingRect");
    const viewDPIElement = document.getElementById("viewDPI");
    canvasZoomRatioElement.innerHTML = `${Number((data.zoomRatio * 100).toString().match(/^\d+(?:\.\d{0,2})?/)) + "%"}`;
    canvasBoundingRectElement.innerHTML = `${data.canvasWidth} x ${data.canvasHeight}`;
    viewDPIElement.innerHTML = `${data.DPI[0]} * ${data.DPI[1]}`;
  }
};
FloatPanel.canvasIntensiveProfilePanelControl = {
  appendTo(container) {
    const wrapperHTML = `
				<main style="${panelPublicStyle}">
					<div style="padding: 2px 0; display: flex; justify-content: flex-start; align-items: center; align-content: center; color: #efefef;">
						<div>FPS:&nbsp;&nbsp;</div>
						<div id="fpsCount" style="min-width: 75px;">-</div>
					</div>
				</main>
			`;
    container.append(document.createRange().createContextualFragment(wrapperHTML));
  },
  update(data) {
    const fpsCountElement = document.getElementById("fpsCount");
    fpsCountElement.innerHTML = `${data.fpsCount}/${data.diffFreshInterval}`;
  }
};
FloatPanel.btnsControl = {
  appendTo(container) {
    const wrapperHTML = `
				<main style="${panelPublicStyle}">
					<div style="padding: 2px 0; display: flex; justify-content: flex-start; align-items: center; align-content: center; color: #efefef;">
						<button id="resetCanvasStatus" style="background-color: #dcdcdc; border: 1px solid #acacac; border-radius: 3px; color: #333333; padding: 3px 5px; cursor: pointer;">\u91CD\u7F6E\u753B\u5E03\u72B6\u6001</button>
					</div>
				</main>
			`;
    container.append(document.createRange().createContextualFragment(wrapperHTML));
  },
  update() {
  },
  event(optional = {}) {
    const resetCanvasStatusElement = document.getElementById("resetCanvasStatus");
    resetCanvasStatusElement.addEventListener("click", (e) => {
      optional.resetCanvasStatusClickCallback && optional.resetCanvasStatusClickCallback();
    });
    resetCanvasStatusElement.addEventListener("mouseover", (e) => {
      const btnElement = e.target;
      btnElement.style.backgroundColor = "#ffffff";
    });
    resetCanvasStatusElement.addEventListener("mouseout", (e) => {
      const btnElement = e.target;
      btnElement.style.backgroundColor = "#dcdcdc";
    });
  }
};


/***/ }),

/***/ "./src/init/Init.ts":
/*!**************************!*\
  !*** ./src/init/Init.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   coreInit: () => (/* binding */ coreInit),
/* harmony export */   d2ToolInit: () => (/* binding */ d2ToolInit),
/* harmony export */   envirInit: () => (/* binding */ envirInit),
/* harmony export */   layerInit: () => (/* binding */ layerInit)
/* harmony export */ });
/* harmony import */ var _config_DrawLayerProfile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config/DrawLayerProfile */ "./src/config/DrawLayerProfile.ts");
/* harmony import */ var _Constant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Constant */ "./src/Constant.ts");
/* harmony import */ var _objects_shapes_manager_DrawLayerShapeManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../objects/shapes/manager/DrawLayerShapeManager */ "./src/objects/shapes/manager/DrawLayerShapeManager.ts");
/* harmony import */ var _tool_draw_DrawToolManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../tool/draw/DrawToolManager */ "./src/tool/draw/DrawToolManager.ts");
/* harmony import */ var _tool_EventsLoader__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../tool/EventsLoader */ "./src/tool/EventsLoader.ts");
/* harmony import */ var _tool_frameTool_D2FrameTool__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../tool/frameTool/D2FrameTool */ "./src/tool/frameTool/D2FrameTool.ts");
/* harmony import */ var _utils_SyncCanvasRect__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/SyncCanvasRect */ "./src/utils/SyncCanvasRect.ts");
/* harmony import */ var _engine_config_CommonProfile__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../engine/config/CommonProfile */ "./src/engine/config/CommonProfile.ts");
/* harmony import */ var _engine_common_utils_Utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../engine/common/utils/Utils */ "./src/engine/common/utils/Utils.ts");

var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};









function coreInit() {
  return __async(this, null, function* () {
    const isSupportWebGPUResult = yield (0,_engine_common_utils_Utils__WEBPACK_IMPORTED_MODULE_8__.isSupportWebGPU)();
    _Constant__WEBPACK_IMPORTED_MODULE_1__.systemConfig.coreEngineType = _engine_config_CommonProfile__WEBPACK_IMPORTED_MODULE_7__.ECoreEngineType.WEBGL2D;
  });
}
function envirInit(canvasElement) {
  return __async(this, null, function* () {
    (0,_utils_SyncCanvasRect__WEBPACK_IMPORTED_MODULE_6__.syncCanvasRectByWindow)(canvasElement);
    const canvasRect = canvasElement.getBoundingClientRect().toJSON();
    _Constant__WEBPACK_IMPORTED_MODULE_1__.environment.updateCanvasRectSize(canvasRect.width, canvasRect.height, canvasRect.left, canvasRect.top);
    _Constant__WEBPACK_IMPORTED_MODULE_1__.environment.updateCanvasBackgroudColor();
  });
}
function layerInit() {
  return __async(this, null, function* () {
    _objects_shapes_manager_DrawLayerShapeManager__WEBPACK_IMPORTED_MODULE_2__.DrawLayerShapeManager.getInstance().createControlShapeItem(_config_DrawLayerProfile__WEBPACK_IMPORTED_MODULE_0__.EDrawLayerCode.MaskLayer);
  });
}
function d2ToolInit(canvasElement) {
  const eventsLoader = new _tool_EventsLoader__WEBPACK_IMPORTED_MODULE_4__.EventsLoader(canvasElement);
  eventsLoader.init();
  const d2FrameTool = new _tool_frameTool_D2FrameTool__WEBPACK_IMPORTED_MODULE_5__.D2FrameTool();
  d2FrameTool.init();
  eventsLoader.nextTool = d2FrameTool;
  const drawToolManager = new _tool_draw_DrawToolManager__WEBPACK_IMPORTED_MODULE_3__.DrawToolManager();
  drawToolManager.frameToolHandler = d2FrameTool;
  return {
    drawToolManager
  };
}


/***/ }),

/***/ "./src/manager/EventsManager.ts":
/*!**************************************!*\
  !*** ./src/manager/EventsManager.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EventsManager: () => (/* binding */ EventsManager)
/* harmony export */ });
/* harmony import */ var _config_OperationProfile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config/OperationProfile */ "./src/config/OperationProfile.ts");
/* harmony import */ var _Constant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Constant */ "./src/Constant.ts");
/* harmony import */ var _Manage__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Manage */ "./src/manager/Manage.ts");




class EventsManager extends _Manage__WEBPACK_IMPORTED_MODULE_2__.Manager {
  constructor() {
    super();
    this._pointerDownEvents = /* @__PURE__ */ new Map();
    this._pointerMoveEvents = /* @__PURE__ */ new Map();
    this._pointerUpEvents = /* @__PURE__ */ new Map();
  }
  static getInstance() {
    if (EventsManager.instance === void 0) {
      EventsManager.instance = new EventsManager();
    }
    return EventsManager.instance;
  }
  triggerEventHandlers(elementItemId, eventName) {
    const eventTypeMap = this.getEventTypeMap(eventName);
    if (!eventTypeMap) {
      throw new Error(`not support event: ${eventName}.`);
    }
    const eventMap = eventTypeMap.get(elementItemId);
    if (typeof eventMap === "undefined") {
      return null;
    }
    for (let [eventId, handler] of eventMap) {
      handler(elementItemId, eventId);
    }
  }
  appendEventItem(elementItemId, eventName, callback) {
    const eventTypeMap = this.getEventTypeMap(eventName);
    if (!eventTypeMap) {
      throw new Error(`not support event: ${eventName}.`);
    }
    let eventMap = eventTypeMap.get(elementItemId);
    if (typeof eventMap === "undefined") {
      eventMap = /* @__PURE__ */ new Map();
    }
    const eventHandlerId = _Constant__WEBPACK_IMPORTED_MODULE_1__.globalIdenManager.getEventHandlerIden();
    eventMap.set(eventHandlerId, callback);
    eventTypeMap.set(elementItemId, eventMap);
    return eventHandlerId;
  }
  removeEventItem(elementItemId, eventName, eventHandlerId) {
    const eventTypeMap = this.getEventTypeMap(eventName);
    if (!eventTypeMap) {
      throw new Error(`not support event: ${eventName}.`);
    }
    let eventMap = eventTypeMap.get(elementItemId);
    if (typeof eventMap === "undefined") {
      return;
    }
    eventMap.delete(eventHandlerId);
  }
  removeAllEvents(elementItemId) {
    let allEventMaps = this.getAllEventTypeMaps();
    for (let i = 0; i < allEventMaps.length; i++) {
      const eventMap = allEventMaps[i].get(elementItemId);
      if (typeof eventMap !== "undefined") {
        eventMap.clear();
        allEventMaps[i].delete(elementItemId);
      }
    }
  }
  getEventTypeMap(eventName) {
    let eventMap = null;
    switch (eventName) {
      case _config_OperationProfile__WEBPACK_IMPORTED_MODULE_0__.EPointerEventName.POINTER_DOWN: {
        eventMap = this._pointerDownEvents;
        break;
      }
      case _config_OperationProfile__WEBPACK_IMPORTED_MODULE_0__.EPointerEventName.POINTER_DOWN: {
        eventMap = this._pointerMoveEvents;
        break;
      }
      case _config_OperationProfile__WEBPACK_IMPORTED_MODULE_0__.EPointerEventName.POINTER_DOWN: {
        eventMap = this._pointerUpEvents;
        break;
      }
    }
    return eventMap;
  }
  getAllEventTypeMaps() {
    return [this._pointerDownEvents, this._pointerMoveEvents, this._pointerUpEvents];
  }
}


/***/ }),

/***/ "./src/manager/Manage.ts":
/*!*******************************!*\
  !*** ./src/manager/Manage.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Manager: () => (/* binding */ Manager)
/* harmony export */ });

class Manager {
  constructor() {
    this._items = /* @__PURE__ */ new Map();
  }
  get items() {
    return this._items;
  }
  set items(value) {
    this._items = value;
  }
  getAllItems() {
    const allItems = new Array(this.items.size);
    const items = this.items.values();
    let i = 0;
    for (let item of items) {
      allItems[i++] = item;
    }
    return allItems;
  }
  getItemById(gId) {
    return this.items.get(gId);
  }
}


/***/ }),

/***/ "./src/manager/TextGraphicsManager.ts":
/*!********************************************!*\
  !*** ./src/manager/TextGraphicsManager.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TextGraphicTemplate: () => (/* binding */ TextGraphicTemplate),
/* harmony export */   TextGraphicsManager: () => (/* binding */ TextGraphicsManager)
/* harmony export */ });
/* harmony import */ var _engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine/config/PrimitiveProfile */ "./src/engine/config/PrimitiveProfile.ts");
/* harmony import */ var _Manage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Manage */ "./src/manager/Manage.ts");

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};


class TextGraphicTemplate {
  constructor(triangleVertexData, fontPolygonBbox2, fontCanvasRenderMetrics, fontFamily, fontStyle, fontWeight) {
    this._triangleVertexData = this.createTriangleVertexData(triangleVertexData);
    this._fontPolygonBbox2 = this.createFontPolygonBbox2(fontPolygonBbox2);
    this._fontCanvasRenderMetrics = this.createFontCanvasRenderMetrics(fontCanvasRenderMetrics);
    this._fontFamily = fontFamily;
    this._fontStyle = fontStyle;
    this._fontWeight = fontWeight;
  }
  get triangleVertexData() {
    return this.createTriangleVertexData(this._triangleVertexData);
  }
  get fontPolygonBbox2() {
    return this.createFontPolygonBbox2(this._fontPolygonBbox2);
  }
  get fontCanvasRenderMetrics() {
    return this.createFontCanvasRenderMetrics(this._fontCanvasRenderMetrics);
  }
  get fontFamily() {
    return this._fontFamily;
  }
  get fontStyle() {
    return this._fontStyle;
  }
  get fontWeight() {
    return this._fontWeight;
  }
  createTriangleVertexData(triangleVertexData) {
    const iTriangleVertexData = {
      positions: [],
      indices: []
    };
    for (let j = 0; j < triangleVertexData.positions.length; j++) {
      iTriangleVertexData.positions[j] = triangleVertexData.positions[j];
    }
    for (let j = 0; j < triangleVertexData.indices.length; j++) {
      iTriangleVertexData.indices[j] = triangleVertexData.indices[j];
    }
    return iTriangleVertexData;
  }
  createFontPolygonBbox2(templateBbox2) {
    return __spreadValues({}, templateBbox2);
  }
  createFontCanvasRenderMetrics(templateRect) {
    return __spreadValues({}, templateRect);
  }
}
class TextGraphicsManager extends _Manage__WEBPACK_IMPORTED_MODULE_1__.Manager {
  static getInstance() {
    if (TextGraphicsManager.instance === void 0) {
      TextGraphicsManager.instance = new TextGraphicsManager();
    }
    return TextGraphicsManager.instance;
  }
  constructor() {
    super();
  }
  addTextGraphicCache(textStr, textGraphicTemplate) {
    let textGraphicCacheList = this.items.get(textStr);
    if (!textGraphicCacheList) {
      textGraphicCacheList = [];
    }
    textGraphicCacheList.push(textGraphicTemplate);
    this.items.set(textStr, textGraphicCacheList);
  }
  getTextGraphicCache(textStr, fontFamily = "auto", fontStyle = _engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_0__.ED2FontStyle.NORMAL, fontWeight = 100) {
    let textGraphicCacheList = this.items.get(textStr);
    if (!textGraphicCacheList) {
      return null;
    }
    for (let i = 0; i < textGraphicCacheList.length; i++) {
      const textGraphicCache = textGraphicCacheList[i];
      if (textGraphicCache.fontFamily === fontFamily && textGraphicCache.fontStyle === fontStyle && textGraphicCache.fontWeight === fontWeight) {
        return textGraphicCache;
      }
    }
    return null;
  }
}


/***/ }),

/***/ "./src/manager/WorkerManager.ts":
/*!**************************************!*\
  !*** ./src/manager/WorkerManager.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   WorkerManager: () => (/* binding */ WorkerManager)
/* harmony export */ });
/* harmony import */ var _Manage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Manage */ "./src/manager/Manage.ts");


const PUBLIC_PATH = `scripts/`;
class WorkerManager extends _Manage__WEBPACK_IMPORTED_MODULE_0__.Manager {
  constructor() {
    super();
    this._id = 0;
    this._busMap = /* @__PURE__ */ new Map();
  }
  static getInstance() {
    if (WorkerManager.instance === void 0) {
      WorkerManager.instance = new WorkerManager();
    }
    return WorkerManager.instance;
  }
  createWorker(tag) {
    const worker = new Worker(`${PUBLIC_PATH}/${tag}.js`);
    if (!worker) {
      throw new Error(`Create Worker Error.`);
    }
    this.items.set(String(++this._id), worker);
    return worker;
  }
  destroyWorker(id) {
    const worker = this.items.get(id);
    if (!worker) {
      return;
    }
    worker.terminate();
    this.items.delete(id);
  }
}


/***/ }),

/***/ "./src/modules/RtreeService.ts":
/*!*************************************!*\
  !*** ./src/modules/RtreeService.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   RtreeService: () => (/* binding */ RtreeService)
/* harmony export */ });
/* harmony import */ var _config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config/CommandEnum */ "./src/config/CommandEnum.ts");
/* harmony import */ var _Constant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Constant */ "./src/Constant.ts");



class RtreeService {
  constructor() {
    _Constant__WEBPACK_IMPORTED_MODULE_1__.messageTool.messageBus.subscribe(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EFrameCommand.REFRESH_RTREE, this.refreshRtree.bind(this));
  }
  refreshRtree() {
    const updatedRtreeItems = [];
    const allRtreeItems = _Constant__WEBPACK_IMPORTED_MODULE_1__.rtree.getAllItems();
    allRtreeItems.forEach((rtreeItem) => {
      const newBBox2 = rtreeItem.target.model.updateBBox2();
      const oldBBox2 = rtreeItem.getBBox2();
      if (newBBox2 && oldBBox2 && !newBBox2.equals(oldBBox2)) {
        updatedRtreeItems.push(rtreeItem);
      }
    });
    for (let i = 0; i < updatedRtreeItems.length; i++) {
      const rtreeItem = updatedRtreeItems[i];
      const oldBBox2 = rtreeItem.getBBox2();
      const r = _Constant__WEBPACK_IMPORTED_MODULE_1__.rtree.remove({ x: oldBBox2.minX, y: oldBBox2.minY, w: oldBBox2.width, h: oldBBox2.height }, rtreeItem);
    }
    for (let i = 0; i < updatedRtreeItems.length; i++) {
      const rtreeItem = updatedRtreeItems[i];
      const newBBox2 = rtreeItem.target.model.updateBBox2();
      rtreeItem.updateBBox2(newBBox2);
      _Constant__WEBPACK_IMPORTED_MODULE_1__.rtree.insertItemData({ x: newBBox2.minX, y: newBBox2.minY, w: newBBox2.width, h: newBBox2.height }, rtreeItem);
    }
  }
}


/***/ }),

/***/ "./src/modules/textFontService/TextFontService.ts":
/*!********************************************************!*\
  !*** ./src/modules/textFontService/TextFontService.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TextFontService: () => (/* binding */ TextFontService)
/* harmony export */ });
/* harmony import */ var _Constant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Constant */ "./src/Constant.ts");
/* harmony import */ var _engine_common_modules_d2Canvas2Svg_Canvas__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../engine/common/modules/d2Canvas2Svg/Canvas */ "./src/engine/common/modules/d2Canvas2Svg/Canvas.ts");
/* harmony import */ var _engine_common_modules_d2Canvas2Svg_Config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../engine/common/modules/d2Canvas2Svg/Config */ "./src/engine/common/modules/d2Canvas2Svg/Config.ts");
/* harmony import */ var _engine_common_modules_d2Canvas2Svg_pixelFilter_PixelFilter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../engine/common/modules/d2Canvas2Svg/pixelFilter/PixelFilter */ "./src/engine/common/modules/d2Canvas2Svg/pixelFilter/PixelFilter.ts");
/* harmony import */ var _geometry_primitives_FontArray__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../geometry/primitives/FontArray */ "./src/geometry/primitives/FontArray.ts");
/* harmony import */ var _geometry_primitives_TextLayout__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../geometry/primitives/TextLayout */ "./src/geometry/primitives/TextLayout.ts");
/* harmony import */ var _manager_TextGraphicsManager__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../manager/TextGraphicsManager */ "./src/manager/TextGraphicsManager.ts");
/* harmony import */ var _manager_WorkerManager__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../manager/WorkerManager */ "./src/manager/WorkerManager.ts");

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};








class TextFontService {
  constructor(type = _engine_common_modules_d2Canvas2Svg_pixelFilter_PixelFilter__WEBPACK_IMPORTED_MODULE_3__.EPixelFilterResult.TRIANGLE) {
    this._canvasInstance = new _engine_common_modules_d2Canvas2Svg_Canvas__WEBPACK_IMPORTED_MODULE_1__.Canvas();
    this._pixelFilterType = type;
    this._taskDataList = [];
    this._flushCallbacks = [];
    this._isRuning = false;
    this._worker = _manager_WorkerManager__WEBPACK_IMPORTED_MODULE_7__.WorkerManager.getInstance().createWorker(`D2CanvasPixel2Svg`);
    this._worker.onmessage = this.workerMessageHandler.bind(this);
  }
  addVectorizeTextTask(textStrId, textContent, fontSize, startPointData, optional, flushCallback) {
    this._taskDataList.push({
      textStrId,
      textContent,
      fontSize,
      startPointData,
      optional
    });
    this._flushCallbacks.push(flushCallback ? flushCallback : null);
    if (this._taskDataList.length && !this._isRuning) {
      const itemData = this._taskDataList.shift();
      if (itemData) {
        this.vectorizeText(itemData.textStrId, itemData.textContent, itemData.fontSize, itemData.startPointData, itemData.optional);
      }
    }
  }
  vectorizeText(textStrId, textContent, fontSize, startPointData, optional) {
    this._isRuning = true;
    const taskId = _Constant__WEBPACK_IMPORTED_MODULE_0__.globalIdenManager.getHashIden();
    const iOptional = __spreadValues(__spreadValues({}, (0,_engine_common_modules_d2Canvas2Svg_Config__WEBPACK_IMPORTED_MODULE_2__.createDefaultOptional)()), optional || {});
    this._canvasInstance.setContextProfile({
      fontFamily: iOptional.fontFamily,
      fontVariant: iOptional.fontVariant,
      fontWeight: iOptional.fontWeight,
      fontStyle: iOptional.fontStyle
    });
    const { textArray, textPolygonBbox2Arrays, textCanvasRenderMetricsArray, vertexDataArray } = (0,_geometry_primitives_FontArray__WEBPACK_IMPORTED_MODULE_4__.createFontArray)(textContent);
    const imagePixelArray = [];
    const imageCutArray = [];
    let hasCanvasRendered = false;
    for (let rowIndex = 0; rowIndex < textArray.length; rowIndex++) {
      const colSize = textArray[rowIndex].length;
      if (typeof imagePixelArray[rowIndex] === "undefined") {
        imagePixelArray[rowIndex] = [];
      }
      if (typeof imageCutArray[rowIndex] === "undefined") {
        imageCutArray[rowIndex] = [];
      }
      for (let colIndex = 0; colIndex < colSize; colIndex++) {
        const text = textArray[rowIndex][colIndex];
        const textGraphicTemplate = _manager_TextGraphicsManager__WEBPACK_IMPORTED_MODULE_6__.TextGraphicsManager.getInstance().getTextGraphicCache(
          text,
          iOptional.fontFamily,
          iOptional.fontStyle,
          iOptional.fontWeight
        );
        if (textGraphicTemplate) {
          textPolygonBbox2Arrays[rowIndex][colIndex] = textGraphicTemplate.fontPolygonBbox2;
          textCanvasRenderMetricsArray[rowIndex][colIndex] = textGraphicTemplate.fontCanvasRenderMetrics;
          vertexDataArray[rowIndex][colIndex] = textGraphicTemplate.triangleVertexData;
        } else {
          if (text === " ") {
            textPolygonBbox2Arrays[rowIndex][colIndex] = null;
            textCanvasRenderMetricsArray[rowIndex][colIndex] = {
              fontCanvasRenderAreaRaitoW: 0.5,
              fontCanvasRenderAreaRaitoH: 1
            };
            vertexDataArray[rowIndex][colIndex] = {
              positions: [],
              indices: []
            };
          } else {
            hasCanvasRendered = true;
            this._rawString = text;
            const rect = this.calcRender();
            const imageData = this._canvasInstance.ctx.getImageData(0, 0, rect.xCut, rect.yCut).data;
            textPolygonBbox2Arrays[rowIndex][colIndex] = { minX: 0, minY: 0, maxX: 0, maxY: 0 };
            textCanvasRenderMetricsArray[rowIndex][colIndex] = this._canvasInstance.getText2RectMap(text);
            vertexDataArray[rowIndex][colIndex] = {
              positions: [],
              indices: []
            };
            imagePixelArray[rowIndex][colIndex] = imageData;
            imageCutArray[rowIndex][colIndex] = rect;
          }
        }
        this.resetStatus();
      }
    }
    if (hasCanvasRendered) {
      this._worker.postMessage({
        ID: "VectorizeText",
        data: {
          taskId,
          textStrId,
          optional: __spreadValues({}, iOptional),
          pixelFilterType: this._pixelFilterType,
          fontSize,
          startPointData,
          /* ... */
          textArray,
          textPolygonBbox2Arrays,
          textCanvasRenderMetricsArray,
          vertexDataArray,
          imagePixelArray,
          imageCutArray
        }
      });
    } else {
      this.flushLayout(textStrId, startPointData, textArray, textPolygonBbox2Arrays, textCanvasRenderMetricsArray, vertexDataArray, fontSize);
    }
  }
  workerMessageHandler(event) {
    const payload = event.data;
    const { textArray, vertexDataArray, textPolygonBbox2Arrays, textCanvasRenderMetricsArray, optional } = payload.data;
    for (let rowIndex = 0; rowIndex < textArray.length; rowIndex++) {
      const colSize = textArray[rowIndex].length;
      for (let colIndex = 0; colIndex < colSize; colIndex++) {
        const textGraphicTemplate = new _manager_TextGraphicsManager__WEBPACK_IMPORTED_MODULE_6__.TextGraphicTemplate(
          vertexDataArray[rowIndex][colIndex],
          textPolygonBbox2Arrays[rowIndex][colIndex],
          textCanvasRenderMetricsArray[rowIndex][colIndex],
          optional.fontFamily,
          optional.fontStyle,
          optional.fontWeight
        );
        _manager_TextGraphicsManager__WEBPACK_IMPORTED_MODULE_6__.TextGraphicsManager.getInstance().addTextGraphicCache(textArray[rowIndex][colIndex], textGraphicTemplate);
      }
    }
    this.flushLayout(
      payload.data.textStrId,
      payload.data.startPointData,
      payload.data.textArray,
      payload.data.textPolygonBbox2Arrays,
      payload.data.textCanvasRenderMetricsArray,
      payload.data.vertexDataArray,
      payload.data.fontSize
    );
  }
  flushLayout(elementModelItemId, startPointData, textArray, textPolygonBbox2Arrays, textCanvasRenderMetricsArray, vertexDataArray, fontSize) {
    const { bbox2, vertexDataArray: vertexDataArrayUpdated } = _geometry_primitives_TextLayout__WEBPACK_IMPORTED_MODULE_5__.TextLayout.worldComposing(
      startPointData,
      textArray,
      textPolygonBbox2Arrays,
      textCanvasRenderMetricsArray,
      vertexDataArray,
      fontSize,
      fontSize / this._canvasInstance.canvasBaseFontSize
    );
    this._isRuning = false;
    const flushCallback = this._flushCallbacks.shift();
    if (flushCallback instanceof Function) {
      flushCallback(elementModelItemId, bbox2, vertexDataArrayUpdated);
    }
    if (this._taskDataList.length && !this._isRuning) {
      const itemData = this._taskDataList.shift();
      if (itemData) {
        this.vectorizeText(itemData.textStrId, itemData.textContent, itemData.fontSize, itemData.startPointData, itemData.optional);
      }
    }
  }
  calcRender() {
    const lineHeight = Math.round(1.25 * this._canvasInstance.canvasBaseFontSize);
    this._canvasInstance.clearCanvas();
    return this._canvasInstance.renderTextContent(this._rawString, lineHeight);
  }
  resetStatus() {
    this._canvasInstance.clearCanvas();
  }
}


/***/ }),

/***/ "./src/objects/assist/primitive2d/D2AssistLineShape.ts":
/*!*************************************************************!*\
  !*** ./src/objects/assist/primitive2d/D2AssistLineShape.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2AssistLineShape: () => (/* binding */ D2AssistLineShape),
/* harmony export */   buildD2AssistLineShape: () => (/* binding */ buildD2AssistLineShape),
/* harmony export */   buildD2AssistLineShapeSimplify: () => (/* binding */ buildD2AssistLineShapeSimplify)
/* harmony export */ });
/* harmony import */ var _config_DrawLayerProfile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../config/DrawLayerProfile */ "./src/config/DrawLayerProfile.ts");
/* harmony import */ var _config_ElementProfile__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../config/ElementProfile */ "./src/config/ElementProfile.ts");
/* harmony import */ var _engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../engine/config/PrimitiveProfile */ "./src/engine/config/PrimitiveProfile.ts");
/* harmony import */ var _Main__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../Main */ "./src/Main.ts");
/* harmony import */ var _models_primitive2d_D2LineModel__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../models/primitive2d/D2LineModel */ "./src/objects/models/primitive2d/D2LineModel.ts");
/* harmony import */ var _shapes_primitive2d_D2LineShape__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../shapes/primitive2d/D2LineShape */ "./src/objects/shapes/primitive2d/D2LineShape.ts");







function buildD2AssistLineShapeSimplify(startPoint, endPoint, strokeColor = _Main__WEBPACK_IMPORTED_MODULE_3__.Color.WHITE, baseStrokeWidth = 0.5, isSolid = false, layerItemId = _config_DrawLayerProfile__WEBPACK_IMPORTED_MODULE_0__.EDrawLayerCode.MaskLayer) {
  const alpha = 1;
  const lineCap = _engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_2__.ECanvas2DLineCap.SQUARE;
  const lineModelItem = (0,_models_primitive2d_D2LineModel__WEBPACK_IMPORTED_MODULE_4__.buildD2LineModel)(
    layerItemId,
    startPoint,
    endPoint,
    baseStrokeWidth,
    strokeColor,
    alpha,
    isSolid,
    lineCap,
    true
  );
  const assistLineShapeItem = new D2AssistLineShape(lineModelItem, isSolid, lineCap, null);
  return assistLineShapeItem;
}
function buildD2AssistLineShape(layerItemId, startPoint, endPoint, baseStrokeWidth = 0.5, strokeColor = _Main__WEBPACK_IMPORTED_MODULE_3__.Color.WHITE, alpha = 1, isSolid = false, lineCap = _engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_2__.ECanvas2DLineCap.SQUARE, parent = null, isFixedStrokeWidth = true) {
  const lineModelItem = (0,_models_primitive2d_D2LineModel__WEBPACK_IMPORTED_MODULE_4__.buildD2LineModel)(
    layerItemId,
    startPoint,
    endPoint,
    baseStrokeWidth,
    strokeColor,
    alpha,
    isSolid,
    lineCap,
    isFixedStrokeWidth
  );
  const assistLineShapeItem = new D2AssistLineShape(lineModelItem, isSolid, lineCap, parent);
  return assistLineShapeItem;
}
class D2AssistLineShape extends _shapes_primitive2d_D2LineShape__WEBPACK_IMPORTED_MODULE_5__.D2LineShape {
  constructor(model, isSolid = true, lineCap, parent = null) {
    super(model);
    this.isSolid = isSolid;
    this.lineCap = lineCap;
    this._parent = parent;
    this.refreshRender();
  }
  get parent() {
    return this._parent;
  }
  set parent(value) {
    this.parent = value;
  }
  getType() {
    return _config_ElementProfile__WEBPACK_IMPORTED_MODULE_1__.ED2ElementType.D2AssistLine;
  }
  getStatus() {
    return this.status;
  }
  toJSON() {
    const elementModelItem = this.model;
    return {
      type: this.getType(),
      modelType: this.model.modelType,
      status: this.status,
      layerItemId: elementModelItem.layerItemId,
      elementItemId: elementModelItem.elementItemId,
      elementItemName: elementModelItem.elementItemName,
      startPoint: elementModelItem.startPoint.toJSON(),
      endPoint: elementModelItem.endPoint.toJSON(),
      strokeWidth: elementModelItem.strokeWidth,
      strokeColorData: elementModelItem.strokeColor.toRGBAJSON(),
      alpha: elementModelItem.alpha,
      lineCap: elementModelItem.lineCap,
      isSolid: elementModelItem.isSolid,
      segSize: elementModelItem.segSize,
      gapSize: elementModelItem.gapSize,
      isFixedStrokeWidth: elementModelItem.isFixedStrokeWidth
    };
  }
}


/***/ }),

/***/ "./src/objects/assist/primitive2d/D2AssistPointShape.ts":
/*!**************************************************************!*\
  !*** ./src/objects/assist/primitive2d/D2AssistPointShape.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2AssistPointShape: () => (/* binding */ D2AssistPointShape),
/* harmony export */   buildD2AssistPointShape: () => (/* binding */ buildD2AssistPointShape)
/* harmony export */ });
/* harmony import */ var _config_DrawLayerProfile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../config/DrawLayerProfile */ "./src/config/DrawLayerProfile.ts");
/* harmony import */ var _config_ElementProfile__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../config/ElementProfile */ "./src/config/ElementProfile.ts");
/* harmony import */ var _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../engine/common/geometry/vector/Vector2 */ "./src/engine/common/geometry/vector/Vector2.ts");
/* harmony import */ var _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../engine/common/utils/Color */ "./src/engine/common/utils/Color.ts");
/* harmony import */ var _engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../engine/config/PrimitiveProfile */ "./src/engine/config/PrimitiveProfile.ts");
/* harmony import */ var _models_primitive2d_D2PointModel__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../models/primitive2d/D2PointModel */ "./src/objects/models/primitive2d/D2PointModel.ts");
/* harmony import */ var _shapes_primitive2d_D2PointShape__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../shapes/primitive2d/D2PointShape */ "./src/objects/shapes/primitive2d/D2PointShape.ts");








function buildD2AssistPointShape(centerPoint, parent = null, shape = _engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_4__.ED2PointShape.DOT, size = 1.2, strokeColor = _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_3__.Color.GREEN) {
  const alpha = 1;
  const iSize = shape === _engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_4__.ED2PointShape.TRIANGLE ? size + 0.2 : size;
  const layerItemId = _config_DrawLayerProfile__WEBPACK_IMPORTED_MODULE_0__.EDrawLayerCode.MaskLayer;
  const elementModelItem = (0,_models_primitive2d_D2PointModel__WEBPACK_IMPORTED_MODULE_5__.buildD2PointModel)(layerItemId, centerPoint, iSize, shape, strokeColor, alpha, false);
  const assistLineShapeItem = new D2AssistPointShape(elementModelItem, parent);
  return assistLineShapeItem;
}
class D2AssistPointShape extends _shapes_primitive2d_D2PointShape__WEBPACK_IMPORTED_MODULE_6__.D2PointShape {
  constructor(model, parent = null) {
    super(model);
    this._parent = parent;
    this.refreshRender();
  }
  get parent() {
    return this._parent;
  }
  set parent(value) {
    this.parent = value;
  }
  isSelect(x, y) {
    const point = new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_2__.Vector2(x, y);
    const centerPoint = this.centerPoint;
    const distOfClickPointAndCenterPoint = point.sub(centerPoint).length;
    if (distOfClickPointAndCenterPoint <= this.size) {
      return true;
    }
    return false;
  }
  getType() {
    return _config_ElementProfile__WEBPACK_IMPORTED_MODULE_1__.ED2ElementType.D2Point;
  }
  getStatus() {
    return this.status;
  }
  toJSON() {
    const elementModelItem = this.model;
    return {
      type: this.getType(),
      modelType: this.model.modelType,
      status: this.status,
      layerItemId: elementModelItem.layerItemId,
      elementItemId: elementModelItem.elementItemId,
      elementItemName: elementModelItem.elementItemName,
      centerPoint: elementModelItem.centerPoint.toJSON(),
      size: elementModelItem.size,
      shape: elementModelItem.shape,
      strokeColorData: elementModelItem.strokeColor.toRGBAJSON(),
      alpha: elementModelItem.alpha
    };
  }
}


/***/ }),

/***/ "./src/objects/models/DrawLayerBaseItemModel.ts":
/*!******************************************************!*\
  !*** ./src/objects/models/DrawLayerBaseItemModel.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DrawLayerBaseItemModel: () => (/* binding */ DrawLayerBaseItemModel)
/* harmony export */ });

class DrawLayerBaseItemModel {
  constructor(layerItemId, layerItemName, layerItemType) {
    this._layerItemType = void 0;
    this._layerItemName = layerItemName;
    this._layerItemOpacity = 1;
    this._groupId = void 0;
    this._layerItemId = layerItemId;
    this._layerItemType = layerItemType;
  }
  get layerItemType() {
    return this._layerItemType;
  }
  set layerItemType(value) {
    this._layerItemType = value;
  }
  get layerItemName() {
    return this._layerItemName;
  }
  set layerItemName(value) {
    this._layerItemName = value;
  }
  get layerItemOpacity() {
    return this._layerItemOpacity;
  }
  set layerItemOpacity(value) {
    this._layerItemOpacity = value;
  }
  get groupId() {
    return this._groupId;
  }
  set groupId(value) {
    this._groupId = value;
  }
  get layerItemId() {
    return this._layerItemId;
  }
  set layerItemId(value) {
    this._layerItemId = value;
  }
}


/***/ }),

/***/ "./src/objects/models/DrawLayerModel.ts":
/*!**********************************************!*\
  !*** ./src/objects/models/DrawLayerModel.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DrawLayerModel: () => (/* binding */ DrawLayerModel)
/* harmony export */ });
/* harmony import */ var _DrawLayerBaseItemModel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DrawLayerBaseItemModel */ "./src/objects/models/DrawLayerBaseItemModel.ts");


class DrawLayerModel extends _DrawLayerBaseItemModel__WEBPACK_IMPORTED_MODULE_0__.DrawLayerBaseItemModel {
  constructor(layerItemId, layerItemName, layerItemType) {
    super(layerItemId, layerItemName, layerItemType);
  }
}


/***/ }),

/***/ "./src/objects/models/manager/DrawLayerModelManager.ts":
/*!*************************************************************!*\
  !*** ./src/objects/models/manager/DrawLayerModelManager.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DrawLayerModelManager: () => (/* binding */ DrawLayerModelManager)
/* harmony export */ });
/* harmony import */ var _config_DrawLayerProfile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../config/DrawLayerProfile */ "./src/config/DrawLayerProfile.ts");
/* harmony import */ var _Constant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../Constant */ "./src/Constant.ts");
/* harmony import */ var _engine_config_PlaneProfile__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../engine/config/PlaneProfile */ "./src/engine/config/PlaneProfile.ts");
/* harmony import */ var _manager_Manage__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../manager/Manage */ "./src/manager/Manage.ts");
/* harmony import */ var _DrawLayerModel__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../DrawLayerModel */ "./src/objects/models/DrawLayerModel.ts");






class DrawLayerModelManager extends _manager_Manage__WEBPACK_IMPORTED_MODULE_3__.Manager {
  static getInstance() {
    if (DrawLayerModelManager.instance === void 0) {
      DrawLayerModelManager.instance = new DrawLayerModelManager();
    }
    return DrawLayerModelManager.instance;
  }
  constructor() {
    super();
  }
  createControlItem(layerItemName) {
    const newLayerModelItem = new _DrawLayerModel__WEBPACK_IMPORTED_MODULE_4__.DrawLayerModel(_config_DrawLayerProfile__WEBPACK_IMPORTED_MODULE_0__.EDrawLayerCode.MaskLayer, layerItemName, _engine_config_PlaneProfile__WEBPACK_IMPORTED_MODULE_2__.EPlaneType.ControlPlane);
    this.items.set(newLayerModelItem.layerItemId, newLayerModelItem);
    return newLayerModelItem;
  }
  createContentItem(layerItemName) {
    const newLayerModelItem = new _DrawLayerModel__WEBPACK_IMPORTED_MODULE_4__.DrawLayerModel(_Constant__WEBPACK_IMPORTED_MODULE_1__.globalIdenManager.getDrawLayerIden(), layerItemName, _engine_config_PlaneProfile__WEBPACK_IMPORTED_MODULE_2__.EPlaneType.ContentPlane);
    this.items.set(newLayerModelItem.layerItemId, newLayerModelItem);
    return newLayerModelItem;
  }
}


/***/ }),

/***/ "./src/objects/models/manager/primitive2d/D2ArcModelManager.ts":
/*!*********************************************************************!*\
  !*** ./src/objects/models/manager/primitive2d/D2ArcModelManager.ts ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2ArcModelManager: () => (/* binding */ D2ArcModelManager)
/* harmony export */ });
/* harmony import */ var _manager_Manage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../manager/Manage */ "./src/manager/Manage.ts");
/* harmony import */ var _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../engine/common/utils/Color */ "./src/engine/common/utils/Color.ts");
/* harmony import */ var _primitive2d_D2ArcModel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../primitive2d/D2ArcModel */ "./src/objects/models/primitive2d/D2ArcModel.ts");




class D2ArcModelManager extends _manager_Manage__WEBPACK_IMPORTED_MODULE_0__.Manager {
  static getInstance() {
    if (D2ArcModelManager.instance === void 0) {
      D2ArcModelManager.instance = new D2ArcModelManager();
    }
    return D2ArcModelManager.instance;
  }
  constructor() {
    super();
  }
  createModelItem(elementItemId, layerItemId, centerPoint, radius, startAngle, endAngle, sweep, strokeWidth = 1, strokeColor = _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_1__.Color.BLACK, isFill = false, fillColor = _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_1__.Color.createByAlpha(0)) {
    const elementModelItem = new _primitive2d_D2ArcModel__WEBPACK_IMPORTED_MODULE_2__.D2ArcModel(
      elementItemId,
      layerItemId,
      centerPoint,
      radius,
      startAngle,
      endAngle,
      sweep,
      strokeWidth,
      strokeColor,
      isFill,
      fillColor
    );
    this.items.set(elementModelItem.elementItemId, elementModelItem);
    return elementModelItem;
  }
  deleteModelItem(elementItemId) {
    const elementModelItem = this.items.get(elementItemId);
    if (!elementModelItem) {
      return;
    }
    this.items.delete(elementModelItem.elementItemId);
  }
}


/***/ }),

/***/ "./src/objects/models/manager/primitive2d/D2CircleModelManager.ts":
/*!************************************************************************!*\
  !*** ./src/objects/models/manager/primitive2d/D2CircleModelManager.ts ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2CircleModelManager: () => (/* binding */ D2CircleModelManager)
/* harmony export */ });
/* harmony import */ var _manager_Manage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../manager/Manage */ "./src/manager/Manage.ts");
/* harmony import */ var _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../engine/common/utils/Color */ "./src/engine/common/utils/Color.ts");
/* harmony import */ var _primitive2d_D2CircleModel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../primitive2d/D2CircleModel */ "./src/objects/models/primitive2d/D2CircleModel.ts");




class D2CircleModelManager extends _manager_Manage__WEBPACK_IMPORTED_MODULE_0__.Manager {
  static getInstance() {
    if (D2CircleModelManager.instance === void 0) {
      D2CircleModelManager.instance = new D2CircleModelManager();
    }
    return D2CircleModelManager.instance;
  }
  constructor() {
    super();
  }
  createModelItem(elementItemId, layerItemId, centerPoint, radius, strokeWidth = 1, strokeColor = _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_1__.Color.BLACK, isFill = false, fillColor = _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_1__.Color.createByAlpha(0)) {
    const elementModelItem = new _primitive2d_D2CircleModel__WEBPACK_IMPORTED_MODULE_2__.D2CircleModel(
      elementItemId,
      layerItemId,
      centerPoint,
      radius,
      strokeWidth,
      strokeColor,
      isFill,
      fillColor
    );
    this.items.set(elementModelItem.elementItemId, elementModelItem);
    return elementModelItem;
  }
  deleteModelItem(elementItemId) {
    const elementModelItem = this.items.get(elementItemId);
    if (!elementModelItem) {
      return;
    }
    this.items.delete(elementModelItem.elementItemId);
  }
}


/***/ }),

/***/ "./src/objects/models/manager/primitive2d/D2LineModelManager.ts":
/*!**********************************************************************!*\
  !*** ./src/objects/models/manager/primitive2d/D2LineModelManager.ts ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2LineModelManager: () => (/* binding */ D2LineModelManager)
/* harmony export */ });
/* harmony import */ var _manager_Manage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../manager/Manage */ "./src/manager/Manage.ts");
/* harmony import */ var _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../engine/common/utils/Color */ "./src/engine/common/utils/Color.ts");
/* harmony import */ var _primitive2d_D2LineModel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../primitive2d/D2LineModel */ "./src/objects/models/primitive2d/D2LineModel.ts");




class D2LineModelManager extends _manager_Manage__WEBPACK_IMPORTED_MODULE_0__.Manager {
  static getInstance() {
    if (D2LineModelManager.instance === void 0) {
      D2LineModelManager.instance = new D2LineModelManager();
    }
    return D2LineModelManager.instance;
  }
  constructor() {
    super();
  }
  createModelItem(elementItemId, layerItemId, startPoint, endPoint, strokeWidth = 1, strokeColor = _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_1__.Color.BLACK) {
    const elementModelItem = new _primitive2d_D2LineModel__WEBPACK_IMPORTED_MODULE_2__.D2LineModel(elementItemId, layerItemId, startPoint, endPoint, strokeWidth, strokeColor);
    this.items.set(elementModelItem.elementItemId, elementModelItem);
    return elementModelItem;
  }
  deleteModelItem(elementItemId) {
    const elementModelItem = this.items.get(elementItemId);
    if (!elementModelItem) {
      return;
    }
    this.items.delete(elementModelItem.elementItemId);
  }
}


/***/ }),

/***/ "./src/objects/models/manager/primitive2d/D2TextModelManager.ts":
/*!**********************************************************************!*\
  !*** ./src/objects/models/manager/primitive2d/D2TextModelManager.ts ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2TextModelManager: () => (/* binding */ D2TextModelManager)
/* harmony export */ });
/* harmony import */ var _manager_Manage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../manager/Manage */ "./src/manager/Manage.ts");
/* harmony import */ var _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../engine/common/utils/Color */ "./src/engine/common/utils/Color.ts");
/* harmony import */ var _primitive2d_D2TextModel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../primitive2d/D2TextModel */ "./src/objects/models/primitive2d/D2TextModel.ts");
/* harmony import */ var _engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../engine/config/PrimitiveProfile */ "./src/engine/config/PrimitiveProfile.ts");





class D2TextModelManager extends _manager_Manage__WEBPACK_IMPORTED_MODULE_0__.Manager {
  static getInstance() {
    if (D2TextModelManager.instance === void 0) {
      D2TextModelManager.instance = new D2TextModelManager();
    }
    return D2TextModelManager.instance;
  }
  constructor() {
    super();
  }
  createModelItem(elementItemId, layerItemId, startPoint, content, fontFamily = "auto", fontStyle = _engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_3__.ED2FontStyle.NORMAL, fontSize = 10, fontWeight = 100, strokeColor = _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_1__.Color.WHITE, alpha = 1, bgColor = null, paddingSurrounded = { top: 1, right: 1, bottom: 1, left: 1 }) {
    const elementModelItem = new _primitive2d_D2TextModel__WEBPACK_IMPORTED_MODULE_2__.D2TextModel(
      elementItemId,
      layerItemId,
      startPoint,
      content,
      fontFamily,
      fontStyle,
      fontSize,
      fontWeight,
      strokeColor,
      alpha,
      bgColor,
      paddingSurrounded
    );
    this.items.set(elementModelItem.elementItemId, elementModelItem);
    return elementModelItem;
  }
  deleteModelItem(elementItemId) {
    const elementModelItem = this.items.get(elementItemId);
    if (!elementModelItem) {
      return;
    }
    this.items.delete(elementModelItem.elementItemId);
  }
}


/***/ }),

/***/ "./src/objects/models/primitive2d/D2ArcModel.ts":
/*!******************************************************!*\
  !*** ./src/objects/models/primitive2d/D2ArcModel.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2ArcModel: () => (/* binding */ D2ArcModel),
/* harmony export */   buildD2ArcModel: () => (/* binding */ buildD2ArcModel)
/* harmony export */ });
/* harmony import */ var _config_ElementProfile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../config/ElementProfile */ "./src/config/ElementProfile.ts");
/* harmony import */ var _Constant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../Constant */ "./src/Constant.ts");
/* harmony import */ var _engine_common_geometry_shapes_D2CrossRelationShips__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../engine/common/geometry/shapes/D2CrossRelationShips */ "./src/engine/common/geometry/shapes/D2CrossRelationShips.ts");
/* harmony import */ var _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../engine/common/geometry/vector/Vector2 */ "./src/engine/common/geometry/vector/Vector2.ts");
/* harmony import */ var _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../engine/common/utils/Color */ "./src/engine/common/utils/Color.ts");
/* harmony import */ var _engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../engine/config/PrimitiveProfile */ "./src/engine/config/PrimitiveProfile.ts");
/* harmony import */ var _geometry_primitives_StructLine__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../geometry/primitives/StructLine */ "./src/geometry/primitives/StructLine.ts");
/* harmony import */ var _geometry_primitives_BBox_Utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../geometry/primitives/BBox.Utils */ "./src/geometry/primitives/BBox.Utils.ts");
/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../utils/Utils */ "./src/utils/Utils.ts");
/* harmony import */ var _elementBase_ElementModelItemBase__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./elementBase/ElementModelItemBase */ "./src/objects/models/primitive2d/elementBase/ElementModelItemBase.ts");











function buildD2ArcModel(layerItemId, centerPoint, radius, startAngle, endAngle, sweep, strokeWidth = 1, strokeColor = _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_4__.Color.BLACK, isFill = false, fillColor = _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_4__.Color.createByAlpha(0), alpha = 1, isSolid = true, lineCap = _engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_5__.ECanvas2DLineCap.ROUND, isFixedStrokeWidth = false) {
  const elementItemId = _Constant__WEBPACK_IMPORTED_MODULE_1__.globalIdenManager.getElementIden();
  const elementModelItem = new D2ArcModel(
    elementItemId,
    layerItemId,
    centerPoint,
    radius,
    startAngle,
    endAngle,
    sweep,
    strokeWidth,
    strokeColor,
    isFill,
    fillColor,
    alpha,
    isSolid,
    lineCap,
    isFixedStrokeWidth
  );
  return elementModelItem;
}
class D2ArcModel extends _elementBase_ElementModelItemBase__WEBPACK_IMPORTED_MODULE_9__.ElementModelItemBase {
  constructor(elementItemId, layerItemId, centerPoint, radius, startAngle, endAngle, sweep, strokeWidth, strokeColor = new _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_4__.Color(0, 0, 0, 1), isFill = false, fillColor = new _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_4__.Color(0, 0, 0, 0), alpha = 1, isSolid = true, lineCap = _engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_5__.ECanvas2DLineCap.ROUND, isFixedStrokeWidth = false, bbox2) {
    super(elementItemId, layerItemId);
    this.modelType = _config_ElementProfile__WEBPACK_IMPORTED_MODULE_0__.ED2ElementType.D2Arc;
    this._centerPoint = centerPoint;
    this._radius = radius;
    this._startAngle = startAngle;
    this._endAngle = endAngle;
    this._sweep = sweep;
    this._strokeWidth = strokeWidth;
    this._strokeColor = strokeColor;
    this._fillColor = fillColor;
    this._lineCap = lineCap;
    this._isSolid = isSolid;
    this._isFill = isFill;
    const { segSize, gapSize } = (0,_utils_Utils__WEBPACK_IMPORTED_MODULE_8__.updateDashedSegProfile)(this._lineCap, this._strokeWidth);
    this._segSize = segSize;
    this._gapSize = gapSize;
    this._fixedStrokeWidth = isFixedStrokeWidth;
    if (!bbox2) {
      this.bbox2 = (0,_geometry_primitives_BBox_Utils__WEBPACK_IMPORTED_MODULE_7__.createD2ArcBbox2)(this._centerPoint, this._radius, this._strokeWidth);
    }
    this.alpha = alpha;
  }
  get centerPoint() {
    return this._centerPoint;
  }
  set centerPoint(value) {
    this._centerPoint = value;
  }
  get radius() {
    return this._radius;
  }
  set radius(value) {
    this._radius = value;
  }
  get startAngle() {
    return this._startAngle;
  }
  set startAngle(value) {
    this._startAngle = value;
  }
  get endAngle() {
    return this._endAngle;
  }
  set endAngle(value) {
    this._endAngle = value;
  }
  get sweep() {
    return this._sweep;
  }
  set sweep(value) {
    this._sweep = value;
  }
  get strokeWidth() {
    return this._strokeWidth;
  }
  set strokeWidth(value) {
    this._strokeWidth = value;
  }
  get strokeColor() {
    return this._strokeColor;
  }
  set strokeColor(value) {
    this._strokeColor = value;
  }
  get fillColor() {
    return this._fillColor;
  }
  set fillColor(value) {
    this._fillColor = value;
  }
  get lineCap() {
    return this._lineCap;
  }
  set lineCap(value) {
    this._lineCap = value;
    const { segSize, gapSize } = (0,_utils_Utils__WEBPACK_IMPORTED_MODULE_8__.updateDashedSegProfile)(this._lineCap, this._strokeWidth);
    this._segSize = segSize;
    this._gapSize = gapSize;
  }
  get isSolid() {
    return this._isSolid;
  }
  set isSolid(value) {
    this._isSolid = value;
  }
  get isFill() {
    return this._isFill;
  }
  set isFill(value) {
    this._isFill = value;
  }
  get segSize() {
    return this._segSize;
  }
  set segSize(value) {
    this._segSize = value;
  }
  get gapSize() {
    return this._gapSize;
  }
  set gapSize(value) {
    this._gapSize = value;
  }
  get isFixedStrokeWidth() {
    return this._fixedStrokeWidth;
  }
  set isFixedStrokeWidth(value) {
    this._fixedStrokeWidth = value;
  }
  get element() {
    return new _geometry_primitives_StructLine__WEBPACK_IMPORTED_MODULE_6__.StructLine(new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_3__.Vector2(0, 0), new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_3__.Vector2(0, 0));
  }
  getBBox2() {
    return this.bbox2;
  }
  updateBBox2() {
    this.bbox2 = (0,_geometry_primitives_BBox_Utils__WEBPACK_IMPORTED_MODULE_7__.createD2ArcBbox2)(this.centerPoint, this.radius, this.strokeWidth);
    return this.bbox2;
  }
  isInGraphical(x, y) {
    return _engine_common_geometry_shapes_D2CrossRelationShips__WEBPACK_IMPORTED_MODULE_2__.D2CrossRelationShips.pointAndArc(
      new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_3__.Vector2(x, y),
      this.startAngle,
      this.endAngle,
      this.sweep,
      this.radius,
      this.centerPoint,
      this.strokeWidth,
      this.isFill
    );
  }
}


/***/ }),

/***/ "./src/objects/models/primitive2d/D2CircleModel.ts":
/*!*********************************************************!*\
  !*** ./src/objects/models/primitive2d/D2CircleModel.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2CircleModel: () => (/* binding */ D2CircleModel),
/* harmony export */   buildD2CircleModel: () => (/* binding */ buildD2CircleModel)
/* harmony export */ });
/* harmony import */ var _config_ElementProfile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../config/ElementProfile */ "./src/config/ElementProfile.ts");
/* harmony import */ var _Constant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../Constant */ "./src/Constant.ts");
/* harmony import */ var _engine_common_geometry_shapes_D2CrossRelationShips__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../engine/common/geometry/shapes/D2CrossRelationShips */ "./src/engine/common/geometry/shapes/D2CrossRelationShips.ts");
/* harmony import */ var _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../engine/common/geometry/vector/Vector2 */ "./src/engine/common/geometry/vector/Vector2.ts");
/* harmony import */ var _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../engine/common/utils/Color */ "./src/engine/common/utils/Color.ts");
/* harmony import */ var _engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../engine/config/PrimitiveProfile */ "./src/engine/config/PrimitiveProfile.ts");
/* harmony import */ var _geometry_primitives_StructLine__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../geometry/primitives/StructLine */ "./src/geometry/primitives/StructLine.ts");
/* harmony import */ var _geometry_primitives_BBox_Utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../geometry/primitives/BBox.Utils */ "./src/geometry/primitives/BBox.Utils.ts");
/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../utils/Utils */ "./src/utils/Utils.ts");
/* harmony import */ var _elementBase_ElementModelItemBase__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./elementBase/ElementModelItemBase */ "./src/objects/models/primitive2d/elementBase/ElementModelItemBase.ts");











function buildD2CircleModel(layerItemId, centerPoint, radius, strokeWidth = 1, strokeColor = _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_4__.Color.BLACK, isFill = false, fillColor = _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_4__.Color.createByAlpha(0), alpha = 1, isSolid = true, lineCap = _engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_5__.ECanvas2DLineCap.ROUND, isFixedStrokeWidth = false) {
  const elementItemId = _Constant__WEBPACK_IMPORTED_MODULE_1__.globalIdenManager.getElementIden();
  const elementModelItem = new D2CircleModel(
    elementItemId,
    layerItemId,
    centerPoint,
    radius,
    strokeWidth,
    strokeColor,
    isFill,
    fillColor,
    alpha,
    isSolid,
    lineCap,
    isFixedStrokeWidth
  );
  return elementModelItem;
}
class D2CircleModel extends _elementBase_ElementModelItemBase__WEBPACK_IMPORTED_MODULE_9__.ElementModelItemBase {
  constructor(elementItemId, layerItemId, centerPoint, radius, strokeWidth, strokeColor = new _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_4__.Color(0, 0, 0, 1), isFill = false, fillColor = new _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_4__.Color(0, 0, 0, 0), alpha = 1, isSolid = true, lineCap = _engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_5__.ECanvas2DLineCap.ROUND, isFixedStrokeWidth = false, bbox2) {
    super(elementItemId, layerItemId);
    this.modelType = _config_ElementProfile__WEBPACK_IMPORTED_MODULE_0__.ED2ElementType.D2Circle;
    this._centerPoint = centerPoint;
    this._radius = radius;
    this._strokeWidth = strokeWidth;
    this._strokeColor = strokeColor;
    this._fillColor = fillColor;
    this._lineCap = lineCap;
    this._isFill = isFill;
    this._isSolid = isSolid;
    const { segSize, gapSize } = (0,_utils_Utils__WEBPACK_IMPORTED_MODULE_8__.updateDashedSegProfile)(this._lineCap, this._strokeWidth);
    this._segSize = segSize;
    this._gapSize = gapSize;
    this._fixedStrokeWidth = isFixedStrokeWidth;
    if (!bbox2) {
      this.bbox2 = (0,_geometry_primitives_BBox_Utils__WEBPACK_IMPORTED_MODULE_7__.createD2CircleBbox2)(this._centerPoint, this._radius, this._strokeWidth);
    }
    this.alpha = alpha;
  }
  get centerPoint() {
    return this._centerPoint;
  }
  set centerPoint(value) {
    this._centerPoint = value;
  }
  get radius() {
    return this._radius;
  }
  set radius(value) {
    this._radius = value;
  }
  get strokeWidth() {
    return this._strokeWidth;
  }
  set strokeWidth(value) {
    this._strokeWidth = value;
  }
  get strokeColor() {
    return this._strokeColor;
  }
  set strokeColor(value) {
    this._strokeColor = value;
  }
  get fillColor() {
    return this._fillColor;
  }
  set fillColor(value) {
    this._fillColor = value;
  }
  get lineCap() {
    return this._lineCap;
  }
  set lineCap(value) {
    this._lineCap = value;
    const { segSize, gapSize } = (0,_utils_Utils__WEBPACK_IMPORTED_MODULE_8__.updateDashedSegProfile)(this._lineCap, this._strokeWidth);
    this._segSize = segSize;
    this._gapSize = gapSize;
  }
  get isSolid() {
    return this._isSolid;
  }
  set isSolid(value) {
    this._isSolid = value;
  }
  get isFill() {
    return this._isFill;
  }
  set isFill(value) {
    this._isFill = value;
  }
  get segSize() {
    return this._segSize;
  }
  set segSize(value) {
    this._segSize = value;
  }
  get gapSize() {
    return this._gapSize;
  }
  set gapSize(value) {
    this._gapSize = value;
  }
  get isFixedStrokeWidth() {
    return this._fixedStrokeWidth;
  }
  set isFixedStrokeWidth(value) {
    this._fixedStrokeWidth = value;
  }
  get element() {
    return new _geometry_primitives_StructLine__WEBPACK_IMPORTED_MODULE_6__.StructLine(new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_3__.Vector2(0, 0), new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_3__.Vector2(0, 0));
  }
  getBBox2() {
    return this.bbox2;
  }
  updateBBox2() {
    this.bbox2 = (0,_geometry_primitives_BBox_Utils__WEBPACK_IMPORTED_MODULE_7__.createD2CircleBbox2)(this.centerPoint, this.radius, this.strokeWidth);
    return this.bbox2;
  }
  isInGraphical(x, y) {
    return _engine_common_geometry_shapes_D2CrossRelationShips__WEBPACK_IMPORTED_MODULE_2__.D2CrossRelationShips.pointAndCirlce(new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_3__.Vector2(x, y), this.radius, this.centerPoint, this.strokeWidth, this.isFill);
  }
}


/***/ }),

/***/ "./src/objects/models/primitive2d/D2LineModel.ts":
/*!*******************************************************!*\
  !*** ./src/objects/models/primitive2d/D2LineModel.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2LineModel: () => (/* binding */ D2LineModel),
/* harmony export */   buildD2LineModel: () => (/* binding */ buildD2LineModel)
/* harmony export */ });
/* harmony import */ var _config_ElementProfile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../config/ElementProfile */ "./src/config/ElementProfile.ts");
/* harmony import */ var _Constant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../Constant */ "./src/Constant.ts");
/* harmony import */ var _engine_common_geometry_shapes_D2CrossRelationShips__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../engine/common/geometry/shapes/D2CrossRelationShips */ "./src/engine/common/geometry/shapes/D2CrossRelationShips.ts");
/* harmony import */ var _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../engine/common/geometry/vector/Vector2 */ "./src/engine/common/geometry/vector/Vector2.ts");
/* harmony import */ var _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../engine/common/utils/Color */ "./src/engine/common/utils/Color.ts");
/* harmony import */ var _engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../engine/config/PrimitiveProfile */ "./src/engine/config/PrimitiveProfile.ts");
/* harmony import */ var _geometry_primitives_StructLine__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../geometry/primitives/StructLine */ "./src/geometry/primitives/StructLine.ts");
/* harmony import */ var _geometry_primitives_BBox_Utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../geometry/primitives/BBox.Utils */ "./src/geometry/primitives/BBox.Utils.ts");
/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../utils/Utils */ "./src/utils/Utils.ts");
/* harmony import */ var _elementBase_ElementModelItemBase__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./elementBase/ElementModelItemBase */ "./src/objects/models/primitive2d/elementBase/ElementModelItemBase.ts");











function buildD2LineModel(layerItemId, startPoint, endPoint, strokeWidth = 1, strokeColor = _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_4__.Color.BLACK, alpha = 1, isSolid = true, lineCap = _engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_5__.ECanvas2DLineCap.ROUND, isFixedStrokeWidth = false) {
  const elementItemId = _Constant__WEBPACK_IMPORTED_MODULE_1__.globalIdenManager.getElementIden();
  const elementModelItem = new D2LineModel(
    elementItemId,
    layerItemId,
    startPoint,
    endPoint,
    strokeWidth,
    strokeColor,
    alpha,
    isSolid,
    lineCap,
    isFixedStrokeWidth
  );
  return elementModelItem;
}
class D2LineModel extends _elementBase_ElementModelItemBase__WEBPACK_IMPORTED_MODULE_9__.ElementModelItemBase {
  constructor(elementItemId, layerItemId, startPoint, endPoint, strokeWidth = 1, strokeColor = new _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_4__.Color(0, 0, 0, 1), alpha = 1, isSolid = true, lineCap = _engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_5__.ECanvas2DLineCap.ROUND, isFixedStrokeWidth = false, bbox2) {
    super(elementItemId, layerItemId);
    this.modelType = _config_ElementProfile__WEBPACK_IMPORTED_MODULE_0__.ED2ElementType.D2Line;
    this._startPoint = startPoint;
    this._endPoint = endPoint;
    this._strokeWidth = strokeWidth;
    this._strokeColor = strokeColor;
    this._lineCap = lineCap;
    this._isSolid = isSolid;
    const { segSize, gapSize } = (0,_utils_Utils__WEBPACK_IMPORTED_MODULE_8__.updateDashedSegProfile)(this._lineCap, this._strokeWidth);
    this._segSize = segSize;
    this._gapSize = gapSize;
    this._fixedStrokeWidth = isFixedStrokeWidth;
    if (!bbox2) {
      this.bbox2 = (0,_geometry_primitives_BBox_Utils__WEBPACK_IMPORTED_MODULE_7__.createD2LineBbox2)(this._startPoint, this._endPoint, strokeWidth);
    }
    this.alpha = alpha;
  }
  get startPoint() {
    return this._startPoint;
  }
  set startPoint(value) {
    this._startPoint = value;
  }
  get endPoint() {
    return this._endPoint;
  }
  set endPoint(value) {
    this._endPoint = value;
  }
  get strokeWidth() {
    return this._strokeWidth;
  }
  set strokeWidth(value) {
    this._strokeWidth = value;
  }
  get strokeColor() {
    return this._strokeColor;
  }
  set strokeColor(value) {
    this._strokeColor = value;
  }
  get lineCap() {
    return this._lineCap;
  }
  set lineCap(value) {
    this._lineCap = value;
    const { segSize, gapSize } = (0,_utils_Utils__WEBPACK_IMPORTED_MODULE_8__.updateDashedSegProfile)(this._lineCap, this._strokeWidth);
    this._segSize = segSize;
    this._gapSize = gapSize;
  }
  get isSolid() {
    return this._isSolid;
  }
  set isSolid(value) {
    this._isSolid = value;
  }
  get segSize() {
    return this._segSize;
  }
  set segSize(value) {
    this._segSize = value;
  }
  get gapSize() {
    return this._gapSize;
  }
  set gapSize(value) {
    this._gapSize = value;
  }
  get isFixedStrokeWidth() {
    return this._fixedStrokeWidth;
  }
  set isFixedStrokeWidth(value) {
    this._fixedStrokeWidth = value;
  }
  get length() {
    return this.startPoint.distance(this.endPoint);
  }
  set length(value) {
    const direct = this.endPoint.sub(this.startPoint).normalize();
    const endPoint = this.startPoint.add(direct.mul(value));
    this.endPoint = endPoint;
  }
  get direct() {
    return this.endPoint.sub(this.startPoint).normalize();
  }
  get centerPoint() {
    const startPoint = this.startPoint;
    const endPoint = this.endPoint;
    return new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_3__.Vector2((endPoint.x - startPoint.x) / 2, (endPoint.y - startPoint.y) / 2);
  }
  get element() {
    return new _geometry_primitives_StructLine__WEBPACK_IMPORTED_MODULE_6__.StructLine(this.startPoint, this.endPoint);
  }
  getBBox2() {
    return this.bbox2;
  }
  updateBBox2() {
    this.bbox2 = (0,_geometry_primitives_BBox_Utils__WEBPACK_IMPORTED_MODULE_7__.createD2LineBbox2)(this.startPoint, this.endPoint, this.strokeWidth);
    return this.bbox2;
  }
  isInGraphical(x, y) {
    return _engine_common_geometry_shapes_D2CrossRelationShips__WEBPACK_IMPORTED_MODULE_2__.D2CrossRelationShips.pointAndLine(new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_3__.Vector2(x, y), this.startPoint, this.endPoint, this.strokeWidth);
  }
}


/***/ }),

/***/ "./src/objects/models/primitive2d/D2PointModel.ts":
/*!********************************************************!*\
  !*** ./src/objects/models/primitive2d/D2PointModel.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2PointModel: () => (/* binding */ D2PointModel),
/* harmony export */   buildD2PointModel: () => (/* binding */ buildD2PointModel)
/* harmony export */ });
/* harmony import */ var _config_ElementProfile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../config/ElementProfile */ "./src/config/ElementProfile.ts");
/* harmony import */ var _Constant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../Constant */ "./src/Constant.ts");
/* harmony import */ var _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../engine/common/utils/Color */ "./src/engine/common/utils/Color.ts");
/* harmony import */ var _engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../engine/config/PrimitiveProfile */ "./src/engine/config/PrimitiveProfile.ts");
/* harmony import */ var _elementBase_ElementModelItemBase__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./elementBase/ElementModelItemBase */ "./src/objects/models/primitive2d/elementBase/ElementModelItemBase.ts");






function buildD2PointModel(layerItemId, centerPoint, size = 1, shape = _engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_3__.ED2PointShape.DOT, strokeColor = _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_2__.Color.GREEN, alpha = 1, isEnableScale = false) {
  const elementItemId = _Constant__WEBPACK_IMPORTED_MODULE_1__.globalIdenManager.getElementIden();
  const elementModelItem = new D2PointModel(elementItemId, layerItemId, centerPoint, size, shape, strokeColor, alpha, isEnableScale);
  return elementModelItem;
}
class D2PointModel extends _elementBase_ElementModelItemBase__WEBPACK_IMPORTED_MODULE_4__.ElementModelItemBase {
  constructor(elementItemId, layerItemId, centerPoint, size, shape = _engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_3__.ED2PointShape.DOT, strokeColor = _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_2__.Color.GREEN, alpha = 1, isEnableScale = false) {
    super(elementItemId, layerItemId);
    this._strokeColor = _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_2__.Color.GREEN;
    this.modelType = _config_ElementProfile__WEBPACK_IMPORTED_MODULE_0__.ED2ElementType.D2Point;
    this._centerPoint = centerPoint;
    this._size = size;
    this._shape = shape;
    this._strokeColor = strokeColor;
    this.alpha = alpha;
    this._isEnableScale = isEnableScale;
  }
  get centerPoint() {
    return this._centerPoint;
  }
  set centerPoint(value) {
    this._centerPoint = value;
  }
  get size() {
    return this._size;
  }
  set size(value) {
    this._size = value;
  }
  get shape() {
    return this._shape;
  }
  set shape(value) {
    this._shape = value;
  }
  get strokeColor() {
    return this._strokeColor;
  }
  set strokeColor(value) {
    this._strokeColor = value;
  }
  get isEnableScale() {
    return this._isEnableScale;
  }
  set isEnableScale(value) {
    this._isEnableScale = value;
  }
  getBBox2() {
    return this.bbox2;
  }
  updateBBox2() {
    return this.bbox2;
  }
  isInGraphical(x, y) {
    return false;
  }
}


/***/ }),

/***/ "./src/objects/models/primitive2d/D2TextModel.ts":
/*!*******************************************************!*\
  !*** ./src/objects/models/primitive2d/D2TextModel.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2TextModel: () => (/* binding */ D2TextModel)
/* harmony export */ });
/* harmony import */ var _config_ElementProfile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../config/ElementProfile */ "./src/config/ElementProfile.ts");
/* harmony import */ var _engine_common_geometry_bbox_BBox2__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../engine/common/geometry/bbox/BBox2 */ "./src/engine/common/geometry/bbox/BBox2.ts");
/* harmony import */ var _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../engine/common/utils/Color */ "./src/engine/common/utils/Color.ts");
/* harmony import */ var _engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../engine/config/PrimitiveProfile */ "./src/engine/config/PrimitiveProfile.ts");
/* harmony import */ var _D2TextModelVertex__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./D2TextModelVertex */ "./src/objects/models/primitive2d/D2TextModelVertex.ts");






class D2TextModel extends _D2TextModelVertex__WEBPACK_IMPORTED_MODULE_4__.D2TextModelVertex {
  constructor(elementItemId, layerItemId, startPoint, content, fontFamily = "auto", fontStyle = _engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_3__.ED2FontStyle.NORMAL, fontSize = 10, fontWeight = 100, strokeColor = _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_2__.Color.WHITE, alpha = 1, bgColor = null, paddingSurrounded = { top: 1, right: 1, bottom: 1, left: 1 }) {
    super(content, fontSize, fontFamily, fontStyle, fontWeight);
    this.elementItemId = elementItemId;
    this.layerItemId = layerItemId;
    this.modelType = _config_ElementProfile__WEBPACK_IMPORTED_MODULE_0__.ED2ElementType.D2Text;
    this._startPoint = startPoint;
    this._strokeColor = strokeColor;
    this._bgColor = bgColor;
    this._paddingSurrounded = paddingSurrounded;
    this.bbox2 = new _engine_common_geometry_bbox_BBox2__WEBPACK_IMPORTED_MODULE_1__.BBox2(0, 0, 0, 0);
    this.alpha = alpha;
  }
  get startPoint() {
    return this._startPoint;
  }
  set startPoint(value) {
    this._startPoint = value;
  }
  get strokeColor() {
    return this._strokeColor;
  }
  set strokeColor(value) {
    this._strokeColor = value;
  }
  get bgColor() {
    return this._bgColor;
  }
  set bgColor(value) {
    this._bgColor = value;
  }
  get paddingSurrounded() {
    return this._paddingSurrounded;
  }
  set paddingSurrounded(value) {
    this._paddingSurrounded = value;
  }
}


/***/ }),

/***/ "./src/objects/models/primitive2d/D2TextModelVertex.ts":
/*!*************************************************************!*\
  !*** ./src/objects/models/primitive2d/D2TextModelVertex.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2TextModelVertex: () => (/* binding */ D2TextModelVertex)
/* harmony export */ });
/* harmony import */ var _engine_common_geometry_bbox_BBox2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../engine/common/geometry/bbox/BBox2 */ "./src/engine/common/geometry/bbox/BBox2.ts");
/* harmony import */ var _engine_common_utils_Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../engine/common/utils/Utils */ "./src/engine/common/utils/Utils.ts");
/* harmony import */ var _engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../engine/config/PrimitiveProfile */ "./src/engine/config/PrimitiveProfile.ts");
/* harmony import */ var _elementBase_ElementModelItemBase__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./elementBase/ElementModelItemBase */ "./src/objects/models/primitive2d/elementBase/ElementModelItemBase.ts");





const TEXT_PROGRAM_POSITION_UNITSIZE = 2;
class D2TextModelVertex extends _elementBase_ElementModelItemBase__WEBPACK_IMPORTED_MODULE_3__.ElementModelItemBase {
  constructor(content, fontSize = 10, fontFamily = "auto", fontStyle = _engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_2__.ED2FontStyle.NORMAL, fontWeight = 100) {
    const refreshToken = (0,_engine_common_utils_Utils__WEBPACK_IMPORTED_MODULE_1__.getHashIden)();
    super(refreshToken, void 0);
    this.modelType = void 0;
    this._contentReady = false;
    this._hasMeta = true;
    this._refreshToken = refreshToken;
    this._vertexData = {
      indices: [],
      positions: []
    };
    this._content = content;
    this._fontSize = fontSize;
    this._fontFamily = fontFamily;
    this._fontStyle = fontStyle;
    this._fontWeight = fontWeight;
    this.bbox2 = new _engine_common_geometry_bbox_BBox2__WEBPACK_IMPORTED_MODULE_0__.BBox2(0, 0, 0, 0);
  }
  get refreshToken() {
    return this._refreshToken;
  }
  set refreshToken(value) {
    this._refreshToken = value;
  }
  get contentReady() {
    return this._contentReady;
  }
  set contentReady(value) {
    this._contentReady = value;
  }
  get hasMeta() {
    return this._hasMeta;
  }
  set hasMeta(value) {
    this._hasMeta = value;
  }
  get fontSize() {
    return this._fontSize;
  }
  set fontSize(value) {
    this._fontSize = value;
  }
  get fontFamily() {
    return this._fontFamily;
  }
  set fontFamily(value) {
    this._fontFamily = value;
  }
  get fontStyle() {
    return this._fontStyle;
  }
  set fontStyle(value) {
    this._fontStyle = value;
  }
  get fontWeight() {
    return this._fontWeight;
  }
  set fontWeight(value) {
    this._fontWeight = value;
  }
  get content() {
    return this._content;
  }
  set content(value) {
    this.contentReady = false;
    this._content = value;
    this._vertexData = {
      indices: [],
      positions: []
    };
  }
  getBBox2() {
    return this.bbox2;
  }
  updateBBox2() {
    return this.bbox2;
  }
  isInGraphical(x, y) {
    return this.bbox2.minX <= x && this.bbox2.maxX >= x && this.bbox2.minY <= y && this.bbox2.maxY >= y;
  }
  updateRefreshToken() {
    this.refreshToken = (0,_engine_common_utils_Utils__WEBPACK_IMPORTED_MODULE_1__.getHashIden)();
  }
  getVertexData() {
    return this._vertexData;
  }
  updateVertexData(vertexDataArray) {
    const allIndices = [];
    const allPositions = [];
    let idx = 0;
    let vertexsSizes = [];
    let addtionCounter = 0;
    for (let rowIndex = 0; rowIndex < vertexDataArray.length; rowIndex++) {
      for (let colIndex = 0; colIndex < vertexDataArray[rowIndex].length; colIndex++) {
        const { positions, indices } = vertexDataArray[rowIndex][colIndex];
        vertexsSizes[idx++] = positions.length / TEXT_PROGRAM_POSITION_UNITSIZE;
        for (let k = 0; k < positions.length; k++) {
          allPositions.push(positions[k]);
        }
        if (rowIndex <= 0 && colIndex <= 0) {
          for (let k = 0; k < indices.length; k++) {
            allIndices.push(indices[k]);
          }
        } else {
          addtionCounter += vertexsSizes[idx - TEXT_PROGRAM_POSITION_UNITSIZE];
          for (let k = 0; k < indices.length; k++) {
            allIndices.push(indices[k] + addtionCounter);
          }
        }
      }
    }
    this._vertexData.indices = allIndices;
    this._vertexData.positions = allPositions;
  }
}


/***/ }),

/***/ "./src/objects/models/primitive2d/elementBase/ElementModelBase.ts":
/*!************************************************************************!*\
  !*** ./src/objects/models/primitive2d/elementBase/ElementModelBase.ts ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ElementModelBase: () => (/* binding */ ElementModelBase)
/* harmony export */ });

class ElementModelBase {
  constructor() {
  }
}


/***/ }),

/***/ "./src/objects/models/primitive2d/elementBase/ElementModelItemBase.ts":
/*!****************************************************************************!*\
  !*** ./src/objects/models/primitive2d/elementBase/ElementModelItemBase.ts ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ElementModelItemBase: () => (/* binding */ ElementModelItemBase)
/* harmony export */ });
/* harmony import */ var _ElementModelBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ElementModelBase */ "./src/objects/models/primitive2d/elementBase/ElementModelBase.ts");


class ElementModelItemBase extends _ElementModelBase__WEBPACK_IMPORTED_MODULE_0__.ElementModelBase {
  constructor(elementItemId, layerItemId) {
    super();
    this._elementItemId = elementItemId;
    this._elementItemName = "";
    this._groupId = void 0;
    this._parent = null;
    this._visible = true;
    this._layerItemId = layerItemId;
    this._alpha = 1;
    this._bbox2 = null;
  }
  get elementItemName() {
    return this._elementItemName;
  }
  set elementItemName(value) {
    this._elementItemName = value;
  }
  get elementItemId() {
    return this._elementItemId;
  }
  set elementItemId(value) {
    this._elementItemId = value;
  }
  get groupId() {
    return this._groupId;
  }
  set groupId(value) {
    this._groupId = value;
  }
  get parent() {
    return this._parent;
  }
  set parent(value) {
    this._parent = value;
  }
  get visible() {
    return this._visible;
  }
  set visible(value) {
    this._visible = value;
  }
  get modelType() {
    return this._modelType;
  }
  set modelType(value) {
    this._modelType = value;
  }
  get layerItemId() {
    return this._layerItemId;
  }
  set layerItemId(value) {
    this._layerItemId = value;
  }
  get alpha() {
    return this._alpha;
  }
  set alpha(value) {
    this._alpha = value;
  }
  get bbox2() {
    return this._bbox2;
  }
  set bbox2(value) {
    this._bbox2 = value;
  }
}


/***/ }),

/***/ "./src/objects/shapes/DrawLayerShape.ts":
/*!**********************************************!*\
  !*** ./src/objects/shapes/DrawLayerShape.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DrawLayerShape: () => (/* binding */ DrawLayerShape)
/* harmony export */ });
/* harmony import */ var _DrawLayerShapeItemBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DrawLayerShapeItemBase */ "./src/objects/shapes/DrawLayerShapeItemBase.ts");


class DrawLayerShape extends _DrawLayerShapeItemBase__WEBPACK_IMPORTED_MODULE_0__.DrawLayerShapeItemBase {
  constructor(model) {
    super();
    this.model = model;
    this.refreshRender();
  }
  get layerItemName() {
    return this.model.layerItemName;
  }
  set layerItemName(value) {
    ;
    this.model.layerItemName = value;
    this.refreshRender();
  }
  get layerItemOpacity() {
    return this.model.layerItemOpacity;
  }
  set layerItemOpacity(value) {
    ;
    this.model.layerItemOpacity = value;
    this.refreshRender();
  }
  get groupId() {
    return this.model.groupId;
  }
  set groupId(value) {
    ;
    this.model.groupId = value;
    this.refreshRender();
  }
  getType() {
    return this.model.layerItemType;
  }
  getStatus() {
    return this.status;
  }
  toJSON() {
    const itemModel = this.model;
    return {
      status: this.status,
      layerItemType: itemModel.layerItemType,
      layerItemId: itemModel.layerItemId,
      layerItemName: itemModel.layerItemName,
      layerItemOpacity: itemModel.layerItemOpacity,
      groupId: itemModel.groupId
    };
  }
}


/***/ }),

/***/ "./src/objects/shapes/DrawLayerShapeBase.ts":
/*!**************************************************!*\
  !*** ./src/objects/shapes/DrawLayerShapeBase.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DrawLayerShapeBase: () => (/* binding */ DrawLayerShapeBase)
/* harmony export */ });
/* harmony import */ var _engine_config_PlaneProfile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../engine/config/PlaneProfile */ "./src/engine/config/PlaneProfile.ts");
/* harmony import */ var _engine_common_utils_Context__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../engine/common/utils/Context */ "./src/engine/common/utils/Context.ts");



class DrawLayerShapeBase extends _engine_common_utils_Context__WEBPACK_IMPORTED_MODULE_1__.Context {
  constructor() {
    super(_engine_config_PlaneProfile__WEBPACK_IMPORTED_MODULE_0__.PLANE_INIT_STATUS);
  }
}


/***/ }),

/***/ "./src/objects/shapes/DrawLayerShapeItemBase.ts":
/*!******************************************************!*\
  !*** ./src/objects/shapes/DrawLayerShapeItemBase.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DrawLayerShapeItemBase: () => (/* binding */ DrawLayerShapeItemBase)
/* harmony export */ });
/* harmony import */ var _Constant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Constant */ "./src/Constant.ts");
/* harmony import */ var _engine_config_PlaneProfile__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../engine/config/PlaneProfile */ "./src/engine/config/PlaneProfile.ts");
/* harmony import */ var _DrawLayerShapeBase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./DrawLayerShapeBase */ "./src/objects/shapes/DrawLayerShapeBase.ts");




class DrawLayerShapeItemBase extends _DrawLayerShapeBase__WEBPACK_IMPORTED_MODULE_2__.DrawLayerShapeBase {
  constructor() {
    super();
    this._model = null;
  }
  get layerItemId() {
    return this._model.layerItemId;
  }
  get model() {
    return this._model;
  }
  set model(value) {
    this._model = value;
  }
  refreshRender() {
    _Constant__WEBPACK_IMPORTED_MODULE_0__.modifyController.attachDrawLayer(this);
  }
  get visible() {
    return this.isStatusMatch(_engine_config_PlaneProfile__WEBPACK_IMPORTED_MODULE_1__.EPlaneStatus.VISIBLE);
  }
  set visible(value) {
    this.setStatusMatch(_engine_config_PlaneProfile__WEBPACK_IMPORTED_MODULE_1__.EPlaneStatus.VISIBLE, value);
    this.refreshRender();
  }
  get locked() {
    return this.isStatusMatch(_engine_config_PlaneProfile__WEBPACK_IMPORTED_MODULE_1__.EPlaneStatus.LOCKED);
  }
  set locked(value) {
    this.setStatusMatch(_engine_config_PlaneProfile__WEBPACK_IMPORTED_MODULE_1__.EPlaneStatus.LOCKED, value);
    this.refreshRender();
  }
  get killed() {
    return this.isStatusMatch(_engine_config_PlaneProfile__WEBPACK_IMPORTED_MODULE_1__.EPlaneStatus.KILLED);
  }
  set killed(value) {
    this.setStatusMatch(_engine_config_PlaneProfile__WEBPACK_IMPORTED_MODULE_1__.EPlaneStatus.KILLED, value);
    this.refreshRender();
  }
  setSelect() {
  }
  setUnSelect() {
  }
  setDelete() {
    this.killed = true;
  }
}


/***/ }),

/***/ "./src/objects/shapes/manager/DrawLayerShapeManager.ts":
/*!*************************************************************!*\
  !*** ./src/objects/shapes/manager/DrawLayerShapeManager.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DrawLayerShapeManager: () => (/* binding */ DrawLayerShapeManager)
/* harmony export */ });
/* harmony import */ var _config_DrawLayerProfile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../config/DrawLayerProfile */ "./src/config/DrawLayerProfile.ts");
/* harmony import */ var _config_CommandEnum__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../config/CommandEnum */ "./src/config/CommandEnum.ts");
/* harmony import */ var _Constant__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../Constant */ "./src/Constant.ts");
/* harmony import */ var _utils_Helper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../utils/Helper */ "./src/utils/Helper.ts");
/* harmony import */ var _manager_Manage__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../manager/Manage */ "./src/manager/Manage.ts");
/* harmony import */ var _models_manager_DrawLayerModelManager__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../models/manager/DrawLayerModelManager */ "./src/objects/models/manager/DrawLayerModelManager.ts");
/* harmony import */ var _DrawLayerShape__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../DrawLayerShape */ "./src/objects/shapes/DrawLayerShape.ts");








class DrawLayerShapeManager extends _manager_Manage__WEBPACK_IMPORTED_MODULE_4__.Manager {
  constructor() {
    super();
  }
  static getInstance() {
    if (DrawLayerShapeManager.instance === void 0) {
      DrawLayerShapeManager.instance = new DrawLayerShapeManager();
    }
    return DrawLayerShapeManager.instance;
  }
  get selectedLayersId() {
    return this._selectedLayersId;
  }
  set selectedLayersId(value) {
    this._selectedLayersId = value;
  }
  createControlShapeItem(layerItemName) {
    const layerModelItem = _models_manager_DrawLayerModelManager__WEBPACK_IMPORTED_MODULE_5__.DrawLayerModelManager.getInstance().createControlItem(layerItemName);
    const drawLayerShapeItem = new _DrawLayerShape__WEBPACK_IMPORTED_MODULE_6__.DrawLayerShape(layerModelItem);
    this.addCache(drawLayerShapeItem);
    _Constant__WEBPACK_IMPORTED_MODULE_2__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_1__.EFrameCommand.SWITCH_DRAW_TOOL, { type: _config_CommandEnum__WEBPACK_IMPORTED_MODULE_1__.EDrawToolCommand.BLANK_DROP });
    return drawLayerShapeItem;
  }
  createContentShapeItem(layerItemName) {
    const layerModelItem = _models_manager_DrawLayerModelManager__WEBPACK_IMPORTED_MODULE_5__.DrawLayerModelManager.getInstance().createContentItem(layerItemName);
    const drawLayerShapeItem = new _DrawLayerShape__WEBPACK_IMPORTED_MODULE_6__.DrawLayerShape(layerModelItem);
    this.addCache(drawLayerShapeItem);
    this.selectedLayersId = /* @__PURE__ */ new Set([drawLayerShapeItem.model.layerItemId]);
    _Constant__WEBPACK_IMPORTED_MODULE_2__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_1__.EFrameCommand.SWITCH_DRAW_TOOL, { type: _config_CommandEnum__WEBPACK_IMPORTED_MODULE_1__.EDrawToolCommand.BLANK_DROP });
    return drawLayerShapeItem;
  }
  deleteContentShapeItem(layerItemId) {
    const drawLayerShapeItem = this.items.get(layerItemId);
    if (!drawLayerShapeItem) {
      return;
    }
    const allElementShapes = _utils_Helper__WEBPACK_IMPORTED_MODULE_3__.Helper.getAllElementShapes();
    for (let i = 0; i < allElementShapes.length; i++) {
      if (allElementShapes[i].model.layerItemId !== layerItemId) {
        continue;
      }
      _utils_Helper__WEBPACK_IMPORTED_MODULE_3__.Helper.deleteElementShapeItem(allElementShapes[i]);
    }
    drawLayerShapeItem.setDelete();
    this.deleteCache(layerItemId);
  }
  getAllContentShapeItems() {
    const allItems = this.items;
    const results = [];
    allItems.forEach((item) => {
      if ([String(_config_DrawLayerProfile__WEBPACK_IMPORTED_MODULE_0__.EDrawLayerCode.MaskLayer)].indexOf(item.layerItemId) <= -1) {
        results.push(item);
      }
    });
    return results;
  }
  getContentShapeItem(layerItemId) {
    const allItems = this.items;
    let targetItem = null;
    allItems.forEach((item) => {
      if (item.layerItemId === layerItemId) {
        targetItem = item;
      }
    });
    return targetItem;
  }
  getActiveItem() {
    return this.items.get(Array.from(this.selectedLayersId)[0]);
  }
  setActiveItem(layerItemId) {
    if (!this.items.has(layerItemId)) {
      return;
    }
    this.selectedLayersId = /* @__PURE__ */ new Set([layerItemId]);
    _Constant__WEBPACK_IMPORTED_MODULE_2__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_1__.EFrameCommand.SWITCH_DRAW_TOOL, { type: _config_CommandEnum__WEBPACK_IMPORTED_MODULE_1__.EDrawToolCommand.BLANK_DROP });
  }
  addCache(drawLayerShapeItem) {
    this.items.set(drawLayerShapeItem.model.layerItemId, drawLayerShapeItem);
  }
  deleteCache(drawLayerShapeId) {
    this.items.delete(drawLayerShapeId);
    if (this.selectedLayersId.has(drawLayerShapeId)) {
      this.selectedLayersId.delete(drawLayerShapeId);
    }
  }
}


/***/ }),

/***/ "./src/objects/shapes/manager/primitive2d/D2ArcShapeManager.ts":
/*!*********************************************************************!*\
  !*** ./src/objects/shapes/manager/primitive2d/D2ArcShapeManager.ts ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2ArcShapeManager: () => (/* binding */ D2ArcShapeManager)
/* harmony export */ });
/* harmony import */ var _Constant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../Constant */ "./src/Constant.ts");
/* harmony import */ var _manager_Manage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../manager/Manage */ "./src/manager/Manage.ts");
/* harmony import */ var _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../engine/common/utils/Color */ "./src/engine/common/utils/Color.ts");
/* harmony import */ var _utils_RtreeItem__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../utils/RtreeItem */ "./src/utils/RtreeItem.ts");
/* harmony import */ var _primitive2d_D2ArcShape__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../primitive2d/D2ArcShape */ "./src/objects/shapes/primitive2d/D2ArcShape.ts");
/* harmony import */ var _models_manager_primitive2d_D2ArcModelManager__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../models/manager/primitive2d/D2ArcModelManager */ "./src/objects/models/manager/primitive2d/D2ArcModelManager.ts");







class D2ArcShapeManager extends _manager_Manage__WEBPACK_IMPORTED_MODULE_1__.Manager {
  constructor() {
    super();
    this._rteeItems = /* @__PURE__ */ new Map();
  }
  static getInstance() {
    if (D2ArcShapeManager.instance === void 0) {
      D2ArcShapeManager.instance = new D2ArcShapeManager();
    }
    return D2ArcShapeManager.instance;
  }
  createShapeItem(elementItemId, layerItemId, centerPoint, radius, startAngle, endAngle, sweep, strokeWidth = 1, strokeColor = _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_2__.Color.BLACK, isFill = false, fillColor = _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_2__.Color.createByAlpha(0)) {
    const elementModelItem = _models_manager_primitive2d_D2ArcModelManager__WEBPACK_IMPORTED_MODULE_5__.D2ArcModelManager.getInstance().createModelItem(
      elementItemId,
      layerItemId,
      centerPoint,
      radius,
      startAngle,
      endAngle,
      sweep,
      strokeWidth,
      strokeColor,
      isFill,
      fillColor
    );
    const elementShapeItem = new _primitive2d_D2ArcShape__WEBPACK_IMPORTED_MODULE_4__.D2ArcShape(elementModelItem);
    const op = this.addCache(elementShapeItem);
    return elementShapeItem;
  }
  deleteShapeItem(elementItemId) {
    const elementShapeItem = this.items.get(elementItemId);
    if (!elementShapeItem) {
      return;
    }
    const op = this.deleteCache(elementItemId);
    if (op === false) {
      return;
    }
    _models_manager_primitive2d_D2ArcModelManager__WEBPACK_IMPORTED_MODULE_5__.D2ArcModelManager.getInstance().deleteModelItem(elementItemId);
    elementShapeItem.setDelete();
  }
  addCache(elementShapeItem) {
    this.items.set(elementShapeItem.model.elementItemId, elementShapeItem);
    const rtreeItem = new _utils_RtreeItem__WEBPACK_IMPORTED_MODULE_3__.RtreeItem(elementShapeItem);
    this._rteeItems.set(elementShapeItem.model.elementItemId, rtreeItem);
    _Constant__WEBPACK_IMPORTED_MODULE_0__.rtree.insertItemData(_utils_RtreeItem__WEBPACK_IMPORTED_MODULE_3__.RtreeItem.getSimpleRectFromModelBbox2(elementShapeItem), rtreeItem);
    return true;
  }
  deleteCache(elementItemId) {
    const targetShapeItem = this.items.get(elementItemId);
    if (!targetShapeItem) {
      return false;
    }
    const rtreeItem = this._rteeItems.get(elementItemId);
    const deleteResults = _Constant__WEBPACK_IMPORTED_MODULE_0__.rtree.remove(_utils_RtreeItem__WEBPACK_IMPORTED_MODULE_3__.RtreeItem.getSimpleRectFromModelBbox2(targetShapeItem), rtreeItem);
    if (!deleteResults.length) {
      return false;
    }
    this.items.delete(elementItemId);
    this._rteeItems.delete(elementItemId);
    return true;
  }
}


/***/ }),

/***/ "./src/objects/shapes/manager/primitive2d/D2CircleShapeManager.ts":
/*!************************************************************************!*\
  !*** ./src/objects/shapes/manager/primitive2d/D2CircleShapeManager.ts ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2CircleShapeManager: () => (/* binding */ D2CircleShapeManager)
/* harmony export */ });
/* harmony import */ var _Constant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../Constant */ "./src/Constant.ts");
/* harmony import */ var _manager_Manage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../manager/Manage */ "./src/manager/Manage.ts");
/* harmony import */ var _models_manager_primitive2d_D2CircleModelManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../models/manager/primitive2d/D2CircleModelManager */ "./src/objects/models/manager/primitive2d/D2CircleModelManager.ts");
/* harmony import */ var _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../engine/common/utils/Color */ "./src/engine/common/utils/Color.ts");
/* harmony import */ var _utils_RtreeItem__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../utils/RtreeItem */ "./src/utils/RtreeItem.ts");
/* harmony import */ var _primitive2d_D2CircleShape__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../primitive2d/D2CircleShape */ "./src/objects/shapes/primitive2d/D2CircleShape.ts");







class D2CircleShapeManager extends _manager_Manage__WEBPACK_IMPORTED_MODULE_1__.Manager {
  constructor() {
    super();
    this._rteeItems = /* @__PURE__ */ new Map();
  }
  static getInstance() {
    if (D2CircleShapeManager.instance === void 0) {
      D2CircleShapeManager.instance = new D2CircleShapeManager();
    }
    return D2CircleShapeManager.instance;
  }
  createShapeItem(elementItemId, layerItemId, centerPoint, radius, strokeWidth = 1, strokeColor = _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_3__.Color.BLACK, isFill = false, fillColor = _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_3__.Color.createByAlpha(0)) {
    const elementModelItem = _models_manager_primitive2d_D2CircleModelManager__WEBPACK_IMPORTED_MODULE_2__.D2CircleModelManager.getInstance().createModelItem(
      elementItemId,
      layerItemId,
      centerPoint,
      radius,
      strokeWidth,
      strokeColor,
      isFill,
      fillColor
    );
    const elementShapeItem = new _primitive2d_D2CircleShape__WEBPACK_IMPORTED_MODULE_5__.D2CircleShape(elementModelItem);
    const op = this.addCache(elementShapeItem);
    return elementShapeItem;
  }
  deleteShapeItem(elementItemId) {
    const elementShapeItem = this.items.get(elementItemId);
    if (!elementShapeItem) {
      return;
    }
    const op = this.deleteCache(elementItemId);
    if (op === false) {
      return;
    }
    _models_manager_primitive2d_D2CircleModelManager__WEBPACK_IMPORTED_MODULE_2__.D2CircleModelManager.getInstance().deleteModelItem(elementItemId);
    elementShapeItem.setDelete();
  }
  addCache(elementShapeItem) {
    this.items.set(elementShapeItem.model.elementItemId, elementShapeItem);
    const rtreeItem = new _utils_RtreeItem__WEBPACK_IMPORTED_MODULE_4__.RtreeItem(elementShapeItem);
    this._rteeItems.set(elementShapeItem.model.elementItemId, rtreeItem);
    _Constant__WEBPACK_IMPORTED_MODULE_0__.rtree.insertItemData(_utils_RtreeItem__WEBPACK_IMPORTED_MODULE_4__.RtreeItem.getSimpleRectFromModelBbox2(elementShapeItem), rtreeItem);
    return true;
  }
  deleteCache(elementItemId) {
    const targetShapeItem = this.items.get(elementItemId);
    if (!targetShapeItem) {
      return false;
    }
    const rtreeItem = this._rteeItems.get(elementItemId);
    const deleteResults = _Constant__WEBPACK_IMPORTED_MODULE_0__.rtree.remove(_utils_RtreeItem__WEBPACK_IMPORTED_MODULE_4__.RtreeItem.getSimpleRectFromModelBbox2(targetShapeItem), rtreeItem);
    if (!deleteResults.length) {
      return false;
    }
    this.items.delete(elementItemId);
    this._rteeItems.delete(elementItemId);
    return true;
  }
}


/***/ }),

/***/ "./src/objects/shapes/manager/primitive2d/D2LineShapeManager.ts":
/*!**********************************************************************!*\
  !*** ./src/objects/shapes/manager/primitive2d/D2LineShapeManager.ts ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2LineShapeManager: () => (/* binding */ D2LineShapeManager)
/* harmony export */ });
/* harmony import */ var _models_manager_primitive2d_D2LineModelManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../models/manager/primitive2d/D2LineModelManager */ "./src/objects/models/manager/primitive2d/D2LineModelManager.ts");
/* harmony import */ var _Constant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../Constant */ "./src/Constant.ts");
/* harmony import */ var _manager_Manage__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../manager/Manage */ "./src/manager/Manage.ts");
/* harmony import */ var _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../engine/common/utils/Color */ "./src/engine/common/utils/Color.ts");
/* harmony import */ var _utils_RtreeItem__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../utils/RtreeItem */ "./src/utils/RtreeItem.ts");
/* harmony import */ var _primitive2d_D2LineShape__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../primitive2d/D2LineShape */ "./src/objects/shapes/primitive2d/D2LineShape.ts");







class D2LineShapeManager extends _manager_Manage__WEBPACK_IMPORTED_MODULE_2__.Manager {
  constructor() {
    super();
    this._rteeItems = /* @__PURE__ */ new Map();
  }
  static getInstance() {
    if (D2LineShapeManager.instance === void 0) {
      D2LineShapeManager.instance = new D2LineShapeManager();
    }
    return D2LineShapeManager.instance;
  }
  createShapeItem(elementItemId, layerItemId, startPoint, endPoint, strokeWidth = 1, strokeColor = _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_3__.Color.BLACK) {
    const elementModelItem = _models_manager_primitive2d_D2LineModelManager__WEBPACK_IMPORTED_MODULE_0__.D2LineModelManager.getInstance().createModelItem(
      elementItemId,
      layerItemId,
      startPoint,
      endPoint,
      strokeWidth,
      strokeColor
    );
    const elementShapeItem = new _primitive2d_D2LineShape__WEBPACK_IMPORTED_MODULE_5__.D2LineShape(elementModelItem);
    const op = this.addCache(elementShapeItem);
    return elementShapeItem;
  }
  deleteShapeItem(elementItemId) {
    const elementShapeItem = this.items.get(elementItemId);
    if (!elementShapeItem) {
      return;
    }
    const op = this.deleteCache(elementItemId);
    if (op === false) {
      return;
    }
    _models_manager_primitive2d_D2LineModelManager__WEBPACK_IMPORTED_MODULE_0__.D2LineModelManager.getInstance().deleteModelItem(elementItemId);
    elementShapeItem.setDelete();
  }
  addCache(elementShapeItem) {
    this.items.set(elementShapeItem.model.elementItemId, elementShapeItem);
    const rtreeItem = new _utils_RtreeItem__WEBPACK_IMPORTED_MODULE_4__.RtreeItem(elementShapeItem);
    this._rteeItems.set(elementShapeItem.model.elementItemId, rtreeItem);
    _Constant__WEBPACK_IMPORTED_MODULE_1__.rtree.insertItemData(_utils_RtreeItem__WEBPACK_IMPORTED_MODULE_4__.RtreeItem.getSimpleRectFromModelBbox2(elementShapeItem), rtreeItem);
    return true;
  }
  deleteCache(elementItemId) {
    const targetShapeItem = this.items.get(elementItemId);
    if (!targetShapeItem) {
      return false;
    }
    const rtreeItem = this._rteeItems.get(elementItemId);
    const deleteResults = _Constant__WEBPACK_IMPORTED_MODULE_1__.rtree.remove(_utils_RtreeItem__WEBPACK_IMPORTED_MODULE_4__.RtreeItem.getSimpleRectFromModelBbox2(targetShapeItem), rtreeItem);
    if (!deleteResults.length) {
      return false;
    }
    this.items.delete(elementItemId);
    this._rteeItems.delete(elementItemId);
    return true;
  }
}


/***/ }),

/***/ "./src/objects/shapes/manager/primitive2d/D2TextShapeManager.ts":
/*!**********************************************************************!*\
  !*** ./src/objects/shapes/manager/primitive2d/D2TextShapeManager.ts ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2TextShapeManager: () => (/* binding */ D2TextShapeManager)
/* harmony export */ });
/* harmony import */ var _Constant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../Constant */ "./src/Constant.ts");
/* harmony import */ var _manager_Manage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../manager/Manage */ "./src/manager/Manage.ts");
/* harmony import */ var _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../engine/common/utils/Color */ "./src/engine/common/utils/Color.ts");
/* harmony import */ var _utils_RtreeItem__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../utils/RtreeItem */ "./src/utils/RtreeItem.ts");
/* harmony import */ var _models_manager_primitive2d_D2TextModelManager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../models/manager/primitive2d/D2TextModelManager */ "./src/objects/models/manager/primitive2d/D2TextModelManager.ts");
/* harmony import */ var _primitive2d_D2TextShape__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../primitive2d/D2TextShape */ "./src/objects/shapes/primitive2d/D2TextShape.ts");
/* harmony import */ var _engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../engine/config/PrimitiveProfile */ "./src/engine/config/PrimitiveProfile.ts");
/* harmony import */ var _config_CommandEnum__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../config/CommandEnum */ "./src/config/CommandEnum.ts");









class D2TextShapeManager extends _manager_Manage__WEBPACK_IMPORTED_MODULE_1__.Manager {
  constructor() {
    super();
    this._rteeItems = /* @__PURE__ */ new Map();
  }
  static getInstance() {
    if (D2TextShapeManager.instance === void 0) {
      D2TextShapeManager.instance = new D2TextShapeManager();
    }
    return D2TextShapeManager.instance;
  }
  createShapeItem(elementItemId, layerItemId, startPoint, content, fontFamily = "auto", fontStyle = _engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_6__.ED2FontStyle.NORMAL, fontSize = 10, fontWeight = 100, strokeColor = _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_2__.Color.WHITE, alpha = 1, bgColor = null, paddingSurrounded = { top: 1, right: 1, bottom: 1, left: 1 }) {
    const elementModelItem = _models_manager_primitive2d_D2TextModelManager__WEBPACK_IMPORTED_MODULE_4__.D2TextModelManager.getInstance().createModelItem(
      elementItemId,
      layerItemId,
      startPoint,
      content,
      fontFamily,
      fontStyle,
      fontSize,
      fontWeight,
      strokeColor,
      alpha,
      bgColor,
      paddingSurrounded
    );
    elementModelItem.hasMeta = true;
    const elementShapeItem = new _primitive2d_D2TextShape__WEBPACK_IMPORTED_MODULE_5__.D2TextShape(elementModelItem);
    const op = this.addCache(elementShapeItem);
    this.refreshGraphicsPostions(elementModelItem);
    return elementShapeItem;
  }
  createShapeItemByVertexData(elementItemId, layerItemId, bbox2, vertexDataArray, startPoint, strokeColor = _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_2__.Color.WHITE, alpha = 1, bgColor = null, paddingSurrounded = { top: 1, right: 1, bottom: 1, left: 1 }) {
    const elementModelItem = _models_manager_primitive2d_D2TextModelManager__WEBPACK_IMPORTED_MODULE_4__.D2TextModelManager.getInstance().createModelItem(
      elementItemId,
      layerItemId,
      startPoint,
      void 0,
      void 0,
      void 0,
      void 0,
      void 0,
      strokeColor,
      alpha,
      bgColor,
      paddingSurrounded
    );
    elementModelItem.hasMeta = false;
    const elementShapeItem = new _primitive2d_D2TextShape__WEBPACK_IMPORTED_MODULE_5__.D2TextShape(elementModelItem);
    const op = this.addCache(elementShapeItem);
    elementShapeItem.flushVertexDataArray(vertexDataArray);
    elementShapeItem.updateBBox2(bbox2);
    elementShapeItem.setContentReadyStatus(true);
    elementShapeItem.updateRender();
    if (elementShapeItem.isContentReady()) {
      const rtreeItem = new _utils_RtreeItem__WEBPACK_IMPORTED_MODULE_3__.RtreeItem(elementShapeItem);
      this._rteeItems.set(elementShapeItem.model.elementItemId, rtreeItem);
      _Constant__WEBPACK_IMPORTED_MODULE_0__.rtree.insertItemData(_utils_RtreeItem__WEBPACK_IMPORTED_MODULE_3__.RtreeItem.getSimpleRectFromModelBbox2(elementShapeItem), rtreeItem);
    }
    _Constant__WEBPACK_IMPORTED_MODULE_0__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_7__.EFrameCommand.RENDER_FRAME, null);
    return elementShapeItem;
  }
  deleteShapeItem(elementItemId) {
    const elementShapeItem = this.items.get(elementItemId);
    if (!elementShapeItem) {
      return;
    }
    const op = this.deleteCache(elementItemId);
    if (op === false) {
      return;
    }
    _models_manager_primitive2d_D2TextModelManager__WEBPACK_IMPORTED_MODULE_4__.D2TextModelManager.getInstance().deleteModelItem(elementItemId);
    elementShapeItem.setDelete();
  }
  addCache(elementShapeItem) {
    this.items.set(elementShapeItem.model.elementItemId, elementShapeItem);
    return true;
  }
  deleteCache(elementItemId) {
    const targetShapeItem = this.items.get(elementItemId);
    if (!targetShapeItem) {
      return false;
    }
    const rtreeItem = this._rteeItems.get(elementItemId);
    if (targetShapeItem.isContentReady()) {
      const deleteResults = _Constant__WEBPACK_IMPORTED_MODULE_0__.rtree.remove(_utils_RtreeItem__WEBPACK_IMPORTED_MODULE_3__.RtreeItem.getSimpleRectFromModelBbox2(targetShapeItem), rtreeItem);
      if (!deleteResults.length) {
        return false;
      }
    }
    this.items.delete(elementItemId);
    this._rteeItems.delete(elementItemId);
    return true;
  }
  refreshGraphicsPostions(elementModelItem) {
    _Constant__WEBPACK_IMPORTED_MODULE_0__.textFontService.addVectorizeTextTask(
      elementModelItem.elementItemId,
      elementModelItem.content,
      elementModelItem.fontSize,
      elementModelItem.startPoint.toArray(),
      {
        fontFamily: elementModelItem.fontFamily,
        fontWeight: elementModelItem.fontWeight,
        fontStyle: elementModelItem.fontStyle
      },
      (elementModelItemId, bbox2, vertexDataArray) => {
        const elementShapeItem = this.items.get(elementModelItemId);
        if (!elementShapeItem) {
          return;
        }
        elementShapeItem.flushVertexDataArray(vertexDataArray);
        elementShapeItem.updateBBox2(bbox2);
        elementShapeItem.setContentReadyStatus(true);
        elementShapeItem.updateRender();
        if (elementShapeItem.isContentReady()) {
          const rtreeItem = new _utils_RtreeItem__WEBPACK_IMPORTED_MODULE_3__.RtreeItem(elementShapeItem);
          this._rteeItems.set(elementShapeItem.model.elementItemId, rtreeItem);
          _Constant__WEBPACK_IMPORTED_MODULE_0__.rtree.insertItemData(_utils_RtreeItem__WEBPACK_IMPORTED_MODULE_3__.RtreeItem.getSimpleRectFromModelBbox2(elementShapeItem), rtreeItem);
        }
        _Constant__WEBPACK_IMPORTED_MODULE_0__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_7__.EFrameCommand.RENDER_FRAME, null);
      }
    );
  }
}


/***/ }),

/***/ "./src/objects/shapes/primitive2d/D2ArcShape.ts":
/*!******************************************************!*\
  !*** ./src/objects/shapes/primitive2d/D2ArcShape.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2ArcShape: () => (/* binding */ D2ArcShape),
/* harmony export */   buildD2ArcShape: () => (/* binding */ buildD2ArcShape)
/* harmony export */ });
/* harmony import */ var _config_ElementProfile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../config/ElementProfile */ "./src/config/ElementProfile.ts");
/* harmony import */ var _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../engine/common/geometry/vector/Vector2 */ "./src/engine/common/geometry/vector/Vector2.ts");
/* harmony import */ var _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../engine/common/utils/Color */ "./src/engine/common/utils/Color.ts");
/* harmony import */ var _engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../engine/config/PrimitiveProfile */ "./src/engine/config/PrimitiveProfile.ts");
/* harmony import */ var _models_primitive2d_D2ArcModel__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../models/primitive2d/D2ArcModel */ "./src/objects/models/primitive2d/D2ArcModel.ts");
/* harmony import */ var _elementBase_ElementShapeItemBase__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./elementBase/ElementShapeItemBase */ "./src/objects/shapes/primitive2d/elementBase/ElementShapeItemBase.ts");







function buildD2ArcShape(layerItemId, centerPoint, radius, startAngle, endAngle, sweep, strokeWidth = 1, strokeColor = _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_2__.Color.BLACK, isFill = false, fillColor = _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_2__.Color.createByAlpha(0), alpha = 1, isSolid = true, lineCap = _engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_3__.ECanvas2DLineCap.ROUND, isFixedStrokeWidth = false) {
  const elementModelItem = (0,_models_primitive2d_D2ArcModel__WEBPACK_IMPORTED_MODULE_4__.buildD2ArcModel)(
    layerItemId,
    centerPoint,
    radius,
    startAngle,
    endAngle,
    sweep,
    strokeWidth,
    strokeColor,
    isFill,
    fillColor,
    alpha,
    isSolid,
    lineCap,
    isFixedStrokeWidth
  );
  const elementShapeItem = new D2ArcShape(elementModelItem);
  return elementShapeItem;
}
class D2ArcShape extends _elementBase_ElementShapeItemBase__WEBPACK_IMPORTED_MODULE_5__.ElementShapeItemBase {
  constructor(model) {
    super();
    this.model = model;
    this.refreshRender();
  }
  get elementItemName() {
    return this.model.elementItemName;
  }
  set elementItemName(value) {
    ;
    this.model.elementItemName = value;
    this.refreshRender();
  }
  get centerPoint() {
    return this.model.centerPoint;
  }
  set centerPoint(value) {
    ;
    this.model.centerPoint = value;
    this.refreshRender();
  }
  get radius() {
    return this.model.radius;
  }
  set radius(value) {
    if (value < 0) {
      value = -value;
    }
    ;
    this.model.radius = value;
    this.refreshRender();
  }
  get startAngle() {
    return this.model.startAngle;
  }
  set startAngle(value) {
    ;
    this.model.startAngle = value;
    this.refreshRender();
  }
  get endAngle() {
    return this.model.endAngle;
  }
  set endAngle(value) {
    ;
    this.model.endAngle = value;
    this.refreshRender();
  }
  get sweep() {
    return this.model.sweep;
  }
  set sweep(value) {
    ;
    this.model.sweep = value;
    this.refreshRender();
  }
  get strokeWidth() {
    return this.model.strokeWidth;
  }
  set strokeWidth(value) {
    ;
    this.model.strokeWidth = value;
    this.refreshRender();
  }
  get strokeColor() {
    return this.model.strokeColor;
  }
  set strokeColor(value) {
    ;
    this.model.strokeColor = value;
    this.refreshRender();
  }
  get fillColor() {
    return this.model.fillColor;
  }
  set fillColor(value) {
    ;
    this.model.fillColor = value;
    this.refreshRender();
  }
  get lineCap() {
    return this.model.lineCap;
  }
  set lineCap(value) {
    ;
    this.model.lineCap = value;
    this.refreshRender();
  }
  get isSolid() {
    return this.model.isSolid;
  }
  set isSolid(value) {
    ;
    this.model.isSolid = value;
    this.refreshRender();
  }
  get isFill() {
    return this.model.isFill;
  }
  set isFill(value) {
    ;
    this.model.isFill = value;
    this.refreshRender();
  }
  get segSize() {
    return this.model.segSize;
  }
  set segSize(value) {
    ;
    this.model.segSize = value;
    this.refreshRender();
  }
  get gapSize() {
    return this.model.gapSize;
  }
  set gapSize(value) {
    ;
    this.model.gapSize = value;
    this.refreshRender();
  }
  get isFixedStrokeWidth() {
    return this.model.isFixedStrokeWidth;
  }
  set isFixedStrokeWidth(value) {
    ;
    this.model.isFixedStrokeWidth = value;
    this.refreshRender();
  }
  isSelect(x, y) {
    return this.model.isInGraphical(x, y);
  }
  transform(value) {
    const centerPoint = this.centerPoint.multiplyMatrix4(value);
    this.centerPoint = centerPoint;
    this.refreshRender();
  }
  updateRadius(x, y) {
    const point = new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_1__.Vector2(x, y);
    const centerPoint = this.centerPoint;
    const distOfClickPointAndCenterPoint = point.sub(centerPoint).length;
    this.radius = distOfClickPointAndCenterPoint;
  }
  removeFill() {
    this.fillColor = _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_2__.Color.createByAlpha(0, this.fillColor);
  }
  getType() {
    return _config_ElementProfile__WEBPACK_IMPORTED_MODULE_0__.ED2ElementType.D2Arc;
  }
  getStatus() {
    return this.status;
  }
  toJSON() {
    const elementModelItem = this.model;
    return {
      type: this.getType(),
      modelType: this.model.modelType,
      status: this.status,
      startAngle: elementModelItem.startAngle,
      endAngle: elementModelItem.endAngle,
      sweep: elementModelItem.sweep,
      layerItemId: elementModelItem.layerItemId,
      elementItemId: elementModelItem.elementItemId,
      elementItemName: elementModelItem.elementItemName,
      centerPoint: elementModelItem.centerPoint.toJSON(),
      radius: elementModelItem.radius,
      strokeWidth: elementModelItem.strokeWidth,
      strokeColorData: elementModelItem.strokeColor.toRGBAJSON(),
      fillColorData: elementModelItem.fillColor.toRGBAJSON(),
      alpha: elementModelItem.alpha,
      lineCap: elementModelItem.lineCap,
      isSolid: elementModelItem.isSolid,
      isFill: elementModelItem.isFill,
      segSize: elementModelItem.segSize,
      gapSize: elementModelItem.gapSize,
      isFixedStrokeWidth: elementModelItem.isFixedStrokeWidth
    };
  }
}


/***/ }),

/***/ "./src/objects/shapes/primitive2d/D2CircleShape.ts":
/*!*********************************************************!*\
  !*** ./src/objects/shapes/primitive2d/D2CircleShape.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2CircleShape: () => (/* binding */ D2CircleShape),
/* harmony export */   buildD2CircleShape: () => (/* binding */ buildD2CircleShape)
/* harmony export */ });
/* harmony import */ var _config_ElementProfile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../config/ElementProfile */ "./src/config/ElementProfile.ts");
/* harmony import */ var _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../engine/common/geometry/vector/Vector2 */ "./src/engine/common/geometry/vector/Vector2.ts");
/* harmony import */ var _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../engine/common/utils/Color */ "./src/engine/common/utils/Color.ts");
/* harmony import */ var _engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../engine/config/PrimitiveProfile */ "./src/engine/config/PrimitiveProfile.ts");
/* harmony import */ var _models_primitive2d_D2CircleModel__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../models/primitive2d/D2CircleModel */ "./src/objects/models/primitive2d/D2CircleModel.ts");
/* harmony import */ var _elementBase_ElementShapeItemBase__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./elementBase/ElementShapeItemBase */ "./src/objects/shapes/primitive2d/elementBase/ElementShapeItemBase.ts");







function buildD2CircleShape(layerItemId, centerPoint, radius, strokeWidth = 1, strokeColor = _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_2__.Color.BLACK, isFill = false, fillColor = _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_2__.Color.createByAlpha(0), alpha = 1, isSolid = true, lineCap = _engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_3__.ECanvas2DLineCap.ROUND, isFixedStrokeWidth = false) {
  const elementModelItem = (0,_models_primitive2d_D2CircleModel__WEBPACK_IMPORTED_MODULE_4__.buildD2CircleModel)(
    layerItemId,
    centerPoint,
    radius,
    strokeWidth,
    strokeColor,
    isFill,
    fillColor,
    alpha,
    isSolid,
    lineCap,
    isFixedStrokeWidth
  );
  const elementShapeItem = new D2CircleShape(elementModelItem);
  return elementShapeItem;
}
class D2CircleShape extends _elementBase_ElementShapeItemBase__WEBPACK_IMPORTED_MODULE_5__.ElementShapeItemBase {
  constructor(model) {
    super();
    this.model = model;
    this.refreshRender();
  }
  get elementItemName() {
    return this.model.elementItemName;
  }
  set elementItemName(value) {
    ;
    this.model.elementItemName = value;
    this.refreshRender();
  }
  get centerPoint() {
    return this.model.centerPoint;
  }
  set centerPoint(value) {
    ;
    this.model.centerPoint = value;
    this.refreshRender();
  }
  get radius() {
    return this.model.radius;
  }
  set radius(value) {
    if (value < 0) {
      value = -value;
    }
    ;
    this.model.radius = value;
    this.refreshRender();
  }
  get strokeWidth() {
    return this.model.strokeWidth;
  }
  set strokeWidth(value) {
    ;
    this.model.strokeWidth = value;
    this.refreshRender();
  }
  get strokeColor() {
    return this.model.strokeColor;
  }
  set strokeColor(value) {
    ;
    this.model.strokeColor = value;
    this.refreshRender();
  }
  get fillColor() {
    return this.model.fillColor;
  }
  set fillColor(value) {
    ;
    this.model.fillColor = value;
    this.refreshRender();
  }
  get lineCap() {
    return this.model.lineCap;
  }
  set lineCap(value) {
    ;
    this.model.lineCap = value;
    this.refreshRender();
  }
  get isSolid() {
    return this.model.isSolid;
  }
  set isSolid(value) {
    ;
    this.model.isSolid = value;
    this.refreshRender();
  }
  get isFill() {
    return this.model.isFill;
  }
  set isFill(value) {
    ;
    this.model.isFill = value;
    this.refreshRender();
  }
  get segSize() {
    return this.model.segSize;
  }
  set segSize(value) {
    ;
    this.model.segSize = value;
    this.refreshRender();
  }
  get gapSize() {
    return this.model.gapSize;
  }
  set gapSize(value) {
    ;
    this.model.gapSize = value;
    this.refreshRender();
  }
  get isFixedStrokeWidth() {
    return this.model.isFixedStrokeWidth;
  }
  set isFixedStrokeWidth(value) {
    ;
    this.model.isFixedStrokeWidth = value;
    this.refreshRender();
  }
  isSelect(x, y) {
    return this.model.isInGraphical(x, y);
  }
  transform(value) {
    const centerPoint = this.centerPoint.multiplyMatrix4(value);
    this.centerPoint = centerPoint;
    this.refreshRender();
  }
  updateRadius(x, y) {
    const point = new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_1__.Vector2(x, y);
    const centerPoint = this.centerPoint;
    const distOfClickPointAndCenterPoint = point.sub(centerPoint).length;
    this.radius = distOfClickPointAndCenterPoint;
  }
  removeFill() {
    this.fillColor = _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_2__.Color.createByAlpha(0, this.fillColor);
  }
  getType() {
    return _config_ElementProfile__WEBPACK_IMPORTED_MODULE_0__.ED2ElementType.D2Circle;
  }
  getStatus() {
    return this.status;
  }
  toJSON() {
    const elementModelItem = this.model;
    return {
      type: this.getType(),
      modelType: this.model.modelType,
      status: this.status,
      layerItemId: elementModelItem.layerItemId,
      elementItemId: elementModelItem.elementItemId,
      elementItemName: elementModelItem.elementItemName,
      centerPoint: elementModelItem.centerPoint.toJSON(),
      radius: elementModelItem.radius,
      strokeWidth: elementModelItem.strokeWidth,
      strokeColorData: elementModelItem.strokeColor.toRGBAJSON(),
      fillColorData: elementModelItem.fillColor.toRGBAJSON(),
      alpha: elementModelItem.alpha,
      lineCap: elementModelItem.lineCap,
      isSolid: elementModelItem.isSolid,
      isFill: elementModelItem.isFill,
      segSize: elementModelItem.segSize,
      gapSize: elementModelItem.gapSize,
      isFixedStrokeWidth: elementModelItem.isFixedStrokeWidth
    };
  }
}


/***/ }),

/***/ "./src/objects/shapes/primitive2d/D2LineShape.ts":
/*!*******************************************************!*\
  !*** ./src/objects/shapes/primitive2d/D2LineShape.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2LineShape: () => (/* binding */ D2LineShape),
/* harmony export */   buildD2LineShape: () => (/* binding */ buildD2LineShape)
/* harmony export */ });
/* harmony import */ var _config_ElementProfile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../config/ElementProfile */ "./src/config/ElementProfile.ts");
/* harmony import */ var _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../engine/common/utils/Color */ "./src/engine/common/utils/Color.ts");
/* harmony import */ var _engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../engine/config/PrimitiveProfile */ "./src/engine/config/PrimitiveProfile.ts");
/* harmony import */ var _models_primitive2d_D2LineModel__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../models/primitive2d/D2LineModel */ "./src/objects/models/primitive2d/D2LineModel.ts");
/* harmony import */ var _elementBase_ElementShapeItemBase__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./elementBase/ElementShapeItemBase */ "./src/objects/shapes/primitive2d/elementBase/ElementShapeItemBase.ts");






function buildD2LineShape(layerItemId, startPoint, endPoint, strokeWidth = 1, strokeColor = _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_1__.Color.BLACK, alpha = 1, isSolid = true, lineCap = _engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_2__.ECanvas2DLineCap.ROUND, isFixedStrokeWidth = false) {
  const elementModelItem = (0,_models_primitive2d_D2LineModel__WEBPACK_IMPORTED_MODULE_3__.buildD2LineModel)(
    layerItemId,
    startPoint,
    endPoint,
    strokeWidth,
    strokeColor,
    alpha,
    isSolid,
    lineCap,
    isFixedStrokeWidth
  );
  const elementShapeItem = new D2LineShape(elementModelItem);
  return elementShapeItem;
}
class D2LineShape extends _elementBase_ElementShapeItemBase__WEBPACK_IMPORTED_MODULE_4__.ElementShapeItemBase {
  constructor(model) {
    super();
    this.model = model;
    this.refreshRender();
  }
  get elementItemName() {
    return this.model.elementItemName;
  }
  set elementItemName(value) {
    ;
    this.model.elementItemName = value;
    this.refreshRender();
  }
  get startPoint() {
    return this.model.startPoint;
  }
  set startPoint(value) {
    ;
    this.model.startPoint = value;
    this.refreshRender();
  }
  get endPoint() {
    return this.model.endPoint;
  }
  set endPoint(value) {
    ;
    this.model.endPoint = value;
    this.refreshRender();
  }
  get strokeWidth() {
    return this.model.strokeWidth;
  }
  set strokeWidth(value) {
    ;
    this.model.strokeWidth = value;
    this.refreshRender();
  }
  get length() {
    return this.model.length;
  }
  set length(value) {
    ;
    this.model.length = value;
    this.refreshRender();
  }
  get strokeColor() {
    return this.model.strokeColor;
  }
  set strokeColor(value) {
    ;
    this.model.strokeColor = value;
    this.refreshRender();
  }
  get lineCap() {
    return this.model.lineCap;
  }
  set lineCap(value) {
    ;
    this.model.lineCap = value;
    this.refreshRender();
  }
  get isSolid() {
    return this.model.isSolid;
  }
  set isSolid(value) {
    ;
    this.model.isSolid = value;
    this.refreshRender();
  }
  get segSize() {
    return this.model.segSize;
  }
  set segSize(value) {
    ;
    this.model.segSize = value;
    this.refreshRender();
  }
  get gapSize() {
    return this.model.gapSize;
  }
  set gapSize(value) {
    ;
    this.model.gapSize = value;
    this.refreshRender();
  }
  get isFixedStrokeWidth() {
    return this.model.isFixedStrokeWidth;
  }
  set isFixedStrokeWidth(value) {
    ;
    this.model.isFixedStrokeWidth = value;
    this.refreshRender();
  }
  get centerPoint() {
    return this.model.centerPoint;
  }
  isSelect(x, y) {
    return this.model.isInGraphical(x, y);
  }
  transform(value) {
    const startPoint = this.startPoint.multiplyMatrix4(value);
    const endPoint = this.endPoint.multiplyMatrix4(value);
    this.startPoint = startPoint;
    this.endPoint = endPoint;
    this.refreshRender();
  }
  getType() {
    return _config_ElementProfile__WEBPACK_IMPORTED_MODULE_0__.ED2ElementType.D2Line;
  }
  getStatus() {
    return this.status;
  }
  toJSON() {
    const elementModelItem = this.model;
    return {
      type: this.getType(),
      modelType: this.model.modelType,
      status: this.status,
      layerItemId: elementModelItem.layerItemId,
      elementItemId: elementModelItem.elementItemId,
      elementItemName: elementModelItem.elementItemName,
      startPoint: elementModelItem.startPoint.toJSON(),
      endPoint: elementModelItem.endPoint.toJSON(),
      strokeWidth: elementModelItem.strokeWidth,
      strokeColorData: elementModelItem.strokeColor.toRGBAJSON(),
      alpha: elementModelItem.alpha,
      lineCap: elementModelItem.lineCap,
      isSolid: elementModelItem.isSolid,
      segSize: elementModelItem.segSize,
      gapSize: elementModelItem.gapSize,
      isFixedStrokeWidth: elementModelItem.isFixedStrokeWidth
    };
  }
}


/***/ }),

/***/ "./src/objects/shapes/primitive2d/D2PointShape.ts":
/*!********************************************************!*\
  !*** ./src/objects/shapes/primitive2d/D2PointShape.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2PointShape: () => (/* binding */ D2PointShape),
/* harmony export */   buildD2PointShape: () => (/* binding */ buildD2PointShape)
/* harmony export */ });
/* harmony import */ var _config_ElementProfile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../config/ElementProfile */ "./src/config/ElementProfile.ts");
/* harmony import */ var _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../engine/common/utils/Color */ "./src/engine/common/utils/Color.ts");
/* harmony import */ var _engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../engine/config/PrimitiveProfile */ "./src/engine/config/PrimitiveProfile.ts");
/* harmony import */ var _models_primitive2d_D2PointModel__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../models/primitive2d/D2PointModel */ "./src/objects/models/primitive2d/D2PointModel.ts");
/* harmony import */ var _elementBase_ElementShapeItemBase__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./elementBase/ElementShapeItemBase */ "./src/objects/shapes/primitive2d/elementBase/ElementShapeItemBase.ts");






function buildD2PointShape(layerItemId, centerPoint, size = 1, shape = _engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_2__.ED2PointShape.DOT, strokeColor = _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_1__.Color.GREEN, alpha = 1, isEnableScale = false) {
  const elementModelItem = (0,_models_primitive2d_D2PointModel__WEBPACK_IMPORTED_MODULE_3__.buildD2PointModel)(layerItemId, centerPoint, size, shape, strokeColor, alpha, isEnableScale);
  const elementShapeItem = new D2PointShape(elementModelItem);
  return elementShapeItem;
}
class D2PointShape extends _elementBase_ElementShapeItemBase__WEBPACK_IMPORTED_MODULE_4__.ElementShapeItemBase {
  constructor(model) {
    super();
    this.model = model;
    this.refreshRender();
  }
  get elementItemName() {
    return this.model.elementItemName;
  }
  set elementItemName(value) {
    ;
    this.model.elementItemName = value;
    this.refreshRender();
  }
  get centerPoint() {
    return this.model.centerPoint;
  }
  set centerPoint(value) {
    ;
    this.model.centerPoint = value;
    this.refreshRender();
  }
  get size() {
    return this.model.size;
  }
  set size(value) {
    if (value < 0) {
      value = -value;
    }
    ;
    this.model.size = value;
    this.refreshRender();
  }
  get shape() {
    return this.model.shape;
  }
  set shape(value) {
    ;
    this.model.shape = value;
    this.refreshRender();
  }
  get strokeColor() {
    return this.model.strokeColor;
  }
  set strokeColor(value) {
    ;
    this.model.strokeColor = value;
    this.refreshRender();
  }
  get isEnableScale() {
    return this.model.isEnableScale;
  }
  set isEnableScale(value) {
    ;
    this.model.isEnableScale = value;
    this.refreshRender();
  }
  isSelect(x, y) {
    return this.model.isInGraphical(x, y);
  }
  transform(value) {
    const centerPoint = this.centerPoint.multiplyMatrix4(value);
    this.centerPoint = centerPoint;
    this.refreshRender();
  }
  getType() {
    return _config_ElementProfile__WEBPACK_IMPORTED_MODULE_0__.ED2ElementType.D2Point;
  }
  getStatus() {
    return this.status;
  }
  toJSON() {
    const elementModelItem = this.model;
    return {
      type: this.getType(),
      modelType: this.model.modelType,
      status: this.status,
      layerItemId: elementModelItem.layerItemId,
      elementItemId: elementModelItem.elementItemId,
      elementItemName: elementModelItem.elementItemName,
      centerPoint: elementModelItem.centerPoint.toJSON(),
      size: elementModelItem.size,
      shape: elementModelItem.shape,
      strokeColorData: elementModelItem.strokeColor.toRGBAJSON(),
      alpha: elementModelItem.alpha
    };
  }
}


/***/ }),

/***/ "./src/objects/shapes/primitive2d/D2TextShape.ts":
/*!*******************************************************!*\
  !*** ./src/objects/shapes/primitive2d/D2TextShape.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2TextShape: () => (/* binding */ D2TextShape)
/* harmony export */ });
/* harmony import */ var _config_ElementProfile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../config/ElementProfile */ "./src/config/ElementProfile.ts");
/* harmony import */ var _engine_common_geometry_bbox_BBox2__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../engine/common/geometry/bbox/BBox2 */ "./src/engine/common/geometry/bbox/BBox2.ts");
/* harmony import */ var _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../engine/common/geometry/vector/Vector2 */ "./src/engine/common/geometry/vector/Vector2.ts");
/* harmony import */ var _elementBase_ElementShapeItemBase__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./elementBase/ElementShapeItemBase */ "./src/objects/shapes/primitive2d/elementBase/ElementShapeItemBase.ts");





class D2TextShape extends _elementBase_ElementShapeItemBase__WEBPACK_IMPORTED_MODULE_3__.ElementShapeItemBase {
  constructor(model) {
    super();
    this.model = model;
    this.refreshRender();
  }
  get elementItemName() {
    return this.model.elementItemName;
  }
  set elementItemName(value) {
    ;
    this.model.elementItemName = value;
    this.refreshRender();
  }
  get refreshToken() {
    return this.model.refreshToken;
  }
  set refreshToken(value) {
    ;
    this.model.refreshToken = value;
    this.refreshRender();
  }
  get startPoint() {
    return this.model.startPoint;
  }
  set startPoint(value) {
    ;
    this.model.startPoint = value;
    this.refreshRender();
  }
  get content() {
    return this.model.content;
  }
  set content(value) {
    ;
    this.model.content = value;
    this.refreshRender();
  }
  get fontFamily() {
    return this.model.fontFamily;
  }
  set fontFamily(value) {
    ;
    this.model.fontFamily = value;
    this.refreshRender();
  }
  get fontStyle() {
    return this.model.fontStyle;
  }
  set fontStyle(value) {
    ;
    this.model.fontStyle = value;
    this.refreshRender();
  }
  get fontSize() {
    return this.model.fontSize;
  }
  set fontSize(value) {
    ;
    this.model.fontSize = value;
    this.refreshRender();
  }
  get fontWeight() {
    return this.model.fontWeight;
  }
  set fontWeight(value) {
    ;
    this.model.fontWeight = value;
    this.refreshRender();
  }
  get strokeColor() {
    return this.model.strokeColor;
  }
  set strokeColor(value) {
    ;
    this.model.strokeColor = value;
    this.refreshRender();
  }
  get bgColor() {
    return this.model.bgColor;
  }
  set bgColor(value) {
    ;
    this.model.bgColor = value;
    this.refreshRender();
  }
  get paddingSurrounded() {
    return this.model.paddingSurrounded;
  }
  set paddingSurrounded(value) {
    ;
    this.model.paddingSurrounded = value;
    this.refreshRender();
  }
  isSelect(x, y) {
    return this.model.isInGraphical(x, y);
  }
  updateRender() {
    ;
    this.model.updateRefreshToken();
    this.refreshRender();
  }
  updateBBox2(bbox2) {
    ;
    this.model.bbox2 = bbox2;
    this.refreshRender();
  }
  flushVertexDataArray(vertexDataArray) {
    ;
    this.model.updateVertexData(vertexDataArray);
  }
  setContentReadyStatus(status) {
    ;
    this.model.contentReady = status;
  }
  isContentReady() {
    return this.model.contentReady;
  }
  transform(value) {
    const elementModelItem = this.model;
    const allPositions = elementModelItem.getVertexData().positions;
    for (let j = 0; j < allPositions.length; j += 2) {
      const v1 = new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_2__.Vector2(allPositions[j], allPositions[j + 1]).multiplyMatrix4(value);
      allPositions[j] = v1.x;
      allPositions[j + 1] = v1.y;
    }
    const lbv0 = new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_2__.Vector2(elementModelItem.bbox2.minX, elementModelItem.bbox2.minY);
    const rtv0 = new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_2__.Vector2(elementModelItem.bbox2.maxX, elementModelItem.bbox2.maxY);
    const lbv1 = lbv0.multiplyMatrix4(value);
    const rtv1 = rtv0.multiplyMatrix4(value);
    const newBbox2 = new _engine_common_geometry_bbox_BBox2__WEBPACK_IMPORTED_MODULE_1__.BBox2(lbv1.x, lbv1.y, rtv1.x, rtv1.y);
    this.updateBBox2(newBbox2);
    this.updateRender();
  }
  getType() {
    return _config_ElementProfile__WEBPACK_IMPORTED_MODULE_0__.ED2ElementType.D2Text;
  }
  getStatus() {
    return this.status;
  }
  toJSON() {
    const elementModelItem = this.model;
    return {
      type: this.getType(),
      modelType: this.model.modelType,
      status: this.status,
      layerItemId: elementModelItem.layerItemId,
      elementItemId: elementModelItem.elementItemId,
      elementItemName: elementModelItem.elementItemName,
      startPoint: elementModelItem.startPoint.toJSON(),
      hasMeta: elementModelItem.hasMeta,
      refreshToken: elementModelItem.refreshToken,
      content: elementModelItem.content,
      fontFamily: elementModelItem.fontFamily,
      fontStyle: elementModelItem.fontStyle,
      fontSize: elementModelItem.fontSize,
      fontWeight: elementModelItem.fontWeight,
      strokeColorData: elementModelItem.strokeColor.toRGBAJSON(),
      bgColorData: elementModelItem.bgColor ? elementModelItem.bgColor.toRGBAJSON() : null,
      alpha: elementModelItem.alpha,
      paddingSurrounded: elementModelItem.paddingSurrounded,
      vertexData: elementModelItem.getVertexData(),
      bbox2: elementModelItem.bbox2
    };
  }
}


/***/ }),

/***/ "./src/objects/shapes/primitive2d/elementBase/ElementShapeBase.ts":
/*!************************************************************************!*\
  !*** ./src/objects/shapes/primitive2d/elementBase/ElementShapeBase.ts ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ElementShapeBase: () => (/* binding */ ElementShapeBase)
/* harmony export */ });
/* harmony import */ var _engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../engine/config/PrimitiveProfile */ "./src/engine/config/PrimitiveProfile.ts");
/* harmony import */ var _engine_common_utils_Context__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../engine/common/utils/Context */ "./src/engine/common/utils/Context.ts");



class ElementShapeBase extends _engine_common_utils_Context__WEBPACK_IMPORTED_MODULE_1__.Context {
  constructor() {
    super(_engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_0__.PRIMITIVE_INIT_STATUS);
  }
}


/***/ }),

/***/ "./src/objects/shapes/primitive2d/elementBase/ElementShapeItemBase.ts":
/*!****************************************************************************!*\
  !*** ./src/objects/shapes/primitive2d/elementBase/ElementShapeItemBase.ts ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ElementShapeItemBase: () => (/* binding */ ElementShapeItemBase)
/* harmony export */ });
/* harmony import */ var _Constant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../Constant */ "./src/Constant.ts");
/* harmony import */ var _engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../engine/config/PrimitiveProfile */ "./src/engine/config/PrimitiveProfile.ts");
/* harmony import */ var _ElementShapeBase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ElementShapeBase */ "./src/objects/shapes/primitive2d/elementBase/ElementShapeBase.ts");




class ElementShapeItemBase extends _ElementShapeBase__WEBPACK_IMPORTED_MODULE_2__.ElementShapeBase {
  constructor() {
    super();
    this._model = null;
  }
  get elementItemId() {
    return this._model.elementItemId;
  }
  get model() {
    return this._model;
  }
  set model(value) {
    this._model = value;
  }
  refreshRender() {
    _Constant__WEBPACK_IMPORTED_MODULE_0__.modifyController.attachElement(this);
  }
  get visible() {
    return this.isStatusMatch(_engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_1__.EPrimitiveStatus.VISIBLE);
  }
  set visible(value) {
    this.setStatusMatch(_engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_1__.EPrimitiveStatus.VISIBLE, value);
    this.refreshRender();
  }
  get hightlight() {
    return this.isStatusMatch(_engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_1__.EPrimitiveStatus.HIGHTLIGHT);
  }
  set hightlight(value) {
    this.setStatusMatch(_engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_1__.EPrimitiveStatus.HIGHTLIGHT, value);
    this.refreshRender();
  }
  get locked() {
    return this.isStatusMatch(_engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_1__.EPrimitiveStatus.LOCKED);
  }
  set locked(value) {
    this.setStatusMatch(_engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_1__.EPrimitiveStatus.LOCKED, value);
    this.refreshRender();
  }
  get killed() {
    return this.isStatusMatch(_engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_1__.EPrimitiveStatus.KILLED);
  }
  set killed(value) {
    this.setStatusMatch(_engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_1__.EPrimitiveStatus.KILLED, value);
    this.refreshRender();
  }
  setSelect() {
    this.visible = true;
    this.hightlight = true;
  }
  setUnSelect() {
    this.visible = true;
    this.hightlight = false;
  }
  setVisible() {
    this.visible = true;
    this.hightlight = true;
  }
  setUnVisible() {
    this.visible = false;
    this.hightlight = false;
  }
  setHightlight() {
    this.visible = true;
    this.hightlight = true;
  }
  setUnHightlight() {
    this.visible = true;
    this.hightlight = false;
  }
  setDelete() {
    this.killed = true;
  }
}


/***/ }),

/***/ "./src/presenter/DrawLayerPresenter.ts":
/*!*********************************************!*\
  !*** ./src/presenter/DrawLayerPresenter.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DrawLayerPresenter: () => (/* binding */ DrawLayerPresenter)
/* harmony export */ });
/* harmony import */ var _view_manager_DrawLayerViewManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../view/manager/DrawLayerViewManager */ "./src/view/manager/DrawLayerViewManager.ts");
/* harmony import */ var _Presenter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Presenter */ "./src/presenter/Presenter.ts");



class DrawLayerPresenter extends _Presenter__WEBPACK_IMPORTED_MODULE_1__.Presenter {
  constructor(scene) {
    super();
    this._scene = scene;
  }
  notify(drawLayers) {
    _view_manager_DrawLayerViewManager__WEBPACK_IMPORTED_MODULE_0__.DrawLayerViewManager.getInstance().handleModify(this._scene, drawLayers);
  }
}


/***/ }),

/***/ "./src/presenter/ElementPresenter.ts":
/*!*******************************************!*\
  !*** ./src/presenter/ElementPresenter.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ElementPresenter: () => (/* binding */ ElementPresenter)
/* harmony export */ });
/* harmony import */ var _view_manager_DrawLayerViewManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../view/manager/DrawLayerViewManager */ "./src/view/manager/DrawLayerViewManager.ts");
/* harmony import */ var _view_manager_ShapeViewManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../view/manager/ShapeViewManager */ "./src/view/manager/ShapeViewManager.ts");
/* harmony import */ var _Presenter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Presenter */ "./src/presenter/Presenter.ts");




class ElementPresenter extends _Presenter__WEBPACK_IMPORTED_MODULE_2__.Presenter {
  constructor(scene) {
    super();
    this._scene = scene;
  }
  notify(elements) {
    _view_manager_ShapeViewManager__WEBPACK_IMPORTED_MODULE_1__.ShapeViewManager.getInstance().handleModify(this._scene, elements);
    _view_manager_DrawLayerViewManager__WEBPACK_IMPORTED_MODULE_0__.DrawLayerViewManager.getInstance().handleRefreshView(this._scene);
  }
}


/***/ }),

/***/ "./src/presenter/ModifyController.ts":
/*!*******************************************!*\
  !*** ./src/presenter/ModifyController.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ModifyController: () => (/* binding */ ModifyController)
/* harmony export */ });

class ModifyController {
  constructor() {
    this._drawLayers = /* @__PURE__ */ new Set([]);
    this._elements = /* @__PURE__ */ new Set([]);
    this._drawLayerPresenter = null;
    this._elementPresenter = null;
  }
  setLayerPresenter(drawLayerPresenter) {
    this._drawLayerPresenter = drawLayerPresenter;
  }
  setElementPresenter(elementPresenter) {
    this._elementPresenter = elementPresenter;
  }
  attachDrawLayer(drawLayerItem) {
    this._drawLayers.add(drawLayerItem);
  }
  attachElement(elementItem) {
    this._elements.add(elementItem);
  }
  notify(isShouldHandleElementsPriority = false) {
    if (isShouldHandleElementsPriority) {
      if (this._elementPresenter) {
        this._elementPresenter.notify(this._elements);
      }
      this._elements.clear();
      if (this._drawLayerPresenter) {
        this._drawLayerPresenter.notify(this._drawLayers);
      }
      this._drawLayers.clear();
      return;
    }
    if (this._drawLayerPresenter) {
      this._drawLayerPresenter.notify(this._drawLayers);
    }
    this._drawLayers.clear();
    if (this._elementPresenter) {
      this._elementPresenter.notify(this._elements);
    }
    this._elements.clear();
  }
}


/***/ }),

/***/ "./src/presenter/Presenter.ts":
/*!************************************!*\
  !*** ./src/presenter/Presenter.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Presenter: () => (/* binding */ Presenter)
/* harmony export */ });

class Presenter {
}


/***/ }),

/***/ "./src/tool/Adsorption.ts":
/*!********************************!*\
  !*** ./src/tool/Adsorption.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Adsorption: () => (/* binding */ Adsorption)
/* harmony export */ });
/* harmony import */ var _Constant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Constant */ "./src/Constant.ts");
/* harmony import */ var _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../engine/common/geometry/vector/Vector2 */ "./src/engine/common/geometry/vector/Vector2.ts");



class Adsorption {
  adsorpGrid(position) {
    const snapX = 0.5;
    const snapY = 0.5;
    const resultX = (position.x - _Constant__WEBPACK_IMPORTED_MODULE_0__.environment.origin.x) / snapX;
    const resultY = (position.y - _Constant__WEBPACK_IMPORTED_MODULE_0__.environment.origin.y) / snapY;
    const dx = Math.abs(Math.floor(resultX) - resultX);
    const dy = Math.abs(Math.floor(resultY) - resultY);
    let setX = Math.floor(resultX);
    let setY = Math.floor(resultY);
    if (dx > 0.5) {
      setX = Math.ceil(resultX);
    }
    if (dy > 0.5) {
      setY = Math.ceil(resultY);
    }
    return new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_1__.Vector2(setX * snapX + _Constant__WEBPACK_IMPORTED_MODULE_0__.environment.origin.x, setY * snapY + _Constant__WEBPACK_IMPORTED_MODULE_0__.environment.origin.y);
  }
}


/***/ }),

/***/ "./src/tool/EventsLoader.ts":
/*!**********************************!*\
  !*** ./src/tool/EventsLoader.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EventsLoader: () => (/* binding */ EventsLoader),
/* harmony export */   setCanvasNativePixelPos2ScenePhysicsPos: () => (/* binding */ setCanvasNativePixelPos2ScenePhysicsPos),
/* harmony export */   setCanvasNativePixelPos2ScenePixelPos: () => (/* binding */ setCanvasNativePixelPos2ScenePixelPos),
/* harmony export */   updateMouseInputInfo: () => (/* binding */ updateMouseInputInfo)
/* harmony export */ });
/* harmony import */ var _InputInfo__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./InputInfo */ "./src/tool/InputInfo.ts");
/* harmony import */ var _ToolChain__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ToolChain */ "./src/tool/ToolChain.ts");
/* harmony import */ var _Constant__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Constant */ "./src/Constant.ts");
/* harmony import */ var _utils_SyncCanvasRect__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/SyncCanvasRect */ "./src/utils/SyncCanvasRect.ts");
/* harmony import */ var _engine_common_InsConfig__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../engine/common/InsConfig */ "./src/engine/common/InsConfig.ts");
/* harmony import */ var _engine_common_Camera__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../engine/common/Camera */ "./src/engine/common/Camera.ts");
/* harmony import */ var _engine_common_geometry_vector_Vector3__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../engine/common/geometry/vector/Vector3 */ "./src/engine/common/geometry/vector/Vector3.ts");
/* harmony import */ var _engine_common_math_Calculation__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../engine/common/math/Calculation */ "./src/engine/common/math/Calculation.ts");









function setCanvasNativePixelPos2ScenePixelPos(sourceNativePixelX, sourceNativePixelY) {
  const camera = _engine_common_Camera__WEBPACK_IMPORTED_MODULE_5__.Camera.getInstance();
  const pointA = new _engine_common_geometry_vector_Vector3__WEBPACK_IMPORTED_MODULE_6__.Vector3(sourceNativePixelX, sourceNativePixelY, 0);
  const pointB = new _engine_common_geometry_vector_Vector3__WEBPACK_IMPORTED_MODULE_6__.Vector3(camera.width / 2, -camera.height / 2, 0);
  const rcPoint = pointA.sub(pointB);
  const roPoint = rcPoint.multiplyMatrix4(camera.getLookMatrix4().multiply4(camera.getZoomMatrix4()).getInverseMatrix());
  return [roPoint.x, roPoint.y];
}
function setCanvasNativePixelPos2ScenePhysicsPos(sourceNativePixelX, sourceNativePixelY) {
  const DPI = _engine_common_InsConfig__WEBPACK_IMPORTED_MODULE_4__.InsConfig.DPI;
  const [scenePixelX, scenePixelY] = setCanvasNativePixelPos2ScenePixelPos(sourceNativePixelX, sourceNativePixelY);
  const scenePhysicsX = (0,_engine_common_math_Calculation__WEBPACK_IMPORTED_MODULE_7__.px2mm)(scenePixelX, DPI[0]);
  const scenePhysicsY = (0,_engine_common_math_Calculation__WEBPACK_IMPORTED_MODULE_7__.px2mm)(scenePixelY, DPI[0]);
  return [scenePhysicsX, scenePhysicsY];
}
function updateMouseInputInfo(inputInfo) {
  const DPI = _engine_common_InsConfig__WEBPACK_IMPORTED_MODULE_4__.InsConfig.DPI;
  const offsetOfCanvasViewPosition = setCanvasNativePixelPos2ScenePixelPos(
    inputInfo.moveSourceNativePixelX,
    -inputInfo.moveSourceNativePixelY
  );
  inputInfo.moveScenePixelX = offsetOfCanvasViewPosition[0];
  inputInfo.moveScenePixelY = offsetOfCanvasViewPosition[1];
  inputInfo.moveRealScenePhysicsX = inputInfo.moveScenePhysicsX = (0,_engine_common_math_Calculation__WEBPACK_IMPORTED_MODULE_7__.px2mm)(inputInfo.moveScenePixelX, DPI[0]);
  inputInfo.moveRealScenePhysicsY = inputInfo.moveScenePhysicsY = (0,_engine_common_math_Calculation__WEBPACK_IMPORTED_MODULE_7__.px2mm)(inputInfo.moveScenePixelY, DPI[1]);
  if (inputInfo.type === "mousedown") {
    if (inputInfo.leftMouseDown) {
      inputInfo.leftDownScenePixelX = inputInfo.moveScenePixelX;
      inputInfo.leftDownScenePixelY = inputInfo.moveScenePixelY;
      inputInfo.leftDownScenePhysicsX = inputInfo.moveScenePhysicsX;
      inputInfo.leftDownScenePhysicsY = inputInfo.moveScenePhysicsY;
      inputInfo.leftDownRealScenePhysicsX = inputInfo.moveRealScenePhysicsX;
      inputInfo.leftDownRealScenePhysicsY = inputInfo.moveRealScenePhysicsY;
    }
    if (inputInfo.middleMouseDown) {
      inputInfo.middleDownScenePixelX = inputInfo.moveScenePixelX;
      inputInfo.middleDownScenePixelY = inputInfo.moveScenePixelY;
      inputInfo.middleDownScenePhysicsX = inputInfo.moveScenePhysicsX;
      inputInfo.middleDownScenePhysicsY = inputInfo.moveScenePhysicsY;
      inputInfo.middleDownRealScenePhysicsX = inputInfo.moveRealScenePhysicsX;
      inputInfo.middleDownRealScenePhysicsY = inputInfo.moveRealScenePhysicsY;
    }
    if (inputInfo.rightMouseDown) {
      inputInfo.rightDownScenePixelX = inputInfo.moveScenePixelX;
      inputInfo.rightDownScenePixelY = inputInfo.moveScenePixelY;
      inputInfo.rightDownScenePhysicsX = inputInfo.moveScenePhysicsX;
      inputInfo.rightDownScenePhysicsY = inputInfo.moveScenePhysicsY;
      inputInfo.rightDownRealScenePhysicsX = inputInfo.moveRealScenePhysicsX;
      inputInfo.rightDownRealScenePhysicsY = inputInfo.moveRealScenePhysicsY;
    }
  }
  if (inputInfo.type === "mouseup") {
    inputInfo.leftDownScenePixelX = null;
    inputInfo.leftDownScenePixelY = null;
    inputInfo.middleDownScenePixelX = null;
    inputInfo.middleDownScenePixelY = null;
    inputInfo.rightDownScenePixelX = null;
    inputInfo.rightDownScenePixelY = null;
    inputInfo.leftDownScenePhysicsX = null;
    inputInfo.leftDownScenePhysicsY = null;
    inputInfo.middleDownScenePhysicsX = null;
    inputInfo.middleDownScenePhysicsY = null;
    inputInfo.rightDownScenePhysicsX = null;
    inputInfo.rightDownScenePhysicsY = null;
    inputInfo.leftDownRealScenePhysicsX = null;
    inputInfo.leftDownRealScenePhysicsY = null;
    inputInfo.middleDownRealScenePhysicsX = null;
    inputInfo.middleDownRealScenePhysicsY = null;
    inputInfo.rightDownRealScenePhysicsX = null;
    inputInfo.rightDownRealScenePhysicsY = null;
  }
}
const MOUSE_LEFT_BUTTONS = 1;
const MOUSE_RIGHT_BUTTONS = 2;
const MOUSE_MIDDLE_BUTTONS = 4;
class EventsLoader extends _ToolChain__WEBPACK_IMPORTED_MODULE_1__.ToolChain {
  constructor(canvasElement) {
    super();
    this._canvasElement = canvasElement;
    this._inputInfo = new _InputInfo__WEBPACK_IMPORTED_MODULE_0__.InputInfo();
  }
  init() {
    this.bindEvent();
  }
  get inputInfo() {
    return this._inputInfo;
  }
  get canvasElement() {
    return this._canvasElement;
  }
  getWindowRatio(ratio = window.devicePixelRatio) {
    return ratio > 1 ? ratio : 1;
  }
  bindEvent() {
    const canvasElement = this.canvasElement;
    window.addEventListener("resize", this.viewResizeHandler.bind(this));
    window.addEventListener("keydown", this.keyDownHandler.bind(this));
    window.addEventListener("keyup", this.keyUpHandler.bind(this));
    canvasElement.addEventListener("mousedown", this.mouseDownHandler.bind(this), false);
    canvasElement.addEventListener("mousemove", this.mouseMoveHandler.bind(this), false);
    canvasElement.addEventListener("mouseup", this.mouseUpHandler.bind(this), false);
    canvasElement.addEventListener("contextmenu", this.contextmenuHandler.bind(this), false);
    canvasElement.addEventListener("wheel", this.mouseWheelHandler.bind(this), false);
    canvasElement.addEventListener("mouseleave", this.mouseLeaveHandler.bind(this), false);
    canvasElement.addEventListener("mouseenter", this.mouseEnterHandler.bind(this), false);
  }
  viewResizeHandler() {
    (0,_utils_SyncCanvasRect__WEBPACK_IMPORTED_MODULE_3__.syncCanvasRectByWindow)(this.canvasElement);
    const canvasRect = this.canvasElement.getBoundingClientRect().toJSON();
    _Constant__WEBPACK_IMPORTED_MODULE_2__.environment.updateCanvasRectSize(canvasRect.width, canvasRect.height, canvasRect.left, canvasRect.top);
    const handlerAction = (nextTool) => {
      nextTool.viewResizeHandler(this.inputInfo, {
        distX: canvasRect.width - _Constant__WEBPACK_IMPORTED_MODULE_2__.environment.canvasWidth,
        distY: canvasRect.height - _Constant__WEBPACK_IMPORTED_MODULE_2__.environment.canvasHeight,
        canvasRect
      });
    };
    this.handler(handlerAction);
  }
  prepareSystemEventInputInfo(e) {
    e.preventDefault();
    const sourceOffsetX = e.offsetX * this.getWindowRatio();
    const sourceOffsetY = e.offsetY * this.getWindowRatio();
    this.inputInfo.mouseTimeStamp = e.timeStamp;
    this.inputInfo.type = e.type;
    this.inputInfo.moveSourceNativePixelX = sourceOffsetX - _Constant__WEBPACK_IMPORTED_MODULE_2__.environment.canvasLeft;
    this.inputInfo.moveSourceNativePixelY = sourceOffsetY - _Constant__WEBPACK_IMPORTED_MODULE_2__.environment.canvasTop;
    this.inputInfo.ctrlKey = !!e.ctrlKey;
    this.inputInfo.altKey = !!e.altKey;
    this.inputInfo.shiftKey = !!e.shiftKey;
    this.inputInfo.metaKey = !!e.metaKey;
    this.inputInfo.deltaSourceNativePixelX = e.deltaX || 0;
    this.inputInfo.deltaSourceNativePixelY = e.deltaY || 0;
    if (e.type === "mousedown") {
      if (this.inputInfo.leftMouseDown === false) {
        this.inputInfo.leftDownSourceNativePixelX = sourceOffsetX;
        this.inputInfo.leftDownSourceNativePixelY = sourceOffsetY;
      }
      if (this.inputInfo.middleMouseDown === false) {
        this.inputInfo.middleDownSourceNativePixelX = sourceOffsetX;
        this.inputInfo.middleDownSourceNativePixelY = sourceOffsetY;
      }
      if (this.inputInfo.leftMouseDown === false) {
        this.inputInfo.rightDownSourceNativePixelX = sourceOffsetX;
        this.inputInfo.rightDownSourceNativePixelY = sourceOffsetY;
      }
      this.inputInfo.leftMouseDown = (e.buttons & MOUSE_LEFT_BUTTONS) > 0;
      this.inputInfo.rightMouseDown = (e.buttons & MOUSE_RIGHT_BUTTONS) > 0;
      this.inputInfo.middleMouseDown = (e.buttons & MOUSE_MIDDLE_BUTTONS) > 0;
    }
    if (e.type === "mouseup") {
      this.inputInfo.leftMouseDown = (e.buttons & MOUSE_LEFT_BUTTONS) > 0;
      this.inputInfo.rightMouseDown = (e.buttons & MOUSE_RIGHT_BUTTONS) > 0;
      this.inputInfo.middleMouseDown = (e.buttons & MOUSE_MIDDLE_BUTTONS) > 0;
      if (this.inputInfo.leftMouseDown === false) {
        this.inputInfo.leftDownSourceNativePixelX = null;
        this.inputInfo.leftDownSourceNativePixelY = null;
      }
      if (this.inputInfo.middleMouseDown === false) {
        this.inputInfo.middleDownSourceNativePixelX = null;
        this.inputInfo.middleDownSourceNativePixelY = null;
      }
      if (this.inputInfo.leftMouseDown === false) {
        this.inputInfo.rightDownSourceNativePixelX = null;
        this.inputInfo.rightDownSourceNativePixelY = null;
      }
    }
    updateMouseInputInfo(this.inputInfo);
  }
  prepareKeyboardEventInputInfo(e) {
    e.preventDefault();
    this.inputInfo.type = e.type;
    this.inputInfo.keyCode = e.keyCode;
    this.inputInfo.ctrlKey = !!e.ctrlKey;
    this.inputInfo.altKey = !!e.altKey;
    this.inputInfo.shiftKey = !!e.shiftKey;
    this.inputInfo.metaKey = !!e.metaKey;
    updateMouseInputInfo(this.inputInfo);
  }
  keyDownHandler(e) {
    this.prepareKeyboardEventInputInfo(e);
    const handlerAction = (nextTool) => {
      nextTool.keyDownHandler(this.inputInfo);
    };
    this.handler(handlerAction);
  }
  keyUpHandler(e) {
    this.prepareKeyboardEventInputInfo(e);
    const handlerAction = (nextTool) => {
      nextTool.keyUpHandler(this.inputInfo);
    };
    this.handler(handlerAction);
  }
  mouseDownHandler(e) {
    this._canvasElement.focus();
    window.focus();
    this.prepareSystemEventInputInfo(e);
    let handlerAction;
    if (e.button === 0) {
      handlerAction = (nextTool) => {
        nextTool.mouseLeftDownHandler(this.inputInfo);
      };
    } else if (e.button === 1) {
      handlerAction = (nextTool) => {
        nextTool.mouseMiddleDownHandler(this.inputInfo);
      };
    } else if (e.button === 2) {
      handlerAction = (nextTool) => {
        nextTool.mouseRightDownHandler(this.inputInfo);
      };
    }
    handlerAction && this.handler(handlerAction);
  }
  mouseMoveHandler(e) {
    this.prepareSystemEventInputInfo(e);
    const handlerAction = (nextTool) => {
      nextTool.mouseMoveHandler(this.inputInfo);
    };
    this.handler(handlerAction);
  }
  mouseUpHandler(e) {
    this.prepareSystemEventInputInfo(e);
    let handlerAction;
    if (e.button === 0) {
      handlerAction = (nextTool) => {
        nextTool.mouseLeftUpHandler(this.inputInfo);
      };
    } else if (e.button === 1) {
      handlerAction = (nextTool) => {
        nextTool.mouseMiddleUpHandler(this.inputInfo);
      };
    } else if (e.button === 2) {
      handlerAction = (nextTool) => {
        nextTool.mouseRightUpHandler(this.inputInfo);
      };
    }
    handlerAction && this.handler(handlerAction);
  }
  mouseWheelHandler(e) {
    this.prepareSystemEventInputInfo(e);
    const handlerAction = (nextTool) => {
      nextTool.mouseWheelHandler(this.inputInfo);
    };
    this.handler(handlerAction);
  }
  mouseLeaveHandler(e) {
    this.prepareSystemEventInputInfo(e);
    const handlerAction = (nextTool) => {
      nextTool.mouseLeaveHandler(this.inputInfo);
    };
    this.handler(handlerAction);
  }
  mouseEnterHandler(e) {
    this.prepareSystemEventInputInfo(e);
    const handlerAction = (nextTool) => {
      nextTool.mouseEnterHandler(this.inputInfo);
    };
    this.handler(handlerAction);
  }
  contextmenuHandler(e) {
    e.preventDefault();
  }
}


/***/ }),

/***/ "./src/tool/GlobalIdenManager.ts":
/*!***************************************!*\
  !*** ./src/tool/GlobalIdenManager.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GlobalIdenManager: () => (/* binding */ GlobalIdenManager)
/* harmony export */ });
/* harmony import */ var _engine_common_utils_Utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine/common/utils/Utils */ "./src/engine/common/utils/Utils.ts");


class GlobalIdenManager {
  constructor() {
    this._commandIdenPrefix = `cmd_`;
    this._drawLayerIdenPrefix = `dl_`;
    this._elementIdenPrefix = `el_`;
    this._componentIdenPrefix = `co_`;
    this._eventHandlerIdenPrefix = `ev`;
  }
  getCommandIden() {
    return this._commandIdenPrefix + this.getHashIden(12);
  }
  getDrawLayerIden() {
    return this._drawLayerIdenPrefix + this.getHashIden(12);
  }
  getElementIden() {
    return this._elementIdenPrefix + this.getHashIden(12);
  }
  getComponentIden() {
    return this._componentIdenPrefix + this.getHashIden(12);
  }
  getEventHandlerIden() {
    return this._eventHandlerIdenPrefix + +this.getHashIden(12);
  }
  getHashIden(length = 18) {
    return (0,_engine_common_utils_Utils__WEBPACK_IMPORTED_MODULE_0__.getHashIden)(length);
  }
}


/***/ }),

/***/ "./src/tool/InputInfo.ts":
/*!*******************************!*\
  !*** ./src/tool/InputInfo.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   InputContext: () => (/* binding */ InputContext),
/* harmony export */   InputInfo: () => (/* binding */ InputInfo)
/* harmony export */ });

class InputContext {
  constructor() {
    this._type = "";
    this._keyCode = -1;
    this._leftDownSourceNativePixelX = 0;
    this._leftDownSourceNativePixelY = 0;
    this._middleDownSourceNativePixelX = 0;
    this._middleDownSourceNativePixelY = 0;
    this._rightDownSourceNativePixelX = 0;
    this._rightDownSourceNativePixelY = 0;
    this._moveSourceNativePixelX = 0;
    this._moveSourceNativePixelY = 0;
    this._deltaSourceNativePixelX = 0;
    this._deltaSourceNativePixelY = 0;
    this._leftDownScenePixelX = 0;
    this._leftDownScenePixelY = 0;
    this._middleDownScenePixelX = 0;
    this._middleDownScenePixelY = 0;
    this._rightDownScenePixelX = 0;
    this._rightDownScenePixelY = 0;
    this._moveScenePixelX = 0;
    this._moveScenePixelY = 0;
    this._leftDownScenePhysicsX = 0;
    this._leftDownScenePhysicsY = 0;
    this._middleDownScenePhysicsX = 0;
    this._middleDownScenePhysicsY = 0;
    this._rightDownScenePhysicsX = 0;
    this._rightDownScenePhysicsY = 0;
    this._moveScenePhysicsX = 0;
    this._moveScenePhysicsY = 0;
    this._leftDownRealScenePhysicsX = 0;
    this._leftDownRealScenePhysicsY = 0;
    this._middleDownRealScenePhysicsX = 0;
    this._middleDownRealScenePhysicsY = 0;
    this._rightDownRealScenePhysicsX = 0;
    this._rightDownRealScenePhysicsY = 0;
    this._moveRealScenePhysicsX = 0;
    this._moveRealScenePhysicsY = 0;
    this._shiftKey = false;
    this._ctrlKey = false;
    this._altKey = false;
    this._metaKey = false;
    this._rightMouseDown = false;
    this._middleMouseDown = false;
    this._leftMouseDown = false;
    this._mouseTimeStamp = 0;
  }
  get type() {
    return this._type;
  }
  set type(value) {
    this._type = value;
  }
  get keyCode() {
    return this._keyCode;
  }
  set keyCode(value) {
    this._keyCode = value;
  }
  /************************************************************/
  /************************************************************/
  get leftDownSourceNativePixelX() {
    return this._leftDownSourceNativePixelX;
  }
  set leftDownSourceNativePixelX(value) {
    this._leftDownSourceNativePixelX = value;
  }
  get leftDownSourceNativePixelY() {
    return this._leftDownSourceNativePixelY;
  }
  set leftDownSourceNativePixelY(value) {
    this._leftDownSourceNativePixelY = value;
  }
  get middleDownSourceNativePixelX() {
    return this._middleDownSourceNativePixelX;
  }
  set middleDownSourceNativePixelX(value) {
    this._middleDownSourceNativePixelX = value;
  }
  get middleDownSourceNativePixelY() {
    return this._middleDownSourceNativePixelY;
  }
  set middleDownSourceNativePixelY(value) {
    this._middleDownSourceNativePixelY = value;
  }
  get rightDownSourceNativePixelX() {
    return this._rightDownSourceNativePixelX;
  }
  set rightDownSourceNativePixelX(value) {
    this._rightDownSourceNativePixelX = value;
  }
  get rightDownSourceNativePixelY() {
    return this._rightDownSourceNativePixelY;
  }
  set rightDownSourceNativePixelY(value) {
    this._rightDownSourceNativePixelY = value;
  }
  /************************************************************/
  /************************************************************/
  get moveSourceNativePixelX() {
    return this._moveSourceNativePixelX;
  }
  set moveSourceNativePixelX(value) {
    this._moveSourceNativePixelX = value;
  }
  get moveSourceNativePixelY() {
    return this._moveSourceNativePixelY;
  }
  set moveSourceNativePixelY(value) {
    this._moveSourceNativePixelY = value;
  }
  /************************************************************/
  /************************************************************/
  get deltaSourceNativePixelX() {
    return this._deltaSourceNativePixelX;
  }
  set deltaSourceNativePixelX(value) {
    this._deltaSourceNativePixelX = value;
  }
  get deltaSourceNativePixelY() {
    return this._deltaSourceNativePixelY;
  }
  set deltaSourceNativePixelY(value) {
    this._deltaSourceNativePixelY = value;
  }
  /************************************************************/
  /************************************************************/
  get leftDownScenePixelX() {
    return this._leftDownScenePixelX;
  }
  set leftDownScenePixelX(value) {
    this._leftDownScenePixelX = value;
  }
  get leftDownScenePixelY() {
    return this._leftDownScenePixelY;
  }
  set leftDownScenePixelY(value) {
    this._leftDownScenePixelY = value;
  }
  get middleDownScenePixelX() {
    return this._middleDownScenePixelX;
  }
  set middleDownScenePixelX(value) {
    this._middleDownScenePixelX = value;
  }
  get middleDownScenePixelY() {
    return this._middleDownScenePixelY;
  }
  set middleDownScenePixelY(value) {
    this._middleDownScenePixelY = value;
  }
  get rightDownScenePixelX() {
    return this._rightDownScenePixelX;
  }
  set rightDownScenePixelX(value) {
    this._rightDownScenePixelX = value;
  }
  get rightDownScenePixelY() {
    return this._rightDownScenePixelY;
  }
  set rightDownScenePixelY(value) {
    this._rightDownScenePixelY = value;
  }
  /************************************************************/
  /************************************************************/
  get moveScenePixelX() {
    return this._moveScenePixelX;
  }
  set moveScenePixelX(value) {
    this._moveScenePixelX = value;
  }
  get moveScenePixelY() {
    return this._moveScenePixelY;
  }
  set moveScenePixelY(value) {
    this._moveScenePixelY = value;
  }
  /************************************************************/
  /************************************************************/
  get leftDownScenePhysicsX() {
    return this._leftDownScenePhysicsX;
  }
  set leftDownScenePhysicsX(value) {
    this._leftDownScenePhysicsX = value;
  }
  get leftDownScenePhysicsY() {
    return this._leftDownScenePhysicsY;
  }
  set leftDownScenePhysicsY(value) {
    this._leftDownScenePhysicsY = value;
  }
  get middleDownScenePhysicsX() {
    return this._middleDownScenePhysicsX;
  }
  set middleDownScenePhysicsX(value) {
    this._middleDownScenePhysicsX = value;
  }
  get middleDownScenePhysicsY() {
    return this._middleDownScenePhysicsY;
  }
  set middleDownScenePhysicsY(value) {
    this._middleDownScenePhysicsY = value;
  }
  get rightDownScenePhysicsX() {
    return this._rightDownScenePhysicsX;
  }
  set rightDownScenePhysicsX(value) {
    this._rightDownScenePhysicsX = value;
  }
  get rightDownScenePhysicsY() {
    return this._rightDownScenePhysicsY;
  }
  set rightDownScenePhysicsY(value) {
    this._rightDownScenePhysicsY = value;
  }
  /************************************************************/
  /************************************************************/
  get moveScenePhysicsX() {
    return this._moveScenePhysicsX;
  }
  set moveScenePhysicsX(value) {
    this._moveScenePhysicsX = value;
  }
  get moveScenePhysicsY() {
    return this._moveScenePhysicsY;
  }
  set moveScenePhysicsY(value) {
    this._moveScenePhysicsY = value;
  }
  /************************************************************/
  /************************************************************/
  get leftDownRealScenePhysicsX() {
    return this._leftDownRealScenePhysicsX;
  }
  set leftDownRealScenePhysicsX(value) {
    this._leftDownRealScenePhysicsX = value;
  }
  get leftDownRealScenePhysicsY() {
    return this._leftDownRealScenePhysicsY;
  }
  set leftDownRealScenePhysicsY(value) {
    this._leftDownRealScenePhysicsY = value;
  }
  get middleDownRealScenePhysicsX() {
    return this._middleDownRealScenePhysicsX;
  }
  set middleDownRealScenePhysicsX(value) {
    this._middleDownRealScenePhysicsX = value;
  }
  get middleDownRealScenePhysicsY() {
    return this._middleDownRealScenePhysicsY;
  }
  set middleDownRealScenePhysicsY(value) {
    this._middleDownRealScenePhysicsY = value;
  }
  get rightDownRealScenePhysicsX() {
    return this._rightDownRealScenePhysicsX;
  }
  set rightDownRealScenePhysicsX(value) {
    this._rightDownRealScenePhysicsX = value;
  }
  get rightDownRealScenePhysicsY() {
    return this._rightDownRealScenePhysicsY;
  }
  set rightDownRealScenePhysicsY(value) {
    this._rightDownRealScenePhysicsY = value;
  }
  /************************************************************/
  /************************************************************/
  get moveRealScenePhysicsX() {
    return this._moveRealScenePhysicsX;
  }
  set moveRealScenePhysicsX(value) {
    this._moveRealScenePhysicsX = value;
  }
  get moveRealScenePhysicsY() {
    return this._moveRealScenePhysicsY;
  }
  set moveRealScenePhysicsY(value) {
    this._moveRealScenePhysicsY = value;
  }
  /************************************************************/
  /************************************************************/
  get shiftKey() {
    return this._shiftKey;
  }
  set shiftKey(value) {
    this._shiftKey = value;
  }
  get ctrlKey() {
    return this._ctrlKey;
  }
  set ctrlKey(value) {
    this._ctrlKey = value;
  }
  get altKey() {
    return this._altKey;
  }
  set altKey(value) {
    this._altKey = value;
  }
  get metaKey() {
    return this._metaKey;
  }
  set metaKey(value) {
    this._metaKey = value;
  }
  /************************************************************/
  /************************************************************/
  get rightMouseDown() {
    return this._rightMouseDown;
  }
  set rightMouseDown(value) {
    this._rightMouseDown = value;
  }
  get middleMouseDown() {
    return this._middleMouseDown;
  }
  set middleMouseDown(value) {
    this._middleMouseDown = value;
  }
  get leftMouseDown() {
    return this._leftMouseDown;
  }
  set leftMouseDown(value) {
    this._leftMouseDown = value;
  }
  /************************************************************/
  /************************************************************/
  get mouseTimeStamp() {
    return this._mouseTimeStamp;
  }
  set mouseTimeStamp(value) {
    this._mouseTimeStamp = value;
  }
}
class InputInfo extends InputContext {
  constructor() {
    super();
    this._pointer = [];
  }
  get pointer() {
    return this._pointer;
  }
  set pointer(value) {
    this._pointer = value;
  }
  toJSON() {
    const data = {
      type: this.type,
      keyCode: this.keyCode,
      /* ... */
      leftDownSourceNativePixelX: this.leftDownSourceNativePixelX,
      leftDownSourceNativePixelY: this.leftDownSourceNativePixelY,
      middleDownSourceNativePixelX: this.middleDownSourceNativePixelX,
      middleDownSourceNativePixelY: this.middleDownSourceNativePixelY,
      rightDownSourceNativePixelX: this.rightDownSourceNativePixelX,
      rightDownSourceNativePixelY: this.rightDownSourceNativePixelY,
      /* ... */
      moveSourceNativePixelX: this.moveSourceNativePixelX,
      moveSourceNativePixelY: this.moveSourceNativePixelY,
      /* ... */
      deltaSourceNativePixelX: this.deltaSourceNativePixelX,
      deltaSourceNativePixelY: this.deltaSourceNativePixelY,
      /* ... */
      leftDownScenePixelX: this.leftDownScenePixelX,
      leftDownScenePixelY: this.leftDownScenePixelY,
      middleDownScenePixelX: this.middleDownScenePixelX,
      middleDownScenePixelY: this.middleDownScenePixelY,
      rightDownScenePixelX: this.rightDownScenePixelX,
      rightDownScenePixelY: this.rightDownScenePixelY,
      /* ... */
      moveScenePixelX: this.moveScenePixelX,
      moveScenePixelY: this.moveScenePixelY,
      /* ... */
      leftDownScenePhysicsX: this.leftDownScenePhysicsX,
      leftDownScenePhysicsY: this.leftDownScenePhysicsY,
      middleDownScenePhysicsX: this.middleDownScenePhysicsX,
      middleDownScenePhysicsY: this.middleDownScenePhysicsY,
      rightDownScenePhysicsX: this.rightDownScenePhysicsX,
      rightDownScenePhysicsY: this.rightDownScenePhysicsY,
      /* ... */
      moveScenePhysicsX: this.moveScenePhysicsX,
      moveScenePhysicsY: this.moveScenePhysicsY,
      /* ... */
      leftDownRealScenePhysicsX: this.leftDownRealScenePhysicsX,
      leftDownRealScenePhysicsY: this.leftDownRealScenePhysicsY,
      middleDownRealScenePhysicsX: this.middleDownRealScenePhysicsX,
      middleDownRealScenePhysicsY: this.middleDownRealScenePhysicsY,
      rightDownRealScenePhysicsX: this.rightDownRealScenePhysicsX,
      rightDownRealScenePhysicsY: this.rightDownRealScenePhysicsY,
      /* ... */
      moveRealScenePhysicsX: this.moveRealScenePhysicsX,
      moveRealScenePhysicsY: this.moveRealScenePhysicsY,
      /* ... */
      shiftKey: this.shiftKey,
      ctrlKey: this.ctrlKey,
      altKey: this.altKey,
      metaKey: this.metaKey,
      rightMouseDown: this.rightMouseDown,
      middleMouseDown: this.middleMouseDown,
      leftMouseDown: this.leftMouseDown,
      mouseTimeStamp: this.mouseTimeStamp
    };
    return data;
  }
}


/***/ }),

/***/ "./src/tool/MessageTool.ts":
/*!*********************************!*\
  !*** ./src/tool/MessageTool.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MessageTool: () => (/* binding */ MessageTool)
/* harmony export */ });
/* harmony import */ var _utils_section_messageBus_MessageBus__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils-section/messageBus/MessageBus */ "../utils-section/messageBus/MessageBus.ts");
/* harmony import */ var _utils_section_messageBus_WindowMessageBridge__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utils-section/messageBus/WindowMessageBridge */ "../utils-section/messageBus/WindowMessageBridge.ts");



class MessageTool {
  constructor() {
    this._messageBus = new _utils_section_messageBus_MessageBus__WEBPACK_IMPORTED_MODULE_0__.MessageBus();
    this._windowMessageBridge = new _utils_section_messageBus_WindowMessageBridge__WEBPACK_IMPORTED_MODULE_1__.WindowMessageBridge(this._messageBus);
  }
  get messageBus() {
    return this._messageBus;
  }
  get windowMessageBridge() {
    return this._windowMessageBridge;
  }
}


/***/ }),

/***/ "./src/tool/Tool.ts":
/*!**************************!*\
  !*** ./src/tool/Tool.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Tool: () => (/* binding */ Tool)
/* harmony export */ });
/* harmony import */ var _config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config/CommandEnum */ "./src/config/CommandEnum.ts");
/* harmony import */ var _Constant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Constant */ "./src/Constant.ts");
/* harmony import */ var _ToolChain__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ToolChain */ "./src/tool/ToolChain.ts");




class Tool extends _ToolChain__WEBPACK_IMPORTED_MODULE_2__.ToolChain {
  constructor() {
    super();
    this._drawing = false;
  }
  get drawing() {
    return this._drawing;
  }
  set drawing(value) {
    this._drawing = value;
  }
  handler(process) {
    if (this.nextTool) {
      process(this.nextTool);
    }
    _Constant__WEBPACK_IMPORTED_MODULE_1__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EFrameCommand.RENDER_FRAME, null);
  }
  viewResizeHandler(inputInfo, offset) {
  }
}


/***/ }),

/***/ "./src/tool/ToolChain.ts":
/*!*******************************!*\
  !*** ./src/tool/ToolChain.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ToolChain: () => (/* binding */ ToolChain)
/* harmony export */ });

class ToolChain {
  constructor() {
    this._nextTool = null;
  }
  get nextTool() {
    return this._nextTool;
  }
  set nextTool(value) {
    this._nextTool = value;
  }
  handler(process) {
    if (this.nextTool !== null) {
      process(this.nextTool);
    }
  }
}


/***/ }),

/***/ "./src/tool/auxiliary/BaseAuxiliary.ts":
/*!*********************************************!*\
  !*** ./src/tool/auxiliary/BaseAuxiliary.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BaseAuxiliary: () => (/* binding */ BaseAuxiliary)
/* harmony export */ });
/* harmony import */ var _engine_common_Camera__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../engine/common/Camera */ "./src/engine/common/Camera.ts");


class BaseAuxiliary {
  constructor() {
    this._camera = _engine_common_Camera__WEBPACK_IMPORTED_MODULE_0__.Camera.getInstance();
  }
  get camera() {
    return this._camera;
  }
}


/***/ }),

/***/ "./src/tool/auxiliary/primitive2d/D2CrossAssist.ts":
/*!*********************************************************!*\
  !*** ./src/tool/auxiliary/primitive2d/D2CrossAssist.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2CrossAssist: () => (/* binding */ D2CrossAssist)
/* harmony export */ });
/* harmony import */ var _config_DrawLayerProfile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../config/DrawLayerProfile */ "./src/config/DrawLayerProfile.ts");
/* harmony import */ var _Constant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../Constant */ "./src/Constant.ts");
/* harmony import */ var _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../engine/common/geometry/vector/Vector2 */ "./src/engine/common/geometry/vector/Vector2.ts");
/* harmony import */ var _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../engine/common/utils/Color */ "./src/engine/common/utils/Color.ts");
/* harmony import */ var _objects_assist_primitive2d_D2AssistLineShape__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../objects/assist/primitive2d/D2AssistLineShape */ "./src/objects/assist/primitive2d/D2AssistLineShape.ts");
/* harmony import */ var _EventsLoader__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../EventsLoader */ "./src/tool/EventsLoader.ts");
/* harmony import */ var _BaseAuxiliary__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../BaseAuxiliary */ "./src/tool/auxiliary/BaseAuxiliary.ts");








class D2CrossAssist extends _BaseAuxiliary__WEBPACK_IMPORTED_MODULE_6__.BaseAuxiliary {
  constructor() {
    super();
    this._strokeWidth = 0.5;
    this._segSize = 2;
    this._gapSize = 1.5;
    this._xLineShape = null;
    this._yLineShape = null;
  }
  hasInstance() {
    return this._xLineShape !== null && this._yLineShape !== null;
  }
  create() {
    const [leftTopScenePhysicsX, leftTopScenePhysicsY] = (0,_EventsLoader__WEBPACK_IMPORTED_MODULE_5__.setCanvasNativePixelPos2ScenePhysicsPos)(0, 0);
    const [rightBottomScenePhysicsX, rightBottomScenePhysicsY] = (0,_EventsLoader__WEBPACK_IMPORTED_MODULE_5__.setCanvasNativePixelPos2ScenePhysicsPos)(
      _Constant__WEBPACK_IMPORTED_MODULE_1__.environment.canvasWidth,
      -_Constant__WEBPACK_IMPORTED_MODULE_1__.environment.canvasHeight
    );
    this._xLineShape = (0,_objects_assist_primitive2d_D2AssistLineShape__WEBPACK_IMPORTED_MODULE_4__.buildD2AssistLineShape)(
      _config_DrawLayerProfile__WEBPACK_IMPORTED_MODULE_0__.EDrawLayerCode.MaskLayer,
      new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_2__.Vector2(leftTopScenePhysicsX, 0),
      new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_2__.Vector2(rightBottomScenePhysicsX, 0),
      this._strokeWidth,
      _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_3__.Color.LIGHT_STEE_BLUE
    );
    this._yLineShape = (0,_objects_assist_primitive2d_D2AssistLineShape__WEBPACK_IMPORTED_MODULE_4__.buildD2AssistLineShape)(
      _config_DrawLayerProfile__WEBPACK_IMPORTED_MODULE_0__.EDrawLayerCode.MaskLayer,
      new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_2__.Vector2(0, leftTopScenePhysicsY),
      new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_2__.Vector2(0, rightBottomScenePhysicsY),
      this._strokeWidth,
      _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_3__.Color.LIGHT_STEE_BLUE
    );
    this._xLineShape.segSize = this._yLineShape.segSize = this._segSize;
    this._xLineShape.gapSize = this._yLineShape.gapSize = this._gapSize;
  }
  update(inputInfo) {
    const [leftTopScenePhysicsX, leftTopScenePhysicsY] = (0,_EventsLoader__WEBPACK_IMPORTED_MODULE_5__.setCanvasNativePixelPos2ScenePhysicsPos)(0, 0);
    const [rightBottomScenePhysicsX, rightBottomScenePhysicsY] = (0,_EventsLoader__WEBPACK_IMPORTED_MODULE_5__.setCanvasNativePixelPos2ScenePhysicsPos)(
      _Constant__WEBPACK_IMPORTED_MODULE_1__.environment.canvasWidth,
      -_Constant__WEBPACK_IMPORTED_MODULE_1__.environment.canvasHeight
    );
    this._xLineShape.startPoint = new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_2__.Vector2(leftTopScenePhysicsX, inputInfo.moveScenePhysicsY);
    this._xLineShape.endPoint = new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_2__.Vector2(rightBottomScenePhysicsX, inputInfo.moveScenePhysicsY);
    this._yLineShape.startPoint = new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_2__.Vector2(inputInfo.moveScenePhysicsX, leftTopScenePhysicsY);
    this._yLineShape.endPoint = new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_2__.Vector2(inputInfo.moveScenePhysicsX, rightBottomScenePhysicsY);
  }
  destory() {
    this._xLineShape && this._xLineShape.setDelete();
    this._yLineShape && this._yLineShape.setDelete();
    this._xLineShape = null;
    this._yLineShape = null;
  }
}


/***/ }),

/***/ "./src/tool/common/DropDragTool.ts":
/*!*****************************************!*\
  !*** ./src/tool/common/DropDragTool.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DropDragTool: () => (/* binding */ DropDragTool)
/* harmony export */ });
/* harmony import */ var _Constant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Constant */ "./src/Constant.ts");
/* harmony import */ var _Tool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Tool */ "./src/tool/Tool.ts");



class DropDragTool extends _Tool__WEBPACK_IMPORTED_MODULE_1__.Tool {
  constructor() {
    super();
  }
  keyDownHandler(inputInfo) {
    _Constant__WEBPACK_IMPORTED_MODULE_0__.selectManager.keyDownHandler(inputInfo);
  }
  keyUpHandler(inputInfo) {
    _Constant__WEBPACK_IMPORTED_MODULE_0__.selectManager.keyUpHandler(inputInfo);
  }
  mouseLeftDownHandler(inputInfo) {
    _Constant__WEBPACK_IMPORTED_MODULE_0__.selectManager.mouseLeftDownHandler(inputInfo);
  }
  mouseMiddleDownHandler(inputInfo) {
    _Constant__WEBPACK_IMPORTED_MODULE_0__.selectManager.mouseMiddleDownHandler(inputInfo);
  }
  mouseRightDownHandler(inputInfo) {
    _Constant__WEBPACK_IMPORTED_MODULE_0__.selectManager.mouseRightDownHandler(inputInfo);
  }
  mouseMoveHandler(inputInfo) {
    _Constant__WEBPACK_IMPORTED_MODULE_0__.selectManager.mouseMoveHandler(inputInfo);
  }
  mouseLeftUpHandler(inputInfo) {
    _Constant__WEBPACK_IMPORTED_MODULE_0__.selectManager.mouseLeftUpHandler(inputInfo);
  }
  mouseMiddleUpHandler(inputInfo) {
  }
  mouseRightUpHandler(inputInfo) {
  }
  mouseWheelHandler(inputInfo) {
  }
  mouseLeaveHandler(inputInfo) {
  }
  mouseEnterHandler(inputInfo) {
  }
}


/***/ }),

/***/ "./src/tool/draw/BaseDrawToolManager.ts":
/*!**********************************************!*\
  !*** ./src/tool/draw/BaseDrawToolManager.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BaseDrawToolManager: () => (/* binding */ BaseDrawToolManager)
/* harmony export */ });

class BaseDrawToolManager {
  constructor() {
    this._frameToolHandler = null;
  }
  get frameToolHandler() {
    return this._frameToolHandler;
  }
  set frameToolHandler(value) {
    this._frameToolHandler = value;
  }
}


/***/ }),

/***/ "./src/tool/draw/DrawToolManager.ts":
/*!******************************************!*\
  !*** ./src/tool/draw/DrawToolManager.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DrawToolManager: () => (/* binding */ DrawToolManager)
/* harmony export */ });
/* harmony import */ var _Constant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Constant */ "./src/Constant.ts");
/* harmony import */ var _config_CommandEnum__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../config/CommandEnum */ "./src/config/CommandEnum.ts");
/* harmony import */ var _objects_shapes_manager_DrawLayerShapeManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../objects/shapes/manager/DrawLayerShapeManager */ "./src/objects/shapes/manager/DrawLayerShapeManager.ts");
/* harmony import */ var _primitive2d_drawD2LineShape_DrawD2LineShapeTool__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./primitive2d/drawD2LineShape/DrawD2LineShapeTool */ "./src/tool/draw/primitive2d/drawD2LineShape/DrawD2LineShapeTool.ts");
/* harmony import */ var _primitive2d_drawD2CircleShape_DrawD2CircleShapeTool__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./primitive2d/drawD2CircleShape/DrawD2CircleShapeTool */ "./src/tool/draw/primitive2d/drawD2CircleShape/DrawD2CircleShapeTool.ts");
/* harmony import */ var _primitive2d_drawD2ArcShape_DrawD2ArcShapeTool__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./primitive2d/drawD2ArcShape/DrawD2ArcShapeTool */ "./src/tool/draw/primitive2d/drawD2ArcShape/DrawD2ArcShapeTool.ts");
/* harmony import */ var _BaseDrawToolManager__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./BaseDrawToolManager */ "./src/tool/draw/BaseDrawToolManager.ts");








class DrawToolManager extends _BaseDrawToolManager__WEBPACK_IMPORTED_MODULE_6__.BaseDrawToolManager {
  constructor() {
    super();
    _Constant__WEBPACK_IMPORTED_MODULE_0__.messageTool.messageBus.subscribe(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_1__.EFrameCommand.SWITCH_DRAW_TOOL, this.update.bind(this));
  }
  update(data) {
    const { type, params } = data;
    switch (type) {
      case _config_CommandEnum__WEBPACK_IMPORTED_MODULE_1__.EDrawToolCommand.BLANK_DROP: {
        const selectedDrawLayerShapeItem = _objects_shapes_manager_DrawLayerShapeManager__WEBPACK_IMPORTED_MODULE_2__.DrawLayerShapeManager.getInstance().getActiveItem();
        if (!selectedDrawLayerShapeItem) {
          console.warn(`[${type}] please activate a draw-layer first.`);
          break;
        }
        console.warn(`\u8FDB\u5165\u9009\u62E9\u6A21\u5F0F.`);
        _Constant__WEBPACK_IMPORTED_MODULE_0__.selectManager.clearAllSelectItems();
        this.frameToolHandler.nextTool = _Constant__WEBPACK_IMPORTED_MODULE_0__.dropDragTool;
        this.frameToolHandler.nextTool.drawing = false;
        if (this.frameToolHandler.auxiliaryTool) {
          this.frameToolHandler.auxiliaryTool.destory();
          this.frameToolHandler.auxiliaryTool = null;
        }
        break;
      }
      case _config_CommandEnum__WEBPACK_IMPORTED_MODULE_1__.EDrawToolCommand.D2LINE: {
        const selectedDrawLayerShapeItem = _objects_shapes_manager_DrawLayerShapeManager__WEBPACK_IMPORTED_MODULE_2__.DrawLayerShapeManager.getInstance().getActiveItem();
        if (!selectedDrawLayerShapeItem) {
          console.warn(`[${type}] please activate a draw-layer first.`);
          break;
        }
        console.warn(`\u8FDB\u5165\u7ED8\u5236\u6A21\u5F0F: \u7ED8\u5236 ${type}.`);
        _Constant__WEBPACK_IMPORTED_MODULE_0__.selectManager.clearAllSelectItems();
        if (!(this.frameToolHandler.nextTool instanceof _primitive2d_drawD2LineShape_DrawD2LineShapeTool__WEBPACK_IMPORTED_MODULE_3__.DrawD2LineShapeTool)) {
          if (this.frameToolHandler.auxiliaryTool) {
            this.frameToolHandler.auxiliaryTool.destory();
          }
          const newNextTool = new _primitive2d_drawD2LineShape_DrawD2LineShapeTool__WEBPACK_IMPORTED_MODULE_3__.DrawD2LineShapeTool();
          this.frameToolHandler.auxiliaryTool = newNextTool.initAuxiliaryTools();
          this.frameToolHandler.nextTool = newNextTool;
          this.frameToolHandler.nextTool.drawing = true;
        }
        break;
      }
      case _config_CommandEnum__WEBPACK_IMPORTED_MODULE_1__.EDrawToolCommand.D2CIRCLE: {
        const selectedDrawLayerShapeItem = _objects_shapes_manager_DrawLayerShapeManager__WEBPACK_IMPORTED_MODULE_2__.DrawLayerShapeManager.getInstance().getActiveItem();
        if (!selectedDrawLayerShapeItem) {
          console.warn(`[${type}] please activate a draw-layer first.`);
          break;
        }
        console.warn(`\u8FDB\u5165\u7ED8\u5236\u6A21\u5F0F: \u7ED8\u5236 ${type}.`);
        _Constant__WEBPACK_IMPORTED_MODULE_0__.selectManager.clearAllSelectItems();
        if (!(this.frameToolHandler.nextTool instanceof _primitive2d_drawD2CircleShape_DrawD2CircleShapeTool__WEBPACK_IMPORTED_MODULE_4__.DrawD2CircleShapeTool)) {
          if (this.frameToolHandler.auxiliaryTool) {
            this.frameToolHandler.auxiliaryTool.destory();
          }
          const newNextTool = new _primitive2d_drawD2CircleShape_DrawD2CircleShapeTool__WEBPACK_IMPORTED_MODULE_4__.DrawD2CircleShapeTool();
          this.frameToolHandler.auxiliaryTool = newNextTool.initAuxiliaryTools();
          this.frameToolHandler.nextTool = newNextTool;
          this.frameToolHandler.nextTool.drawing = true;
        }
        break;
      }
      case _config_CommandEnum__WEBPACK_IMPORTED_MODULE_1__.EDrawToolCommand.D2ARC: {
        const selectedDrawLayerShapeItem = _objects_shapes_manager_DrawLayerShapeManager__WEBPACK_IMPORTED_MODULE_2__.DrawLayerShapeManager.getInstance().getActiveItem();
        if (!selectedDrawLayerShapeItem) {
          console.warn(`[${type}] please activate a draw-layer first.`);
          break;
        }
        console.warn(`\u8FDB\u5165\u7ED8\u5236\u6A21\u5F0F: \u7ED8\u5236 ${type}.`);
        _Constant__WEBPACK_IMPORTED_MODULE_0__.selectManager.clearAllSelectItems();
        if (!(this.frameToolHandler.nextTool instanceof _primitive2d_drawD2ArcShape_DrawD2ArcShapeTool__WEBPACK_IMPORTED_MODULE_5__.DrawD2ArcShapeTool)) {
          if (this.frameToolHandler.auxiliaryTool) {
            this.frameToolHandler.auxiliaryTool.destory();
          }
          const newNextTool = new _primitive2d_drawD2ArcShape_DrawD2ArcShapeTool__WEBPACK_IMPORTED_MODULE_5__.DrawD2ArcShapeTool();
          this.frameToolHandler.auxiliaryTool = newNextTool.initAuxiliaryTools();
          this.frameToolHandler.nextTool = newNextTool;
          this.frameToolHandler.nextTool.drawing = true;
        }
        break;
      }
      case _config_CommandEnum__WEBPACK_IMPORTED_MODULE_1__.EDrawToolCommand.D2TEXT: {
        const selectedDrawLayerShapeItem = _objects_shapes_manager_DrawLayerShapeManager__WEBPACK_IMPORTED_MODULE_2__.DrawLayerShapeManager.getInstance().getActiveItem();
        if (!selectedDrawLayerShapeItem) {
          console.warn(`[${type}] please activate a draw-layer first.`);
          break;
        }
        console.warn(`\u8FDB\u5165\u7ED8\u5236\u6A21\u5F0F: \u7ED8\u5236 ${type}.`);
        _Constant__WEBPACK_IMPORTED_MODULE_0__.selectManager.clearAllSelectItems();
        break;
      }
      default:
    }
    _Constant__WEBPACK_IMPORTED_MODULE_0__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_1__.EFrameCommand.RENDER_FRAME, null);
  }
}


/***/ }),

/***/ "./src/tool/draw/primitive2d/DrawD2Shape.ts":
/*!**************************************************!*\
  !*** ./src/tool/draw/primitive2d/DrawD2Shape.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DrawD2Shape: () => (/* binding */ DrawD2Shape)
/* harmony export */ });
/* harmony import */ var _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../engine/common/utils/Color */ "./src/engine/common/utils/Color.ts");


class DrawD2Shape {
  constructor() {
    this._selectedDrawLayerShapeItem = null;
    this._strokeWidth = 2;
    this._strokeColor = _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_0__.Color.GOLDEN;
    this._isSolid = true;
    this._isFill = true;
    this._fillColor = _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_0__.Color.ORIGIN;
  }
  get selectedDrawLayerShapeItem() {
    return this._selectedDrawLayerShapeItem;
  }
  set selectedDrawLayerShapeItem(value) {
    this._selectedDrawLayerShapeItem = value;
  }
  get strokeWidth() {
    return this._strokeWidth;
  }
  set strokeWidth(value) {
    this._strokeWidth = value;
  }
  get strokeColor() {
    return this._strokeColor;
  }
  set strokeColor(value) {
    this._strokeColor = value;
  }
  get isSolid() {
    return this._isSolid;
  }
  set isSolid(value) {
    this._isSolid = value;
  }
  get isFill() {
    return this._isFill;
  }
  set isFill(value) {
    this._isFill = value;
  }
  get fillColor() {
    return this._fillColor;
  }
  set fillColor(value) {
    this._fillColor = value;
  }
}


/***/ }),

/***/ "./src/tool/draw/primitive2d/DrawD2ShapeTool.ts":
/*!******************************************************!*\
  !*** ./src/tool/draw/primitive2d/DrawD2ShapeTool.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DrawD2ShapeTool: () => (/* binding */ DrawD2ShapeTool)
/* harmony export */ });
/* harmony import */ var _auxiliary_primitive2d_D2CrossAssist__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../auxiliary/primitive2d/D2CrossAssist */ "./src/tool/auxiliary/primitive2d/D2CrossAssist.ts");
/* harmony import */ var _Tool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Tool */ "./src/tool/Tool.ts");



class DrawD2ShapeTool extends _Tool__WEBPACK_IMPORTED_MODULE_1__.Tool {
  constructor() {
    super();
    this._isDrawing = false;
    this._hasMoveWhenAfterRightDown = false;
  }
  get hasMoveWhenAfterRightDown() {
    return this._hasMoveWhenAfterRightDown;
  }
  set hasMoveWhenAfterRightDown(value) {
    this._hasMoveWhenAfterRightDown = value;
  }
  get isDrawing() {
    return this._isDrawing;
  }
  set isDrawing(value) {
    this._isDrawing = value;
  }
  get d2CrossAssist() {
    return this._d2CrossAssist;
  }
  set d2CrossAssist(value) {
    this._d2CrossAssist = value;
  }
  initAuxiliaryTools() {
    this.d2CrossAssist = new _auxiliary_primitive2d_D2CrossAssist__WEBPACK_IMPORTED_MODULE_0__.D2CrossAssist();
    this.d2CrossAssist.create();
    return this.d2CrossAssist;
  }
}


/***/ }),

/***/ "./src/tool/draw/primitive2d/drawD2ArcShape/DrawD2ArcShape.ts":
/*!********************************************************************!*\
  !*** ./src/tool/draw/primitive2d/drawD2ArcShape/DrawD2ArcShape.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DrawD2ArcShape: () => (/* binding */ DrawD2ArcShape)
/* harmony export */ });
/* harmony import */ var _Constant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../Constant */ "./src/Constant.ts");
/* harmony import */ var _engine_common_geometry_shapes_D2ArcTransitions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../engine/common/geometry/shapes/D2ArcTransitions */ "./src/engine/common/geometry/shapes/D2ArcTransitions.ts");
/* harmony import */ var _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../engine/common/geometry/vector/Vector2 */ "./src/engine/common/geometry/vector/Vector2.ts");
/* harmony import */ var _objects_shapes_manager_DrawLayerShapeManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../objects/shapes/manager/DrawLayerShapeManager */ "./src/objects/shapes/manager/DrawLayerShapeManager.ts");
/* harmony import */ var _objects_shapes_manager_primitive2d_D2ArcShapeManager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../objects/shapes/manager/primitive2d/D2ArcShapeManager */ "./src/objects/shapes/manager/primitive2d/D2ArcShapeManager.ts");
/* harmony import */ var _objects_shapes_primitive2d_D2ArcShape__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../objects/shapes/primitive2d/D2ArcShape */ "./src/objects/shapes/primitive2d/D2ArcShape.ts");
/* harmony import */ var _objects_shapes_primitive2d_D2LineShape__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../objects/shapes/primitive2d/D2LineShape */ "./src/objects/shapes/primitive2d/D2LineShape.ts");
/* harmony import */ var _DrawD2Shape__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../DrawD2Shape */ "./src/tool/draw/primitive2d/DrawD2Shape.ts");









class DrawD2ArcShape extends _DrawD2Shape__WEBPACK_IMPORTED_MODULE_7__.DrawD2Shape {
  constructor() {
    super();
    this._shapeInstances = [];
    this._firstInitD2Lines = [];
    this._pointsGroup = [];
  }
  get shapeInstances() {
    return this._shapeInstances;
  }
  set shapeInstances(value) {
    this._shapeInstances = value;
  }
  get firstInitD2Lines() {
    return this._firstInitD2Lines;
  }
  set firstInitD2Lines(value) {
    this._firstInitD2Lines = value;
  }
  completeDraw() {
    const drawedItems = [];
    if (this.shapeInstances.length) {
      for (let i = 0; i < this.shapeInstances.length; i++) {
        const targetShapeItem = this.shapeInstances[i];
        const elementItemId = _Constant__WEBPACK_IMPORTED_MODULE_0__.globalIdenManager.getElementIden();
        const arcResult = _engine_common_geometry_shapes_D2ArcTransitions__WEBPACK_IMPORTED_MODULE_1__.D2ArcTransitions.calculateD2ArcProfileByThreePoint(
          this._pointsGroup[i][0],
          this._pointsGroup[i][1],
          this._pointsGroup[i][2]
        );
        const newTargetShapeItem = _objects_shapes_manager_primitive2d_D2ArcShapeManager__WEBPACK_IMPORTED_MODULE_4__.D2ArcShapeManager.getInstance().createShapeItem(
          elementItemId,
          this.selectedDrawLayerShapeItem.model.layerItemId,
          arcResult.centerPoint,
          arcResult.radius,
          arcResult.startAngle,
          arcResult.endAngle,
          arcResult.sweep,
          targetShapeItem.strokeWidth,
          targetShapeItem.strokeColor,
          targetShapeItem.isFill,
          targetShapeItem.fillColor
        );
        drawedItems.push(newTargetShapeItem);
        targetShapeItem.setDelete();
      }
    }
    this.clearFirstInitD2LineShapes();
    this.clearStartAndEndPoints();
    this.destoryShapes();
    return drawedItems;
  }
  cancelDraw() {
    this.clearFirstInitD2LineShapes();
    this.clearStartAndEndPoints();
    this.destoryShapes();
  }
  clearStartAndEndPoints() {
    this._pointsGroup.length = 0;
  }
  clearFirstInitD2LineShapes() {
    for (let i = 0; i < this._firstInitD2Lines.length; i++) {
      this._firstInitD2Lines[i].setDelete();
    }
    this._firstInitD2Lines.length = 0;
  }
  updateFirstInitD2LineShapes(inputInfo) {
    for (let i = 0; i < this._firstInitD2Lines.length; i++) {
      this._firstInitD2Lines[i].endPoint = new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_2__.Vector2(inputInfo.moveScenePhysicsX, inputInfo.moveScenePhysicsY);
      this._pointsGroup[i][1] = new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_2__.Vector2(inputInfo.moveScenePhysicsX, inputInfo.moveScenePhysicsY);
    }
  }
  createFirstInitD2LineShapes(x, y) {
    this.selectedDrawLayerShapeItem = _objects_shapes_manager_DrawLayerShapeManager__WEBPACK_IMPORTED_MODULE_3__.DrawLayerShapeManager.getInstance().getActiveItem();
    if (!this.selectedDrawLayerShapeItem) {
      console.warn(`[draw arc] please activate a draw-layer first.`);
      return;
    }
    this._firstInitD2Lines.push(
      (0,_objects_shapes_primitive2d_D2LineShape__WEBPACK_IMPORTED_MODULE_6__.buildD2LineShape)(
        this.selectedDrawLayerShapeItem.model.layerItemId,
        new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_2__.Vector2(x, y),
        new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_2__.Vector2(x, y),
        this.strokeWidth,
        this.strokeColor
      )
    );
    this._pointsGroup.push([new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_2__.Vector2(x, y), new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_2__.Vector2(x, y), null]);
  }
  updateShapes(inputInfo) {
    for (let i = 0; i < this.shapeInstances.length; i++) {
      this._pointsGroup[i][2] = new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_2__.Vector2(inputInfo.moveScenePhysicsX, inputInfo.moveScenePhysicsY);
      const arcResult = _engine_common_geometry_shapes_D2ArcTransitions__WEBPACK_IMPORTED_MODULE_1__.D2ArcTransitions.calculateD2ArcProfileByThreePoint(
        this._pointsGroup[i][0],
        this._pointsGroup[i][1],
        this._pointsGroup[i][2]
      );
      this.shapeInstances[i].startAngle = arcResult.startAngle;
      this.shapeInstances[i].endAngle = arcResult.endAngle;
      this.shapeInstances[i].radius = arcResult.radius;
      this.shapeInstances[i].sweep = arcResult.sweep;
      this.shapeInstances[i].centerPoint = arcResult.centerPoint;
    }
  }
  createShapes(x, y) {
    this.selectedDrawLayerShapeItem = _objects_shapes_manager_DrawLayerShapeManager__WEBPACK_IMPORTED_MODULE_3__.DrawLayerShapeManager.getInstance().getActiveItem();
    if (!this.selectedDrawLayerShapeItem) {
      console.warn(`[draw arc] please activate a draw-layer first.`);
      return;
    }
    for (let i = 0; i < this._firstInitD2Lines.length; i++) {
      this._pointsGroup[i][2] = new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_2__.Vector2(x + 5e-3, y + 5e-3);
      const arcResult = _engine_common_geometry_shapes_D2ArcTransitions__WEBPACK_IMPORTED_MODULE_1__.D2ArcTransitions.calculateD2ArcProfileByThreePoint(
        this._pointsGroup[i][0],
        this._pointsGroup[i][1],
        this._pointsGroup[i][2]
      );
      this.shapeInstances.push(
        (0,_objects_shapes_primitive2d_D2ArcShape__WEBPACK_IMPORTED_MODULE_5__.buildD2ArcShape)(
          this.selectedDrawLayerShapeItem.model.layerItemId,
          arcResult.centerPoint,
          arcResult.radius,
          arcResult.startAngle,
          arcResult.endAngle,
          arcResult.sweep,
          this.strokeWidth,
          this.strokeColor,
          this.isFill,
          this.fillColor
        )
      );
    }
  }
  destoryShapes() {
    for (let i = 0; i < this.shapeInstances.length; i++) {
      this.shapeInstances[i].setDelete();
    }
    this.shapeInstances.length = 0;
  }
}


/***/ }),

/***/ "./src/tool/draw/primitive2d/drawD2ArcShape/DrawD2ArcShapeTool.ts":
/*!************************************************************************!*\
  !*** ./src/tool/draw/primitive2d/drawD2ArcShape/DrawD2ArcShapeTool.ts ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DrawD2ArcShapeTool: () => (/* binding */ DrawD2ArcShapeTool)
/* harmony export */ });
/* harmony import */ var _config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../config/CommandEnum */ "./src/config/CommandEnum.ts");
/* harmony import */ var _config_OperationProfile__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../config/OperationProfile */ "./src/config/OperationProfile.ts");
/* harmony import */ var _Constant__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../Constant */ "./src/Constant.ts");
/* harmony import */ var _utils_CreateOperationProfile__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../utils/CreateOperationProfile */ "./src/utils/CreateOperationProfile.ts");
/* harmony import */ var _history_command_Config__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../history/command/Config */ "./src/tool/history/command/Config.ts");
/* harmony import */ var _DrawD2ShapeTool__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../DrawD2ShapeTool */ "./src/tool/draw/primitive2d/DrawD2ShapeTool.ts");
/* harmony import */ var _DrawD2ArcShape__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./DrawD2ArcShape */ "./src/tool/draw/primitive2d/drawD2ArcShape/DrawD2ArcShape.ts");








class DrawD2ArcShapeTool extends _DrawD2ShapeTool__WEBPACK_IMPORTED_MODULE_5__.DrawD2ShapeTool {
  constructor() {
    super();
    this._drawShapeHandler = new _DrawD2ArcShape__WEBPACK_IMPORTED_MODULE_6__.DrawD2ArcShape();
  }
  keyDownHandler(inputInfo) {
    const handlerAction = (nextTool) => {
      nextTool.keyDownHandler(inputInfo);
    };
    this.handler(handlerAction);
  }
  keyUpHandler(inputInfo) {
    const handlerAction = (nextTool) => {
      nextTool.keyUpHandler(inputInfo);
    };
    this.handler(handlerAction);
  }
  mouseLeftDownHandler(inputInfo) {
    const handlerAction = (nextTool) => {
      nextTool.mouseLeftDownHandler(inputInfo);
    };
    this.handler(handlerAction);
  }
  mouseMiddleDownHandler(inputInfo) {
    const handlerAction = (nextTool) => {
      nextTool.mouseMiddleDownHandler(inputInfo);
    };
    this.handler(handlerAction);
  }
  mouseRightDownHandler(inputInfo) {
    const handlerAction = (nextTool) => {
      nextTool.mouseRightDownHandler(inputInfo);
    };
    this.handler(handlerAction);
  }
  mouseMoveHandler(inputInfo) {
    if (this.d2CrossAssist) {
      this.d2CrossAssist.update(inputInfo);
    }
    if (inputInfo.rightMouseDown) {
      this.hasMoveWhenAfterRightDown = true;
    }
    if (this.isDrawing) {
      if (this._drawShapeHandler.firstInitD2Lines.length) {
        this._drawShapeHandler.updateFirstInitD2LineShapes(inputInfo);
      } else {
        this._drawShapeHandler.updateShapes(inputInfo);
      }
    }
    const handlerAction = (nextTool) => {
      nextTool.mouseMoveHandler(inputInfo);
    };
    this.handler(handlerAction);
  }
  mouseLeftUpHandler(inputInfo) {
    if (!this.isDrawing) {
      this.isDrawing = true;
      this._drawShapeHandler.createFirstInitD2LineShapes(inputInfo.moveScenePhysicsX, inputInfo.moveScenePhysicsY);
    } else {
      if (this._drawShapeHandler.firstInitD2Lines.length) {
        this._drawShapeHandler.createShapes(inputInfo.moveScenePhysicsX, inputInfo.moveScenePhysicsY);
        this._drawShapeHandler.clearFirstInitD2LineShapes();
        return;
      }
      this.isDrawing = false;
      const items = this._drawShapeHandler.completeDraw();
      for (let i = 0; i < items.length; i++) {
        _Constant__WEBPACK_IMPORTED_MODULE_2__.operationController.addHistroyRecord(items[i].elementItemId, _history_command_Config__WEBPACK_IMPORTED_MODULE_4__.ECommandAction.ADD);
      }
      if (_Constant__WEBPACK_IMPORTED_MODULE_2__.systemConfig.enbaleOperationMessagesNotify) {
        _Constant__WEBPACK_IMPORTED_MODULE_2__.messageTool.messageBus.publish(
          _config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EOutEventCommand.OPERATION_CHANGED,
          (0,_utils_CreateOperationProfile__WEBPACK_IMPORTED_MODULE_3__.createOperationProfileChangedData)(_config_OperationProfile__WEBPACK_IMPORTED_MODULE_1__.EOperationAction.CREATE_ELEMENT, {})
        );
      }
    }
    const handlerAction = (nextTool) => {
      nextTool.mouseLeftUpHandler(inputInfo);
    };
    this.handler(handlerAction);
  }
  mouseMiddleUpHandler(inputInfo) {
    const handlerAction = (nextTool) => {
      nextTool.mouseMiddleUpHandler(inputInfo);
    };
    this.handler(handlerAction);
  }
  mouseRightUpHandler(inputInfo) {
    if (!this.hasMoveWhenAfterRightDown) {
      this.isDrawing = false;
      this._drawShapeHandler.cancelDraw();
      _Constant__WEBPACK_IMPORTED_MODULE_2__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EFrameCommand.SWITCH_DRAW_TOOL, { type: _config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EDrawToolCommand.BLANK_DROP });
    }
    this.hasMoveWhenAfterRightDown = false;
    const handlerAction = (nextTool) => {
      nextTool.mouseRightUpHandler(inputInfo);
    };
    this.handler(handlerAction);
  }
  mouseWheelHandler(inputInfo) {
    if (this.d2CrossAssist) {
      this.d2CrossAssist.update(inputInfo);
    }
    const handlerAction = (nextTool) => {
      nextTool.mouseWheelHandler(inputInfo);
    };
    this.handler(handlerAction);
  }
  mouseLeaveHandler(inputInfo) {
    const handlerAction = (nextTool) => {
      nextTool.mouseLeaveHandler(inputInfo);
    };
    this.handler(handlerAction);
  }
  mouseEnterHandler(inputInfo) {
    const handlerAction = (nextTool) => {
      nextTool.mouseEnterHandler(inputInfo);
    };
    this.handler(handlerAction);
  }
}


/***/ }),

/***/ "./src/tool/draw/primitive2d/drawD2CircleShape/DrawD2CircleShape.ts":
/*!**************************************************************************!*\
  !*** ./src/tool/draw/primitive2d/drawD2CircleShape/DrawD2CircleShape.ts ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DrawD2CircleShape: () => (/* binding */ DrawD2CircleShape)
/* harmony export */ });
/* harmony import */ var _Constant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../Constant */ "./src/Constant.ts");
/* harmony import */ var _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../engine/common/geometry/vector/Vector2 */ "./src/engine/common/geometry/vector/Vector2.ts");
/* harmony import */ var _objects_shapes_manager_DrawLayerShapeManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../objects/shapes/manager/DrawLayerShapeManager */ "./src/objects/shapes/manager/DrawLayerShapeManager.ts");
/* harmony import */ var _objects_shapes_manager_primitive2d_D2CircleShapeManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../objects/shapes/manager/primitive2d/D2CircleShapeManager */ "./src/objects/shapes/manager/primitive2d/D2CircleShapeManager.ts");
/* harmony import */ var _objects_shapes_primitive2d_D2CircleShape__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../objects/shapes/primitive2d/D2CircleShape */ "./src/objects/shapes/primitive2d/D2CircleShape.ts");
/* harmony import */ var _DrawD2Shape__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../DrawD2Shape */ "./src/tool/draw/primitive2d/DrawD2Shape.ts");







class DrawD2CircleShape extends _DrawD2Shape__WEBPACK_IMPORTED_MODULE_5__.DrawD2Shape {
  constructor() {
    super();
    this._shapeInstances = [];
  }
  get shapeInstances() {
    return this._shapeInstances;
  }
  set shapeInstances(value) {
    this._shapeInstances = value;
  }
  completeDraw() {
    const drawedItems = [];
    if (this.shapeInstances.length) {
      for (let i = 0; i < this.shapeInstances.length; i++) {
        const targetShapeItem = this.shapeInstances[i];
        const elementItemId = _Constant__WEBPACK_IMPORTED_MODULE_0__.globalIdenManager.getElementIden();
        const newTargetShapeItem = _objects_shapes_manager_primitive2d_D2CircleShapeManager__WEBPACK_IMPORTED_MODULE_3__.D2CircleShapeManager.getInstance().createShapeItem(
          elementItemId,
          this.selectedDrawLayerShapeItem.model.layerItemId,
          targetShapeItem.centerPoint,
          targetShapeItem.radius,
          targetShapeItem.strokeWidth,
          targetShapeItem.strokeColor,
          targetShapeItem.isFill,
          targetShapeItem.fillColor
        );
        drawedItems.push(newTargetShapeItem);
        targetShapeItem.setDelete();
      }
    }
    this.destoryShapes();
    return drawedItems;
  }
  cancelDraw() {
    this.destoryShapes();
  }
  updateShapes(inputInfo) {
    for (let i = 0; i < this.shapeInstances.length; i++) {
      const centerPoint = this.shapeInstances[i].centerPoint;
      const nowPoint = new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_1__.Vector2(inputInfo.moveScenePhysicsX, inputInfo.moveScenePhysicsY);
      this.shapeInstances[i].radius = nowPoint.sub(centerPoint).length;
    }
  }
  createShapes(x, y) {
    this.selectedDrawLayerShapeItem = _objects_shapes_manager_DrawLayerShapeManager__WEBPACK_IMPORTED_MODULE_2__.DrawLayerShapeManager.getInstance().getActiveItem();
    if (!this.selectedDrawLayerShapeItem) {
      console.warn(`[draw circle] please activate a draw-layer first.`);
      return;
    }
    this.shapeInstances.push(
      (0,_objects_shapes_primitive2d_D2CircleShape__WEBPACK_IMPORTED_MODULE_4__.buildD2CircleShape)(
        this.selectedDrawLayerShapeItem.model.layerItemId,
        new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_1__.Vector2(x, y),
        0,
        this.strokeWidth,
        this.strokeColor,
        this.isFill,
        this.fillColor
      )
    );
  }
  destoryShapes() {
    for (let i = 0; i < this.shapeInstances.length; i++) {
      this.shapeInstances[i].setDelete();
    }
    this.shapeInstances.length = 0;
  }
}


/***/ }),

/***/ "./src/tool/draw/primitive2d/drawD2CircleShape/DrawD2CircleShapeTool.ts":
/*!******************************************************************************!*\
  !*** ./src/tool/draw/primitive2d/drawD2CircleShape/DrawD2CircleShapeTool.ts ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DrawD2CircleShapeTool: () => (/* binding */ DrawD2CircleShapeTool)
/* harmony export */ });
/* harmony import */ var _config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../config/CommandEnum */ "./src/config/CommandEnum.ts");
/* harmony import */ var _config_OperationProfile__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../config/OperationProfile */ "./src/config/OperationProfile.ts");
/* harmony import */ var _Constant__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../Constant */ "./src/Constant.ts");
/* harmony import */ var _utils_CreateOperationProfile__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../utils/CreateOperationProfile */ "./src/utils/CreateOperationProfile.ts");
/* harmony import */ var _history_command_Config__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../history/command/Config */ "./src/tool/history/command/Config.ts");
/* harmony import */ var _DrawD2ShapeTool__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../DrawD2ShapeTool */ "./src/tool/draw/primitive2d/DrawD2ShapeTool.ts");
/* harmony import */ var _DrawD2CircleShape__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./DrawD2CircleShape */ "./src/tool/draw/primitive2d/drawD2CircleShape/DrawD2CircleShape.ts");








class DrawD2CircleShapeTool extends _DrawD2ShapeTool__WEBPACK_IMPORTED_MODULE_5__.DrawD2ShapeTool {
  constructor() {
    super();
    this._drawShapeHandler = new _DrawD2CircleShape__WEBPACK_IMPORTED_MODULE_6__.DrawD2CircleShape();
  }
  keyDownHandler(inputInfo) {
    const handlerAction = (nextTool) => {
      nextTool.keyDownHandler(inputInfo);
    };
    this.handler(handlerAction);
  }
  keyUpHandler(inputInfo) {
    const handlerAction = (nextTool) => {
      nextTool.keyUpHandler(inputInfo);
    };
    this.handler(handlerAction);
  }
  mouseLeftDownHandler(inputInfo) {
    const handlerAction = (nextTool) => {
      nextTool.mouseLeftDownHandler(inputInfo);
    };
    this.handler(handlerAction);
  }
  mouseMiddleDownHandler(inputInfo) {
    const handlerAction = (nextTool) => {
      nextTool.mouseMiddleDownHandler(inputInfo);
    };
    this.handler(handlerAction);
  }
  mouseRightDownHandler(inputInfo) {
    const handlerAction = (nextTool) => {
      nextTool.mouseRightDownHandler(inputInfo);
    };
    this.handler(handlerAction);
  }
  mouseMoveHandler(inputInfo) {
    if (this.d2CrossAssist) {
      this.d2CrossAssist.update(inputInfo);
    }
    if (inputInfo.rightMouseDown) {
      this.hasMoveWhenAfterRightDown = true;
    }
    if (this.isDrawing) {
      this._drawShapeHandler.updateShapes(inputInfo);
    }
    const handlerAction = (nextTool) => {
      nextTool.mouseMoveHandler(inputInfo);
    };
    this.handler(handlerAction);
  }
  mouseLeftUpHandler(inputInfo) {
    if (!this.isDrawing) {
      this.isDrawing = true;
      this._drawShapeHandler.createShapes(inputInfo.moveScenePhysicsX, inputInfo.moveScenePhysicsY);
    } else {
      this.isDrawing = false;
      const items = this._drawShapeHandler.completeDraw();
      for (let i = 0; i < items.length; i++) {
        _Constant__WEBPACK_IMPORTED_MODULE_2__.operationController.addHistroyRecord(items[i].elementItemId, _history_command_Config__WEBPACK_IMPORTED_MODULE_4__.ECommandAction.ADD);
      }
      if (_Constant__WEBPACK_IMPORTED_MODULE_2__.systemConfig.enbaleOperationMessagesNotify) {
        _Constant__WEBPACK_IMPORTED_MODULE_2__.messageTool.messageBus.publish(
          _config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EOutEventCommand.OPERATION_CHANGED,
          (0,_utils_CreateOperationProfile__WEBPACK_IMPORTED_MODULE_3__.createOperationProfileChangedData)(_config_OperationProfile__WEBPACK_IMPORTED_MODULE_1__.EOperationAction.CREATE_ELEMENT, {})
        );
      }
    }
    const handlerAction = (nextTool) => {
      nextTool.mouseLeftUpHandler(inputInfo);
    };
    this.handler(handlerAction);
  }
  mouseMiddleUpHandler(inputInfo) {
    const handlerAction = (nextTool) => {
      nextTool.mouseMiddleUpHandler(inputInfo);
    };
    this.handler(handlerAction);
  }
  mouseRightUpHandler(inputInfo) {
    if (!this.hasMoveWhenAfterRightDown) {
      this.isDrawing = false;
      this._drawShapeHandler.cancelDraw();
      _Constant__WEBPACK_IMPORTED_MODULE_2__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EFrameCommand.SWITCH_DRAW_TOOL, { type: _config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EDrawToolCommand.BLANK_DROP });
    }
    this.hasMoveWhenAfterRightDown = false;
    const handlerAction = (nextTool) => {
      nextTool.mouseRightUpHandler(inputInfo);
    };
    this.handler(handlerAction);
  }
  mouseWheelHandler(inputInfo) {
    if (this.d2CrossAssist) {
      this.d2CrossAssist.update(inputInfo);
    }
    const handlerAction = (nextTool) => {
      nextTool.mouseWheelHandler(inputInfo);
    };
    this.handler(handlerAction);
  }
  mouseLeaveHandler(inputInfo) {
    const handlerAction = (nextTool) => {
      nextTool.mouseLeaveHandler(inputInfo);
    };
    this.handler(handlerAction);
  }
  mouseEnterHandler(inputInfo) {
    const handlerAction = (nextTool) => {
      nextTool.mouseEnterHandler(inputInfo);
    };
    this.handler(handlerAction);
  }
}


/***/ }),

/***/ "./src/tool/draw/primitive2d/drawD2LineShape/DrawD2LineShape.ts":
/*!**********************************************************************!*\
  !*** ./src/tool/draw/primitive2d/drawD2LineShape/DrawD2LineShape.ts ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DrawD2LineShape: () => (/* binding */ DrawD2LineShape)
/* harmony export */ });
/* harmony import */ var _Constant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../Constant */ "./src/Constant.ts");
/* harmony import */ var _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../engine/common/geometry/vector/Vector2 */ "./src/engine/common/geometry/vector/Vector2.ts");
/* harmony import */ var _objects_shapes_manager_DrawLayerShapeManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../objects/shapes/manager/DrawLayerShapeManager */ "./src/objects/shapes/manager/DrawLayerShapeManager.ts");
/* harmony import */ var _objects_shapes_manager_primitive2d_D2LineShapeManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../objects/shapes/manager/primitive2d/D2LineShapeManager */ "./src/objects/shapes/manager/primitive2d/D2LineShapeManager.ts");
/* harmony import */ var _objects_shapes_primitive2d_D2LineShape__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../objects/shapes/primitive2d/D2LineShape */ "./src/objects/shapes/primitive2d/D2LineShape.ts");
/* harmony import */ var _DrawD2Shape__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../DrawD2Shape */ "./src/tool/draw/primitive2d/DrawD2Shape.ts");







class DrawD2LineShape extends _DrawD2Shape__WEBPACK_IMPORTED_MODULE_5__.DrawD2Shape {
  constructor() {
    super();
    this._shapeInstances = [];
  }
  get shapeInstances() {
    return this._shapeInstances;
  }
  set shapeInstances(value) {
    this._shapeInstances = value;
  }
  completeDraw() {
    const drawedItems = [];
    if (this.shapeInstances.length) {
      for (let i = 0; i < this.shapeInstances.length; i++) {
        const targetShapeItem = this.shapeInstances[i];
        const elementItemId = _Constant__WEBPACK_IMPORTED_MODULE_0__.globalIdenManager.getElementIden();
        const newTargetShapeItem = _objects_shapes_manager_primitive2d_D2LineShapeManager__WEBPACK_IMPORTED_MODULE_3__.D2LineShapeManager.getInstance().createShapeItem(
          elementItemId,
          this.selectedDrawLayerShapeItem.model.layerItemId,
          targetShapeItem.startPoint,
          targetShapeItem.endPoint,
          targetShapeItem.strokeWidth,
          targetShapeItem.strokeColor
        );
        drawedItems.push(newTargetShapeItem);
        targetShapeItem.setDelete();
      }
    }
    this.destoryShapes();
    return drawedItems;
  }
  cancelDraw() {
    this.destoryShapes();
  }
  updateShapes(inputInfo) {
    for (let i = 0; i < this.shapeInstances.length; i++) {
      this.shapeInstances[i].endPoint = new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_1__.Vector2(inputInfo.moveScenePhysicsX, inputInfo.moveScenePhysicsY);
    }
  }
  createShapes(x, y) {
    this.selectedDrawLayerShapeItem = _objects_shapes_manager_DrawLayerShapeManager__WEBPACK_IMPORTED_MODULE_2__.DrawLayerShapeManager.getInstance().getActiveItem();
    if (!this.selectedDrawLayerShapeItem) {
      console.warn(`[draw line] please activate a draw-layer first.`);
      return;
    }
    this.shapeInstances.push(
      (0,_objects_shapes_primitive2d_D2LineShape__WEBPACK_IMPORTED_MODULE_4__.buildD2LineShape)(
        this.selectedDrawLayerShapeItem.model.layerItemId,
        new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_1__.Vector2(x, y),
        new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_1__.Vector2(x, y),
        this.strokeWidth,
        this.strokeColor
      )
    );
  }
  destoryShapes() {
    for (let i = 0; i < this.shapeInstances.length; i++) {
      this.shapeInstances[i].setDelete();
    }
    this.shapeInstances.length = 0;
  }
}


/***/ }),

/***/ "./src/tool/draw/primitive2d/drawD2LineShape/DrawD2LineShapeTool.ts":
/*!**************************************************************************!*\
  !*** ./src/tool/draw/primitive2d/drawD2LineShape/DrawD2LineShapeTool.ts ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DrawD2LineShapeTool: () => (/* binding */ DrawD2LineShapeTool)
/* harmony export */ });
/* harmony import */ var _config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../config/CommandEnum */ "./src/config/CommandEnum.ts");
/* harmony import */ var _config_OperationProfile__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../config/OperationProfile */ "./src/config/OperationProfile.ts");
/* harmony import */ var _Constant__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../Constant */ "./src/Constant.ts");
/* harmony import */ var _utils_CreateOperationProfile__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../utils/CreateOperationProfile */ "./src/utils/CreateOperationProfile.ts");
/* harmony import */ var _history_command_Config__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../history/command/Config */ "./src/tool/history/command/Config.ts");
/* harmony import */ var _DrawD2ShapeTool__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../DrawD2ShapeTool */ "./src/tool/draw/primitive2d/DrawD2ShapeTool.ts");
/* harmony import */ var _DrawD2LineShape__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./DrawD2LineShape */ "./src/tool/draw/primitive2d/drawD2LineShape/DrawD2LineShape.ts");








class DrawD2LineShapeTool extends _DrawD2ShapeTool__WEBPACK_IMPORTED_MODULE_5__.DrawD2ShapeTool {
  constructor() {
    super();
    this._drawShapeHandler = new _DrawD2LineShape__WEBPACK_IMPORTED_MODULE_6__.DrawD2LineShape();
  }
  keyDownHandler(inputInfo) {
    const handlerAction = (nextTool) => {
      nextTool.keyDownHandler(inputInfo);
    };
    this.handler(handlerAction);
  }
  keyUpHandler(inputInfo) {
    const handlerAction = (nextTool) => {
      nextTool.keyUpHandler(inputInfo);
    };
    this.handler(handlerAction);
  }
  mouseLeftDownHandler(inputInfo) {
    const handlerAction = (nextTool) => {
      nextTool.mouseLeftDownHandler(inputInfo);
    };
    this.handler(handlerAction);
  }
  mouseMiddleDownHandler(inputInfo) {
    const handlerAction = (nextTool) => {
      nextTool.mouseMiddleDownHandler(inputInfo);
    };
    this.handler(handlerAction);
  }
  mouseRightDownHandler(inputInfo) {
    const handlerAction = (nextTool) => {
      nextTool.mouseRightDownHandler(inputInfo);
    };
    this.handler(handlerAction);
  }
  mouseMoveHandler(inputInfo) {
    if (this.d2CrossAssist) {
      this.d2CrossAssist.update(inputInfo);
    }
    if (inputInfo.rightMouseDown) {
      this.hasMoveWhenAfterRightDown = true;
    }
    if (this.isDrawing) {
      this._drawShapeHandler.updateShapes(inputInfo);
    }
    const handlerAction = (nextTool) => {
      nextTool.mouseMoveHandler(inputInfo);
    };
    this.handler(handlerAction);
  }
  mouseLeftUpHandler(inputInfo) {
    if (!this.isDrawing) {
      this.isDrawing = true;
      this._drawShapeHandler.createShapes(inputInfo.moveScenePhysicsX, inputInfo.moveScenePhysicsY);
    } else {
      this.isDrawing = false;
      const items = this._drawShapeHandler.completeDraw();
      for (let i = 0; i < items.length; i++) {
        _Constant__WEBPACK_IMPORTED_MODULE_2__.operationController.addHistroyRecord(items[i].elementItemId, _history_command_Config__WEBPACK_IMPORTED_MODULE_4__.ECommandAction.ADD);
      }
      if (_Constant__WEBPACK_IMPORTED_MODULE_2__.systemConfig.enbaleOperationMessagesNotify) {
        _Constant__WEBPACK_IMPORTED_MODULE_2__.messageTool.messageBus.publish(
          _config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EOutEventCommand.OPERATION_CHANGED,
          (0,_utils_CreateOperationProfile__WEBPACK_IMPORTED_MODULE_3__.createOperationProfileChangedData)(_config_OperationProfile__WEBPACK_IMPORTED_MODULE_1__.EOperationAction.CREATE_ELEMENT, {})
        );
      }
    }
    const handlerAction = (nextTool) => {
      nextTool.mouseLeftUpHandler(inputInfo);
    };
    this.handler(handlerAction);
  }
  mouseMiddleUpHandler(inputInfo) {
    const handlerAction = (nextTool) => {
      nextTool.mouseMiddleUpHandler(inputInfo);
    };
    this.handler(handlerAction);
  }
  mouseRightUpHandler(inputInfo) {
    if (!this.hasMoveWhenAfterRightDown) {
      this.isDrawing = false;
      this._drawShapeHandler.cancelDraw();
      _Constant__WEBPACK_IMPORTED_MODULE_2__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EFrameCommand.SWITCH_DRAW_TOOL, { type: _config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EDrawToolCommand.BLANK_DROP });
    }
    this.hasMoveWhenAfterRightDown = false;
    const handlerAction = (nextTool) => {
      nextTool.mouseRightUpHandler(inputInfo);
    };
    this.handler(handlerAction);
  }
  mouseWheelHandler(inputInfo) {
    if (this.d2CrossAssist) {
      this.d2CrossAssist.update(inputInfo);
    }
    const handlerAction = (nextTool) => {
      nextTool.mouseWheelHandler(inputInfo);
    };
    this.handler(handlerAction);
  }
  mouseLeaveHandler(inputInfo) {
    const handlerAction = (nextTool) => {
      nextTool.mouseLeaveHandler(inputInfo);
    };
    this.handler(handlerAction);
  }
  mouseEnterHandler(inputInfo) {
    const handlerAction = (nextTool) => {
      nextTool.mouseEnterHandler(inputInfo);
    };
    this.handler(handlerAction);
  }
}


/***/ }),

/***/ "./src/tool/frameTool/BaseFrameTool.ts":
/*!*********************************************!*\
  !*** ./src/tool/frameTool/BaseFrameTool.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BaseFrameTool: () => (/* binding */ BaseFrameTool)
/* harmony export */ });
/* harmony import */ var _engine_common_Camera__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../engine/common/Camera */ "./src/engine/common/Camera.ts");
/* harmony import */ var _Tool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Tool */ "./src/tool/Tool.ts");



class BaseFrameTool extends _Tool__WEBPACK_IMPORTED_MODULE_1__.Tool {
  constructor() {
    super();
    this._camera = _engine_common_Camera__WEBPACK_IMPORTED_MODULE_0__.Camera.getInstance();
    this._isMouseRightDwon = false;
    this._auxiliaryTool = null;
  }
  get camera() {
    return this._camera;
  }
  get isMouseRightDwon() {
    return this._isMouseRightDwon;
  }
  set isMouseRightDwon(value) {
    this._isMouseRightDwon = value;
  }
  get auxiliaryTool() {
    return this._auxiliaryTool;
  }
  set auxiliaryTool(value) {
    this._auxiliaryTool = value;
  }
}


/***/ }),

/***/ "./src/tool/frameTool/D2FrameTool.ts":
/*!*******************************************!*\
  !*** ./src/tool/frameTool/D2FrameTool.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2FrameTool: () => (/* binding */ D2FrameTool)
/* harmony export */ });
/* harmony import */ var _Constant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Constant */ "./src/Constant.ts");
/* harmony import */ var _config_Config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../config/Config */ "./src/config/Config.ts");
/* harmony import */ var _config_NativeProfile__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../config/NativeProfile */ "./src/config/NativeProfile.ts");
/* harmony import */ var _config_CommandEnum__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../config/CommandEnum */ "./src/config/CommandEnum.ts");
/* harmony import */ var _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../engine/common/geometry/vector/Vector2 */ "./src/engine/common/geometry/vector/Vector2.ts");
/* harmony import */ var _engine_common_geometry_vector_Vector3__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../engine/common/geometry/vector/Vector3 */ "./src/engine/common/geometry/vector/Vector3.ts");
/* harmony import */ var _utils_CreateCanvasProfile__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utils/CreateCanvasProfile */ "./src/utils/CreateCanvasProfile.ts");
/* harmony import */ var _EventsLoader__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../EventsLoader */ "./src/tool/EventsLoader.ts");
/* harmony import */ var _BaseFrameTool__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./BaseFrameTool */ "./src/tool/frameTool/BaseFrameTool.ts");










class D2FrameTool extends _BaseFrameTool__WEBPACK_IMPORTED_MODULE_8__.BaseFrameTool {
  constructor() {
    super();
    this._mouseRightPrevSourceNativePixelX = 0;
    this._mouseRightPrevSourceNativePixelY = 0;
    this._lastCanvasOffset = null;
  }
  init() {
    this.nextTool = _Constant__WEBPACK_IMPORTED_MODULE_0__.dropDragTool;
  }
  get mouseRightPrevSourceNativePixelX() {
    return this._mouseRightPrevSourceNativePixelX;
  }
  set mouseRightPrevSourceNativePixelX(value) {
    this._mouseRightPrevSourceNativePixelX = value;
  }
  get mouseRightPrevSourceNativePixelY() {
    return this._mouseRightPrevSourceNativePixelY;
  }
  set mouseRightPrevSourceNativePixelY(value) {
    this._mouseRightPrevSourceNativePixelY = value;
  }
  viewResizeHandler(inputInfo, offset) {
    this.prepare(inputInfo);
    const newWidth = _Constant__WEBPACK_IMPORTED_MODULE_0__.environment.canvasWidth;
    const newHeight = _Constant__WEBPACK_IMPORTED_MODULE_0__.environment.canvasHeight;
    const oldWidth = newWidth - offset.distX;
    const oldHeight = newHeight - offset.distY;
    const oldRectVector2 = new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_4__.Vector2(oldWidth, oldHeight);
    const newRectVector2 = new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_4__.Vector2(newWidth, newHeight);
    const deltaVector2 = newRectVector2.sub(oldRectVector2).mul(0.5, 0.5);
    const startVector2 = new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_4__.Vector2(_Constant__WEBPACK_IMPORTED_MODULE_0__.environment.canvasLeft, _Constant__WEBPACK_IMPORTED_MODULE_0__.environment.canvasTop);
    let offsetVector3 = new _engine_common_geometry_vector_Vector3__WEBPACK_IMPORTED_MODULE_5__.Vector3(-deltaVector2.x, deltaVector2.y, 0);
    if (this._lastCanvasOffset !== null) {
      const off = startVector2.sub(this._lastCanvasOffset);
      if (off.x < 0 && newWidth > oldWidth || off.x > 0 && newWidth < oldWidth) {
        offsetVector3 = new _engine_common_geometry_vector_Vector3__WEBPACK_IMPORTED_MODULE_5__.Vector3(deltaVector2.x, deltaVector2.y, 0);
      }
      if (off.y < 0 && newHeight > oldHeight || off.y > 0 && newHeight < oldHeight) {
        offsetVector3 = new _engine_common_geometry_vector_Vector3__WEBPACK_IMPORTED_MODULE_5__.Vector3(deltaVector2.x, deltaVector2.y, 0);
      }
    }
    this._lastCanvasOffset = startVector2;
    const cameraZoomRatio = this.camera.getZoomRatio();
    this.camera.setMoveIncrement(new _engine_common_geometry_vector_Vector3__WEBPACK_IMPORTED_MODULE_5__.Vector3(offsetVector3.x / cameraZoomRatio, offsetVector3.y / cameraZoomRatio, offsetVector3.z));
    this.emitInputsChanged(inputInfo);
  }
  keyDownHandler(inputInfo) {
    this.prepare(inputInfo);
    const handlerAction = (nextTool) => {
      nextTool.keyDownHandler(inputInfo);
    };
    if (inputInfo.ctrlKey) {
      if (inputInfo.keyCode === 187) {
        this.zoomCanvas(inputInfo, -100);
      } else if (inputInfo.keyCode === 189) {
        this.zoomCanvas(inputInfo, 100);
      }
    } else {
      const cameraZoomRatio = this.camera.getZoomRatio();
      switch (inputInfo.keyCode) {
        case _config_NativeProfile__WEBPACK_IMPORTED_MODULE_2__.EDIRECTION_KEY.LEFT: {
          if (_Constant__WEBPACK_IMPORTED_MODULE_0__.systemConfig.interactive.enableCanvasTranslate && _Constant__WEBPACK_IMPORTED_MODULE_0__.selectManager.items.size <= 0) {
            this.camera.setMoveIncrement(new _engine_common_geometry_vector_Vector3__WEBPACK_IMPORTED_MODULE_5__.Vector3(-_config_Config__WEBPACK_IMPORTED_MODULE_1__.DIRECTION_KEY_MOVE_STEP / cameraZoomRatio, 0, 0));
          }
          break;
        }
        case _config_NativeProfile__WEBPACK_IMPORTED_MODULE_2__.EDIRECTION_KEY.UP: {
          if (_Constant__WEBPACK_IMPORTED_MODULE_0__.systemConfig.interactive.enableCanvasTranslate && _Constant__WEBPACK_IMPORTED_MODULE_0__.selectManager.items.size <= 0) {
            this.camera.setMoveIncrement(new _engine_common_geometry_vector_Vector3__WEBPACK_IMPORTED_MODULE_5__.Vector3(0, _config_Config__WEBPACK_IMPORTED_MODULE_1__.DIRECTION_KEY_MOVE_STEP / cameraZoomRatio, 0));
          }
          break;
        }
        case _config_NativeProfile__WEBPACK_IMPORTED_MODULE_2__.EDIRECTION_KEY.RIGHT: {
          if (_Constant__WEBPACK_IMPORTED_MODULE_0__.systemConfig.interactive.enableCanvasTranslate && _Constant__WEBPACK_IMPORTED_MODULE_0__.selectManager.items.size <= 0) {
            this.camera.setMoveIncrement(new _engine_common_geometry_vector_Vector3__WEBPACK_IMPORTED_MODULE_5__.Vector3(_config_Config__WEBPACK_IMPORTED_MODULE_1__.DIRECTION_KEY_MOVE_STEP / cameraZoomRatio, 0, 0));
          }
          break;
        }
        case _config_NativeProfile__WEBPACK_IMPORTED_MODULE_2__.EDIRECTION_KEY.DOWN: {
          if (_Constant__WEBPACK_IMPORTED_MODULE_0__.systemConfig.interactive.enableCanvasTranslate && _Constant__WEBPACK_IMPORTED_MODULE_0__.selectManager.items.size <= 0) {
            this.camera.setMoveIncrement(new _engine_common_geometry_vector_Vector3__WEBPACK_IMPORTED_MODULE_5__.Vector3(0, -_config_Config__WEBPACK_IMPORTED_MODULE_1__.DIRECTION_KEY_MOVE_STEP / cameraZoomRatio, 0));
          }
          break;
        }
        default:
      }
    }
    this.emitInputsChanged(inputInfo);
    this.handler(handlerAction);
  }
  keyUpHandler(inputInfo) {
    this.prepare(inputInfo);
    const handlerAction = (nextTool) => {
      nextTool.keyUpHandler(inputInfo);
    };
    this.emitInputsChanged(inputInfo);
    this.handler(handlerAction);
  }
  mouseLeftDownHandler(inputInfo) {
    this.prepare(inputInfo);
    const handlerAction = (nextTool) => {
      nextTool.mouseLeftDownHandler(inputInfo);
    };
    this.emitInputsChanged(inputInfo);
    this.handler(handlerAction);
  }
  mouseMiddleDownHandler(inputInfo) {
    this.prepare(inputInfo);
    const handlerAction = (nextTool) => {
      nextTool.mouseMiddleDownHandler(inputInfo);
    };
    this.emitInputsChanged(inputInfo);
    this.handler(handlerAction);
  }
  mouseRightDownHandler(inputInfo) {
    this.prepare(inputInfo);
    this.mouseRightPrevSourceNativePixelX = inputInfo.moveSourceNativePixelX;
    this.mouseRightPrevSourceNativePixelY = inputInfo.moveSourceNativePixelY;
    const handlerAction = (nextTool) => {
      nextTool.mouseRightDownHandler(inputInfo);
    };
    this.isMouseRightDwon = true;
    this.emitInputsChanged(inputInfo);
    this.handler(handlerAction);
  }
  mouseMoveHandler(inputInfo) {
    this.prepare(inputInfo);
    const handlerAction = (nextTool) => {
      nextTool.mouseMoveHandler(inputInfo);
    };
    if (this.isMouseRightDwon && _Constant__WEBPACK_IMPORTED_MODULE_0__.systemConfig.interactive.enableCanvasTranslate) {
      const cameraZoomRatio = this.camera.getZoomRatio();
      const offsetX = inputInfo.moveSourceNativePixelX - this.mouseRightPrevSourceNativePixelX;
      const offsetY = inputInfo.moveSourceNativePixelY - this.mouseRightPrevSourceNativePixelY;
      this.camera.setMoveIncrement(new _engine_common_geometry_vector_Vector3__WEBPACK_IMPORTED_MODULE_5__.Vector3(offsetX / cameraZoomRatio, -offsetY / cameraZoomRatio, 0));
      this.mouseRightPrevSourceNativePixelX = inputInfo.moveSourceNativePixelX;
      this.mouseRightPrevSourceNativePixelY = inputInfo.moveSourceNativePixelY;
      (0,_EventsLoader__WEBPACK_IMPORTED_MODULE_7__.updateMouseInputInfo)(inputInfo);
      _Constant__WEBPACK_IMPORTED_MODULE_0__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_3__.EOutEventCommand.CANVASPROFILE_CHANGED, (0,_utils_CreateCanvasProfile__WEBPACK_IMPORTED_MODULE_6__.createCanvasProfileChangedData)({}));
    }
    this.emitInputsChanged(inputInfo);
    this.handler(handlerAction);
  }
  mouseLeftUpHandler(inputInfo) {
    this.prepare(inputInfo);
    const handlerAction = (nextTool) => {
      nextTool.mouseLeftUpHandler(inputInfo);
    };
    this.emitInputsChanged(inputInfo);
    this.handler(handlerAction);
  }
  mouseMiddleUpHandler(inputInfo) {
    this.prepare(inputInfo);
    const handlerAction = (nextTool) => {
      nextTool.mouseMiddleUpHandler(inputInfo);
    };
    this.emitInputsChanged(inputInfo);
    this.handler(handlerAction);
  }
  mouseRightUpHandler(inputInfo) {
    this.prepare(inputInfo);
    const handlerAction = (nextTool) => {
      nextTool.mouseRightUpHandler(inputInfo);
    };
    this.isMouseRightDwon = false;
    this.emitInputsChanged(inputInfo);
    this.handler(handlerAction);
  }
  mouseWheelHandler(inputInfo) {
    this.prepare(inputInfo);
    if (inputInfo.altKey) {
      if (_Constant__WEBPACK_IMPORTED_MODULE_0__.systemConfig.interactive.enableCanvasTranslate) {
        this.horizontalScrollCanvas(inputInfo);
      }
    } else if (inputInfo.ctrlKey) {
      if (_Constant__WEBPACK_IMPORTED_MODULE_0__.systemConfig.interactive.enableCanvasTranslate) {
        this.verticalScrollCanvas(inputInfo);
      }
    } else {
      if (_Constant__WEBPACK_IMPORTED_MODULE_0__.systemConfig.interactive.enableCanvasZoomChange) {
        this.zoomCanvas(inputInfo);
      }
    }
    const handlerAction = (nextTool) => {
      nextTool.mouseWheelHandler(inputInfo);
    };
    this.emitInputsChanged(inputInfo);
    this.handler(handlerAction);
  }
  mouseLeaveHandler(inputInfo) {
    this.prepare(inputInfo);
    const handlerAction = (nextTool) => {
      nextTool.mouseLeaveHandler(inputInfo);
    };
    this.emitInputsChanged(inputInfo);
    this.handler(handlerAction);
  }
  mouseEnterHandler(inputInfo) {
    this.prepare(inputInfo);
    const handlerAction = (nextTool) => {
      nextTool.mouseEnterHandler(inputInfo);
    };
    this.emitInputsChanged(inputInfo);
    this.handler(handlerAction);
  }
  zoomCanvas(inputInfo, setDelta) {
    const delta = setDelta || inputInfo.deltaSourceNativePixelY;
    let scale = 1;
    if (delta < 0) {
      scale = _config_Config__WEBPACK_IMPORTED_MODULE_1__.MOUSE_WHEEL_ZOOM_RATIO;
    } else {
      scale = 1 / _config_Config__WEBPACK_IMPORTED_MODULE_1__.MOUSE_WHEEL_ZOOM_RATIO;
    }
    _Constant__WEBPACK_IMPORTED_MODULE_0__.canvasController.setZoomCanvasBySourceNativePixelPosition(
      scale * this.camera.getZoomRatio(),
      new _engine_common_geometry_vector_Vector3__WEBPACK_IMPORTED_MODULE_5__.Vector3(inputInfo.moveSourceNativePixelX, -inputInfo.moveSourceNativePixelY, 0)
    );
    _Constant__WEBPACK_IMPORTED_MODULE_0__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_3__.EFrameCommand.RENDER_FRAME, null);
    _Constant__WEBPACK_IMPORTED_MODULE_0__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_3__.EOutEventCommand.CANVASPROFILE_CHANGED, (0,_utils_CreateCanvasProfile__WEBPACK_IMPORTED_MODULE_6__.createCanvasProfileChangedData)({}));
  }
  verticalScrollCanvas(inputInfo) {
    const delta = inputInfo.deltaSourceNativePixelY;
    let scrollDist = 1;
    if (delta < 0) {
      scrollDist = _config_Config__WEBPACK_IMPORTED_MODULE_1__.MOUSE_WHEEL_SCROLL_DIST;
    } else {
      scrollDist = -_config_Config__WEBPACK_IMPORTED_MODULE_1__.MOUSE_WHEEL_SCROLL_DIST;
    }
    const cameraZoomRatio = this.camera.getZoomRatio();
    this.camera.setMoveIncrement(new _engine_common_geometry_vector_Vector3__WEBPACK_IMPORTED_MODULE_5__.Vector3(0, -scrollDist / cameraZoomRatio, 0));
    _Constant__WEBPACK_IMPORTED_MODULE_0__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_3__.EFrameCommand.RENDER_FRAME, null);
    _Constant__WEBPACK_IMPORTED_MODULE_0__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_3__.EOutEventCommand.CANVASPROFILE_CHANGED, (0,_utils_CreateCanvasProfile__WEBPACK_IMPORTED_MODULE_6__.createCanvasProfileChangedData)({}));
  }
  horizontalScrollCanvas(inputInfo) {
    const delta = inputInfo.deltaSourceNativePixelY;
    let scrollDist = 1;
    if (delta < 0) {
      scrollDist = _config_Config__WEBPACK_IMPORTED_MODULE_1__.MOUSE_WHEEL_SCROLL_DIST;
    } else {
      scrollDist = -_config_Config__WEBPACK_IMPORTED_MODULE_1__.MOUSE_WHEEL_SCROLL_DIST;
    }
    const cameraZoomRatio = this.camera.getZoomRatio();
    this.camera.setMoveIncrement(new _engine_common_geometry_vector_Vector3__WEBPACK_IMPORTED_MODULE_5__.Vector3(scrollDist / cameraZoomRatio, 0, 0));
    _Constant__WEBPACK_IMPORTED_MODULE_0__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_3__.EFrameCommand.RENDER_FRAME, null);
    _Constant__WEBPACK_IMPORTED_MODULE_0__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_3__.EOutEventCommand.CANVASPROFILE_CHANGED, (0,_utils_CreateCanvasProfile__WEBPACK_IMPORTED_MODULE_6__.createCanvasProfileChangedData)({}));
  }
  emitInputsChanged(inputInfo) {
    const data = inputInfo.toJSON();
    data.canvasZoom = this.camera.getZoomRatio();
    _Constant__WEBPACK_IMPORTED_MODULE_0__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_3__.EOutEventCommand.INPUTS_CHANGED, data);
  }
  prepare(inputInfo) {
  }
}


/***/ }),

/***/ "./src/tool/history/HistoryManager.ts":
/*!********************************************!*\
  !*** ./src/tool/history/HistoryManager.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   HistoryManager: () => (/* binding */ HistoryManager)
/* harmony export */ });
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Utils */ "./src/tool/history/Utils.ts");


class HistoryManager {
  constructor(limit = 20) {
    this._commands = [];
    this._index = 0;
    this._limit = limit;
    this._callback = null;
  }
  get index() {
    return this._index;
  }
  set index(value) {
    this._index = value;
  }
  get isExecuting() {
    return this._isExecuting;
  }
  execute(command, action) {
    if (!command || typeof command[action] !== "function") {
      throw new Error(`[history-manager][excute] parameter error.`);
    }
    this._isExecuting = true;
    command[action]();
    this._isExecuting = false;
  }
  add(command) {
    if (this._isExecuting) {
      return this;
    }
    this._commands.splice(this.index + 1, this._commands.length - this.index);
    this._commands.push(command);
    if (this._limit && this._commands.length > this._limit) {
      (0,_Utils__WEBPACK_IMPORTED_MODULE_0__.removeFromTo)(this._commands, 0, -(this._limit + 1));
    }
    this.index = this._commands.length - 1;
    this._callback && this._callback();
    return this;
  }
  setCallback(callback) {
    this._callback = callback;
    return this;
  }
  undo() {
    let command = this._commands[this.index];
    if (!command) {
      return this;
    }
    const groupId = command.groupId;
    while (command.groupId === groupId) {
      this.execute(command, "undo");
      this.index -= 1;
      command = this._commands[this.index];
      if (!command || !command.groupId) {
        break;
      }
    }
    this._callback && this._callback();
    return this;
  }
  redo() {
    let command = this._commands[this.index + 1];
    if (!command) {
      return this;
    }
    const groupId = command.groupId;
    while (command.groupId === groupId) {
      this.execute(command, "redo");
      this.index += 1;
      command = this._commands[this.index + 1];
      if (!command || !command.groupId) {
        break;
      }
    }
    this._callback && this._callback();
    return this;
  }
  clear() {
    let prevSize = this._commands.length;
    this._commands = [];
    this.index = -1;
    if (this._callback && prevSize > 0) {
      this._callback();
    }
  }
  hasUndo() {
    return this.index !== -1 && this._commands.length >= 1;
  }
  hasRedo() {
    return this.index < this._commands.length - 1;
  }
  getCommands(groupId) {
    return groupId ? this._commands.filter((cItem) => {
      return cItem.groupId === groupId;
    }) : this._commands;
  }
}


/***/ }),

/***/ "./src/tool/history/Utils.ts":
/*!***********************************!*\
  !*** ./src/tool/history/Utils.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   removeFromTo: () => (/* binding */ removeFromTo)
/* harmony export */ });

function removeFromTo(array, from, to) {
  array.splice(from, !to || 1 + to - from + (!(to < 0 ^ from >= 0) && (to < 0 || -1) * array.length));
  return array.length;
}


/***/ }),

/***/ "./src/tool/history/command/Command.ts":
/*!*********************************************!*\
  !*** ./src/tool/history/command/Command.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Command: () => (/* binding */ Command)
/* harmony export */ });

class Command {
  constructor(groupId) {
    this._groupId = groupId;
  }
  get groupId() {
    return this._groupId;
  }
  set groupId(value) {
    this.groupId = value;
  }
}


/***/ }),

/***/ "./src/tool/history/command/CommandProxy.ts":
/*!**************************************************!*\
  !*** ./src/tool/history/command/CommandProxy.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CommandProxy: () => (/* binding */ CommandProxy)
/* harmony export */ });
/* harmony import */ var _config_ElementProfile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../config/ElementProfile */ "./src/config/ElementProfile.ts");
/* harmony import */ var _utils_Helper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utils/Helper */ "./src/utils/Helper.ts");
/* harmony import */ var _objects_shapes_manager_primitive2d_D2LineShapeManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../objects/shapes/manager/primitive2d/D2LineShapeManager */ "./src/objects/shapes/manager/primitive2d/D2LineShapeManager.ts");
/* harmony import */ var _D2LineShapeCommand__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./D2LineShapeCommand */ "./src/tool/history/command/D2LineShapeCommand.ts");
/* harmony import */ var _objects_shapes_manager_primitive2d_D2CircleShapeManager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../objects/shapes/manager/primitive2d/D2CircleShapeManager */ "./src/objects/shapes/manager/primitive2d/D2CircleShapeManager.ts");
/* harmony import */ var _D2CircleShapeCommand__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./D2CircleShapeCommand */ "./src/tool/history/command/D2CircleShapeCommand.ts");
/* harmony import */ var _objects_shapes_manager_primitive2d_D2ArcShapeManager__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../objects/shapes/manager/primitive2d/D2ArcShapeManager */ "./src/objects/shapes/manager/primitive2d/D2ArcShapeManager.ts");
/* harmony import */ var _D2ArcShapeCommand__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./D2ArcShapeCommand */ "./src/tool/history/command/D2ArcShapeCommand.ts");
/* harmony import */ var _D2TextShapeCommand__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./D2TextShapeCommand */ "./src/tool/history/command/D2TextShapeCommand.ts");
/* harmony import */ var _objects_shapes_manager_primitive2d_D2TextShapeManager__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../objects/shapes/manager/primitive2d/D2TextShapeManager */ "./src/objects/shapes/manager/primitive2d/D2TextShapeManager.ts");











class CommandProxy {
  static getCommandInstance(elementItemId, action, groupId = String(performance.now())) {
    const elementItem = _utils_Helper__WEBPACK_IMPORTED_MODULE_1__.Helper.getElementShapeItemById(elementItemId);
    if (!elementItem) {
      throw new Error(`error in determining the type of occurrence in instantiating entity history records.`);
    }
    const elementItemModelType = elementItem.model.modelType;
    const setGroupId = groupId || String(performance.now());
    if (elementItemModelType === _config_ElementProfile__WEBPACK_IMPORTED_MODULE_0__.ED2ElementType.D2Line) {
      return new _D2LineShapeCommand__WEBPACK_IMPORTED_MODULE_3__.D2LineShapeCommand(_objects_shapes_manager_primitive2d_D2LineShapeManager__WEBPACK_IMPORTED_MODULE_2__.D2LineShapeManager.getInstance().getItemById(elementItemId), setGroupId, action);
    }
    if (elementItemModelType === _config_ElementProfile__WEBPACK_IMPORTED_MODULE_0__.ED2ElementType.D2Circle) {
      return new _D2CircleShapeCommand__WEBPACK_IMPORTED_MODULE_5__.D2CircleShapeCommand(_objects_shapes_manager_primitive2d_D2CircleShapeManager__WEBPACK_IMPORTED_MODULE_4__.D2CircleShapeManager.getInstance().getItemById(elementItemId), setGroupId, action);
    }
    if (elementItemModelType === _config_ElementProfile__WEBPACK_IMPORTED_MODULE_0__.ED2ElementType.D2Arc) {
      return new _D2ArcShapeCommand__WEBPACK_IMPORTED_MODULE_7__.D2ArcShapeCommand(_objects_shapes_manager_primitive2d_D2ArcShapeManager__WEBPACK_IMPORTED_MODULE_6__.D2ArcShapeManager.getInstance().getItemById(elementItemId), setGroupId, action);
    }
    if (elementItemModelType === _config_ElementProfile__WEBPACK_IMPORTED_MODULE_0__.ED2ElementType.D2Text) {
      return new _D2TextShapeCommand__WEBPACK_IMPORTED_MODULE_8__.D2TextShapeCommand(_objects_shapes_manager_primitive2d_D2TextShapeManager__WEBPACK_IMPORTED_MODULE_9__.D2TextShapeManager.getInstance().getItemById(elementItemId), setGroupId, action);
    }
    throw new Error(`error in determining the type of occurrence in instantiating entity history records.`);
  }
}


/***/ }),

/***/ "./src/tool/history/command/Config.ts":
/*!********************************************!*\
  !*** ./src/tool/history/command/Config.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ECommandAction: () => (/* binding */ ECommandAction)
/* harmony export */ });

var ECommandAction = /* @__PURE__ */ ((ECommandAction2) => {
  ECommandAction2["MODIFY"] = "MODIFY";
  ECommandAction2["ADD"] = "ADD";
  ECommandAction2["DELETE"] = "DELETE";
  return ECommandAction2;
})(ECommandAction || {});


/***/ }),

/***/ "./src/tool/history/command/D2ArcShapeCommand.ts":
/*!*******************************************************!*\
  !*** ./src/tool/history/command/D2ArcShapeCommand.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2ArcShapeCommand: () => (/* binding */ D2ArcShapeCommand)
/* harmony export */ });
/* harmony import */ var _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../engine/common/geometry/vector/Vector2 */ "./src/engine/common/geometry/vector/Vector2.ts");
/* harmony import */ var _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../engine/common/utils/Color */ "./src/engine/common/utils/Color.ts");
/* harmony import */ var _objects_shapes_manager_primitive2d_D2ArcShapeManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../objects/shapes/manager/primitive2d/D2ArcShapeManager */ "./src/objects/shapes/manager/primitive2d/D2ArcShapeManager.ts");
/* harmony import */ var _ElementCommand__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ElementCommand */ "./src/tool/history/command/ElementCommand.ts");





class D2ArcShapeCommand extends _ElementCommand__WEBPACK_IMPORTED_MODULE_3__.ElementCommand {
  constructor(elementItem, groupId, action) {
    super(groupId, action);
    this.itemData = JSON.parse(JSON.stringify(elementItem));
    this._elementItemId = elementItem.elementItemId;
  }
  modify() {
    const {
      type,
      status,
      modelType,
      layerItemId,
      elementItemId,
      elementItemName,
      centerPoint,
      radius,
      startAngle,
      endAngle,
      sweep,
      strokeWidth,
      strokeColorData,
      fillColorData,
      lineCap,
      isFill,
      isSolid
    } = this.itemData;
    const elementItem = _objects_shapes_manager_primitive2d_D2ArcShapeManager__WEBPACK_IMPORTED_MODULE_2__.D2ArcShapeManager.getInstance().getItemById(elementItemId);
    const elementItemNowData = JSON.parse(JSON.stringify(elementItem));
    if (elementItem.centerPoint.x !== centerPoint.x || elementItem.centerPoint.y !== centerPoint.y) {
      elementItem.centerPoint = new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_0__.Vector2(centerPoint.x, centerPoint.y);
    }
    if (elementItem.radius !== radius) {
      elementItem.radius = radius;
    }
    if (elementItem.startAngle !== startAngle) {
      elementItem.startAngle = startAngle;
    }
    if (elementItem.endAngle !== endAngle) {
      elementItem.endAngle = endAngle;
    }
    if (elementItem.sweep !== sweep) {
      elementItem.sweep = sweep;
    }
    if (elementItem.strokeWidth !== strokeWidth) {
      elementItem.strokeWidth = strokeWidth;
    }
    if (elementItem.strokeColor.r !== strokeColorData.r || elementItem.strokeColor.g !== strokeColorData.g || elementItem.strokeColor.b !== strokeColorData.b || elementItem.strokeColor.a !== strokeColorData.a) {
      elementItem.strokeColor = new _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_1__.Color(strokeColorData.r, strokeColorData.g, strokeColorData.b, strokeColorData.a);
    }
    if (elementItem.fillColor.r !== fillColorData.r || elementItem.fillColor.g !== fillColorData.g || elementItem.fillColor.b !== fillColorData.b || elementItem.fillColor.a !== fillColorData.a) {
      elementItem.fillColor = new _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_1__.Color(fillColorData.r, fillColorData.g, fillColorData.b, fillColorData.a);
    }
    if (elementItem.elementItemName !== elementItemName) {
      elementItem.elementItemName = elementItemName;
    }
    if (elementItem.lineCap !== lineCap) {
      elementItem.lineCap = lineCap;
    }
    if (elementItem.isFill !== isFill) {
      elementItem.isFill = isFill;
    }
    if (elementItem.isSolid !== isSolid) {
      elementItem.isSolid = isSolid;
    }
    this.itemData = elementItemNowData;
  }
  rebuild() {
    const {
      type,
      status,
      modelType,
      layerItemId,
      elementItemId,
      elementItemName,
      centerPoint,
      radius,
      startAngle,
      endAngle,
      sweep,
      strokeWidth,
      strokeColorData,
      fillColorData,
      lineCap,
      isFill,
      isSolid
    } = this.itemData;
    const targetShapeItem = _objects_shapes_manager_primitive2d_D2ArcShapeManager__WEBPACK_IMPORTED_MODULE_2__.D2ArcShapeManager.getInstance().createShapeItem(
      elementItemId,
      layerItemId,
      new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_0__.Vector2(centerPoint.x, centerPoint.y),
      radius,
      startAngle,
      endAngle,
      sweep,
      strokeWidth,
      new _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_1__.Color(strokeColorData.r, strokeColorData.g, strokeColorData.b, strokeColorData.a),
      isFill,
      new _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_1__.Color(fillColorData.r, fillColorData.g, fillColorData.b, fillColorData.a)
    );
    targetShapeItem.elementItemName = elementItemName;
    targetShapeItem.lineCap = lineCap;
    targetShapeItem.isSolid = isSolid;
  }
  delete() {
    const { elementItemId } = this.itemData;
    _objects_shapes_manager_primitive2d_D2ArcShapeManager__WEBPACK_IMPORTED_MODULE_2__.D2ArcShapeManager.getInstance().deleteShapeItem(elementItemId);
  }
}


/***/ }),

/***/ "./src/tool/history/command/D2CircleShapeCommand.ts":
/*!**********************************************************!*\
  !*** ./src/tool/history/command/D2CircleShapeCommand.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2CircleShapeCommand: () => (/* binding */ D2CircleShapeCommand)
/* harmony export */ });
/* harmony import */ var _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../engine/common/geometry/vector/Vector2 */ "./src/engine/common/geometry/vector/Vector2.ts");
/* harmony import */ var _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../engine/common/utils/Color */ "./src/engine/common/utils/Color.ts");
/* harmony import */ var _objects_shapes_manager_primitive2d_D2CircleShapeManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../objects/shapes/manager/primitive2d/D2CircleShapeManager */ "./src/objects/shapes/manager/primitive2d/D2CircleShapeManager.ts");
/* harmony import */ var _ElementCommand__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ElementCommand */ "./src/tool/history/command/ElementCommand.ts");





class D2CircleShapeCommand extends _ElementCommand__WEBPACK_IMPORTED_MODULE_3__.ElementCommand {
  constructor(elementItem, groupId, action) {
    super(groupId, action);
    this.itemData = JSON.parse(JSON.stringify(elementItem));
    this._elementItemId = elementItem.elementItemId;
  }
  modify() {
    const {
      type,
      status,
      modelType,
      layerItemId,
      elementItemId,
      elementItemName,
      centerPoint,
      radius,
      strokeWidth,
      strokeColorData,
      fillColorData,
      lineCap,
      isFill,
      isSolid
    } = this.itemData;
    const elementItem = _objects_shapes_manager_primitive2d_D2CircleShapeManager__WEBPACK_IMPORTED_MODULE_2__.D2CircleShapeManager.getInstance().getItemById(elementItemId);
    const elementItemNowData = JSON.parse(JSON.stringify(elementItem));
    if (elementItem.centerPoint.x !== centerPoint.x || elementItem.centerPoint.y !== centerPoint.y) {
      elementItem.centerPoint = new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_0__.Vector2(centerPoint.x, centerPoint.y);
    }
    if (elementItem.radius !== radius) {
      elementItem.radius = radius;
    }
    if (elementItem.strokeWidth !== strokeWidth) {
      elementItem.strokeWidth = strokeWidth;
    }
    if (elementItem.strokeColor.r !== strokeColorData.r || elementItem.strokeColor.g !== strokeColorData.g || elementItem.strokeColor.b !== strokeColorData.b || elementItem.strokeColor.a !== strokeColorData.a) {
      elementItem.strokeColor = new _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_1__.Color(strokeColorData.r, strokeColorData.g, strokeColorData.b, strokeColorData.a);
    }
    if (elementItem.fillColor.r !== fillColorData.r || elementItem.fillColor.g !== fillColorData.g || elementItem.fillColor.b !== fillColorData.b || elementItem.fillColor.a !== fillColorData.a) {
      elementItem.fillColor = new _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_1__.Color(fillColorData.r, fillColorData.g, fillColorData.b, fillColorData.a);
    }
    if (elementItem.elementItemName !== elementItemName) {
      elementItem.elementItemName = elementItemName;
    }
    if (elementItem.lineCap !== lineCap) {
      elementItem.lineCap = lineCap;
    }
    if (elementItem.isFill !== isFill) {
      elementItem.isFill = isFill;
    }
    if (elementItem.isSolid !== isSolid) {
      elementItem.isSolid = isSolid;
    }
    this.itemData = elementItemNowData;
  }
  rebuild() {
    const {
      type,
      status,
      modelType,
      layerItemId,
      elementItemId,
      elementItemName,
      centerPoint,
      radius,
      strokeWidth,
      strokeColorData,
      fillColorData,
      lineCap,
      isFill,
      isSolid
    } = this.itemData;
    const targetShapeItem = _objects_shapes_manager_primitive2d_D2CircleShapeManager__WEBPACK_IMPORTED_MODULE_2__.D2CircleShapeManager.getInstance().createShapeItem(
      elementItemId,
      layerItemId,
      new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_0__.Vector2(centerPoint.x, centerPoint.y),
      radius,
      strokeWidth,
      new _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_1__.Color(strokeColorData.r, strokeColorData.g, strokeColorData.b, strokeColorData.a),
      isFill,
      new _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_1__.Color(fillColorData.r, fillColorData.g, fillColorData.b, fillColorData.a)
    );
    targetShapeItem.elementItemName = elementItemName;
    targetShapeItem.lineCap = lineCap;
    targetShapeItem.isSolid = isSolid;
  }
  delete() {
    const { elementItemId } = this.itemData;
    _objects_shapes_manager_primitive2d_D2CircleShapeManager__WEBPACK_IMPORTED_MODULE_2__.D2CircleShapeManager.getInstance().deleteShapeItem(elementItemId);
  }
}


/***/ }),

/***/ "./src/tool/history/command/D2LineShapeCommand.ts":
/*!********************************************************!*\
  !*** ./src/tool/history/command/D2LineShapeCommand.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2LineShapeCommand: () => (/* binding */ D2LineShapeCommand)
/* harmony export */ });
/* harmony import */ var _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../engine/common/geometry/vector/Vector2 */ "./src/engine/common/geometry/vector/Vector2.ts");
/* harmony import */ var _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../engine/common/utils/Color */ "./src/engine/common/utils/Color.ts");
/* harmony import */ var _objects_shapes_manager_primitive2d_D2LineShapeManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../objects/shapes/manager/primitive2d/D2LineShapeManager */ "./src/objects/shapes/manager/primitive2d/D2LineShapeManager.ts");
/* harmony import */ var _ElementCommand__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ElementCommand */ "./src/tool/history/command/ElementCommand.ts");





class D2LineShapeCommand extends _ElementCommand__WEBPACK_IMPORTED_MODULE_3__.ElementCommand {
  constructor(elementItem, groupId, action) {
    super(groupId, action);
    this.itemData = JSON.parse(JSON.stringify(elementItem));
    this._elementItemId = elementItem.elementItemId;
  }
  modify() {
    const {
      type,
      modelType,
      status,
      layerItemId,
      elementItemId,
      elementItemName,
      startPoint,
      endPoint,
      strokeWidth,
      lineCap,
      isSolid,
      strokeColorData
    } = this.itemData;
    const elementItem = _objects_shapes_manager_primitive2d_D2LineShapeManager__WEBPACK_IMPORTED_MODULE_2__.D2LineShapeManager.getInstance().getItemById(elementItemId);
    const elementItemNowData = JSON.parse(JSON.stringify(elementItem));
    if (elementItem.startPoint.x !== startPoint.x || elementItem.startPoint.y !== startPoint.y) {
      elementItem.startPoint = new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_0__.Vector2(startPoint.x, startPoint.y);
    }
    if (elementItem.endPoint.x !== endPoint.x || elementItem.endPoint.y !== endPoint.y) {
      elementItem.endPoint = new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_0__.Vector2(endPoint.x, endPoint.y);
    }
    if (elementItem.strokeWidth !== strokeWidth) {
      elementItem.strokeWidth = strokeWidth;
    }
    if (elementItem.strokeColor.r !== strokeColorData.r || elementItem.strokeColor.g !== strokeColorData.g || elementItem.strokeColor.b !== strokeColorData.b || elementItem.strokeColor.a !== strokeColorData.a) {
      elementItem.strokeColor = new _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_1__.Color(strokeColorData.r, strokeColorData.g, strokeColorData.b, strokeColorData.a);
    }
    if (elementItem.elementItemName !== elementItemName) {
      elementItem.elementItemName = elementItemName;
    }
    if (elementItem.lineCap !== lineCap) {
      elementItem.lineCap = lineCap;
    }
    if (elementItem.isSolid !== isSolid) {
      elementItem.isSolid = isSolid;
    }
    this.itemData = elementItemNowData;
  }
  rebuild() {
    const {
      type,
      modelType,
      status,
      layerItemId,
      elementItemId,
      elementItemName,
      startPoint,
      endPoint,
      strokeWidth,
      lineCap,
      isSolid,
      strokeColorData
    } = this.itemData;
    const targetShapeItem = _objects_shapes_manager_primitive2d_D2LineShapeManager__WEBPACK_IMPORTED_MODULE_2__.D2LineShapeManager.getInstance().createShapeItem(
      elementItemId,
      layerItemId,
      new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_0__.Vector2(startPoint.x, startPoint.y),
      new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_0__.Vector2(endPoint.x, endPoint.y),
      strokeWidth,
      new _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_1__.Color(strokeColorData.r, strokeColorData.g, strokeColorData.b, strokeColorData.a)
    );
    targetShapeItem.elementItemName = elementItemName;
    targetShapeItem.lineCap = lineCap;
    targetShapeItem.isSolid = isSolid;
  }
  delete() {
    const { elementItemId } = this.itemData;
    _objects_shapes_manager_primitive2d_D2LineShapeManager__WEBPACK_IMPORTED_MODULE_2__.D2LineShapeManager.getInstance().deleteShapeItem(elementItemId);
  }
}


/***/ }),

/***/ "./src/tool/history/command/D2TextShapeCommand.ts":
/*!********************************************************!*\
  !*** ./src/tool/history/command/D2TextShapeCommand.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2TextShapeCommand: () => (/* binding */ D2TextShapeCommand)
/* harmony export */ });
/* harmony import */ var _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../engine/common/geometry/vector/Vector2 */ "./src/engine/common/geometry/vector/Vector2.ts");
/* harmony import */ var _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../engine/common/utils/Color */ "./src/engine/common/utils/Color.ts");
/* harmony import */ var _objects_shapes_manager_primitive2d_D2TextShapeManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../objects/shapes/manager/primitive2d/D2TextShapeManager */ "./src/objects/shapes/manager/primitive2d/D2TextShapeManager.ts");
/* harmony import */ var _ElementCommand__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ElementCommand */ "./src/tool/history/command/ElementCommand.ts");





class D2TextShapeCommand extends _ElementCommand__WEBPACK_IMPORTED_MODULE_3__.ElementCommand {
  constructor(elementItem, groupId, action) {
    super(groupId, action);
    this.itemData = JSON.parse(JSON.stringify(elementItem));
    this._elementItemId = elementItem.elementItemId;
  }
  modify() {
    const {
      type,
      modelType,
      status,
      layerItemId,
      elementItemId,
      elementItemName,
      startPoint,
      content,
      fontFamily,
      fontStyle,
      fontSize,
      fontWeight,
      strokeColorData
    } = this.itemData;
    const elementItem = _objects_shapes_manager_primitive2d_D2TextShapeManager__WEBPACK_IMPORTED_MODULE_2__.D2TextShapeManager.getInstance().getItemById(elementItemId);
    const elementItemNowData = JSON.parse(JSON.stringify(elementItem));
    if (elementItem.startPoint.x !== startPoint.x || elementItem.startPoint.y !== startPoint.y) {
      elementItem.startPoint = new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_0__.Vector2(startPoint.x, startPoint.y);
    }
    if (elementItem.content !== content) {
      elementItem.content = content;
    }
    if (elementItem.fontFamily !== fontFamily) {
      elementItem.fontFamily = fontFamily;
    }
    if (elementItem.fontStyle !== fontStyle) {
      elementItem.fontStyle = fontStyle;
    }
    if (elementItem.fontSize !== fontSize) {
      elementItem.fontSize = fontSize;
    }
    if (elementItem.fontWeight !== fontWeight) {
      elementItem.fontWeight = fontWeight;
    }
    if (elementItem.strokeColor.r !== strokeColorData.r || elementItem.strokeColor.g !== strokeColorData.g || elementItem.strokeColor.b !== strokeColorData.b || elementItem.strokeColor.a !== strokeColorData.a) {
      elementItem.strokeColor = new _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_1__.Color(strokeColorData.r, strokeColorData.g, strokeColorData.b, strokeColorData.a);
    }
    this.itemData = elementItemNowData;
  }
  rebuild() {
    const {
      type,
      modelType,
      status,
      layerItemId,
      elementItemId,
      elementItemName,
      startPoint,
      content,
      fontFamily,
      fontStyle,
      fontSize,
      fontWeight,
      strokeColorData
    } = this.itemData;
    const targetShapeItem = _objects_shapes_manager_primitive2d_D2TextShapeManager__WEBPACK_IMPORTED_MODULE_2__.D2TextShapeManager.getInstance().createShapeItem(
      elementItemId,
      layerItemId,
      new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_0__.Vector2(startPoint.x, startPoint.y),
      content,
      fontFamily,
      fontStyle,
      fontSize,
      fontWeight,
      new _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_1__.Color(strokeColorData.r, strokeColorData.g, strokeColorData.b, strokeColorData.a)
    );
    targetShapeItem.elementItemName = elementItemName;
  }
  delete() {
    const { elementItemId } = this.itemData;
    _objects_shapes_manager_primitive2d_D2TextShapeManager__WEBPACK_IMPORTED_MODULE_2__.D2TextShapeManager.getInstance().deleteShapeItem(elementItemId);
  }
}


/***/ }),

/***/ "./src/tool/history/command/ElementCommand.ts":
/*!****************************************************!*\
  !*** ./src/tool/history/command/ElementCommand.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ElementCommand: () => (/* binding */ ElementCommand)
/* harmony export */ });
/* harmony import */ var _Command__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Command */ "./src/tool/history/command/Command.ts");
/* harmony import */ var _Config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Config */ "./src/tool/history/command/Config.ts");



class ElementCommand extends _Command__WEBPACK_IMPORTED_MODULE_0__.Command {
  constructor(groupId, action) {
    super(groupId);
    this._action = action;
    this._itemData = void 0;
  }
  get action() {
    return this._action;
  }
  set action(value) {
    this.action = value;
  }
  get itemData() {
    return this._itemData;
  }
  set itemData(value) {
    this._itemData = value;
  }
  undo() {
    if (this.action === _Config__WEBPACK_IMPORTED_MODULE_1__.ECommandAction.MODIFY) {
      this.modify();
      return;
    }
    if (this.action === _Config__WEBPACK_IMPORTED_MODULE_1__.ECommandAction.ADD) {
      this.delete();
      return;
    }
    if (this.action === _Config__WEBPACK_IMPORTED_MODULE_1__.ECommandAction.DELETE) {
      this.rebuild();
      return;
    }
  }
  redo() {
    if (this.action === _Config__WEBPACK_IMPORTED_MODULE_1__.ECommandAction.MODIFY) {
      this.modify();
      return;
    }
    if (this.action === _Config__WEBPACK_IMPORTED_MODULE_1__.ECommandAction.ADD) {
      this.rebuild();
      return;
    }
    if (this.action === _Config__WEBPACK_IMPORTED_MODULE_1__.ECommandAction.DELETE) {
      this.delete();
      return;
    }
  }
}


/***/ }),

/***/ "./src/tool/selection/D2ArcShapeSelectionTool.ts":
/*!*******************************************************!*\
  !*** ./src/tool/selection/D2ArcShapeSelectionTool.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2ArcShapeSelectionTool: () => (/* binding */ D2ArcShapeSelectionTool)
/* harmony export */ });
/* harmony import */ var _config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../config/CommandEnum */ "./src/config/CommandEnum.ts");
/* harmony import */ var _config_Config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../config/Config */ "./src/config/Config.ts");
/* harmony import */ var _config_NativeProfile__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../config/NativeProfile */ "./src/config/NativeProfile.ts");
/* harmony import */ var _config_OperationProfile__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../config/OperationProfile */ "./src/config/OperationProfile.ts");
/* harmony import */ var _Constant__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../Constant */ "./src/Constant.ts");
/* harmony import */ var _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../engine/common/geometry/vector/Vector2 */ "./src/engine/common/geometry/vector/Vector2.ts");
/* harmony import */ var _objects_assist_primitive2d_D2AssistPointShape__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../objects/assist/primitive2d/D2AssistPointShape */ "./src/objects/assist/primitive2d/D2AssistPointShape.ts");
/* harmony import */ var _utils_CreateOperationProfile__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utils/CreateOperationProfile */ "./src/utils/CreateOperationProfile.ts");
/* harmony import */ var _history_command_CommandProxy__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../history/command/CommandProxy */ "./src/tool/history/command/CommandProxy.ts");
/* harmony import */ var _history_command_Config__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../history/command/Config */ "./src/tool/history/command/Config.ts");
/* harmony import */ var _engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../engine/config/PrimitiveProfile */ "./src/engine/config/PrimitiveProfile.ts");
/* harmony import */ var _engine_common_geometry_matrix_CanvasMatrix4__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../engine/common/geometry/matrix/CanvasMatrix4 */ "./src/engine/common/geometry/matrix/CanvasMatrix4.ts");
/* harmony import */ var _engine_common_geometry_vector_Vector3__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../engine/common/geometry/vector/Vector3 */ "./src/engine/common/geometry/vector/Vector3.ts");
/* harmony import */ var _engine_common_geometry_shapes_D2ArcTransitions__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../engine/common/geometry/shapes/D2ArcTransitions */ "./src/engine/common/geometry/shapes/D2ArcTransitions.ts");
/* harmony import */ var _engine_common_geometry_shapes_D2LineTransitions__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../engine/common/geometry/shapes/D2LineTransitions */ "./src/engine/common/geometry/shapes/D2LineTransitions.ts");
/* harmony import */ var _base_D2SelectionTool__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./base/D2SelectionTool */ "./src/tool/selection/base/D2SelectionTool.ts");

















class D2ArcShapeSelectionTool extends _base_D2SelectionTool__WEBPACK_IMPORTED_MODULE_15__.D2SelectionTool {
  constructor(selectedItem) {
    super();
    this._shapeItemCommand = null;
    this._selectedItem = selectedItem;
    this._pointCenter = null;
    this._pointStart = null;
    this._pointEnd = null;
    this._pointMiddle = null;
    this._isSelectedPointCenter = false;
    this._isSelectedPointStart = false;
    this._isSelectedPointEnd = false;
    this._isSelectedPointMiddle = false;
    this.initPointsPosition();
  }
  mouseLeftDownSelect(inputInfo) {
    const allControlAssistPoints = [this._pointCenter, this._pointStart, this._pointEnd, this._pointMiddle];
    let hitItem = null;
    for (let i = 0; i < allControlAssistPoints.length; i++) {
      if (allControlAssistPoints[i].isSelect(inputInfo.moveScenePhysicsX, inputInfo.moveScenePhysicsY)) {
        hitItem = allControlAssistPoints[i];
        break;
      }
    }
    return hitItem ? hitItem.parent : null;
  }
  keyDownHandler(inputInfo) {
    switch (inputInfo.keyCode) {
      case _config_NativeProfile__WEBPACK_IMPORTED_MODULE_2__.EDIRECTION_KEY.LEFT: {
        this.moveSelectedItem(-_config_Config__WEBPACK_IMPORTED_MODULE_1__.DIRECTION_KEY_MOVE_STEP, 0);
        break;
      }
      case _config_NativeProfile__WEBPACK_IMPORTED_MODULE_2__.EDIRECTION_KEY.UP: {
        this.moveSelectedItem(0, _config_Config__WEBPACK_IMPORTED_MODULE_1__.DIRECTION_KEY_MOVE_STEP);
        break;
      }
      case _config_NativeProfile__WEBPACK_IMPORTED_MODULE_2__.EDIRECTION_KEY.RIGHT: {
        this.moveSelectedItem(_config_Config__WEBPACK_IMPORTED_MODULE_1__.DIRECTION_KEY_MOVE_STEP, 0);
        break;
      }
      case _config_NativeProfile__WEBPACK_IMPORTED_MODULE_2__.EDIRECTION_KEY.DOWN: {
        this.moveSelectedItem(0, -_config_Config__WEBPACK_IMPORTED_MODULE_1__.DIRECTION_KEY_MOVE_STEP);
        break;
      }
      default:
    }
  }
  keyUpHandler(inputInfo) {
  }
  mouseLeftDownHandler(inputInfo) {
    this.moveScenePhysicsX = inputInfo.leftDownScenePhysicsX;
    this.moveScenePhysicsY = inputInfo.leftDownScenePhysicsY;
    if (this._selectedItem) {
      this._shapeItemCommand = _history_command_CommandProxy__WEBPACK_IMPORTED_MODULE_8__.CommandProxy.getCommandInstance(
        this._selectedItem.elementItemId,
        _history_command_Config__WEBPACK_IMPORTED_MODULE_9__.ECommandAction.MODIFY,
        _Constant__WEBPACK_IMPORTED_MODULE_4__.globalIdenManager.getCommandIden()
      );
    }
    this._isSelectedPointCenter = this._pointCenter.isSelect(inputInfo.leftDownScenePhysicsX, inputInfo.leftDownScenePhysicsY);
    this._isSelectedPointStart = this._pointStart.isSelect(inputInfo.leftDownScenePhysicsX, inputInfo.leftDownScenePhysicsY);
    this._isSelectedPointEnd = this._pointEnd.isSelect(inputInfo.leftDownScenePhysicsX, inputInfo.leftDownScenePhysicsY);
    this._isSelectedPointMiddle = this._pointMiddle.isSelect(inputInfo.leftDownScenePhysicsX, inputInfo.leftDownScenePhysicsY);
  }
  mouseLeftUpHandler(inputInfo) {
    if (this._selectedItem) {
      this._selectedItem.model.updateBBox2();
      if (this._shapeItemCommand) {
        _Constant__WEBPACK_IMPORTED_MODULE_4__.historyManager.add(this._shapeItemCommand);
      }
      if (_Constant__WEBPACK_IMPORTED_MODULE_4__.systemConfig.enbaleOperationMessagesNotify) {
        _Constant__WEBPACK_IMPORTED_MODULE_4__.messageTool.messageBus.publish(
          _config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EOutEventCommand.OPERATION_CHANGED,
          (0,_utils_CreateOperationProfile__WEBPACK_IMPORTED_MODULE_7__.createOperationProfileChangedData)(_config_OperationProfile__WEBPACK_IMPORTED_MODULE_3__.EOperationAction.MODIFY_ELEMENT, {})
        );
      }
    }
    this._shapeItemCommand = null;
  }
  mouseMoveHandler(inputInfo) {
    const diffX = inputInfo.moveScenePhysicsX - this.moveScenePhysicsX;
    const diffY = inputInfo.moveScenePhysicsY - this.moveScenePhysicsY;
    const translateMatrix4 = _engine_common_geometry_matrix_CanvasMatrix4__WEBPACK_IMPORTED_MODULE_11__.CanvasMatrix4.setTranslate(new _engine_common_geometry_vector_Vector3__WEBPACK_IMPORTED_MODULE_12__.Vector3(diffX, diffY, 0));
    if (this._isSelectedPointCenter) {
      this.moveSelectedItem(diffX, diffY);
    } else if (this._isSelectedPointStart) {
      const newStartPoint = this._pointStart.centerPoint.multiplyMatrix4(translateMatrix4);
      const arcResult = _engine_common_geometry_shapes_D2ArcTransitions__WEBPACK_IMPORTED_MODULE_13__.D2ArcTransitions.calculateD2ArcProfileByThreePoint(
        newStartPoint,
        this._pointEnd.centerPoint,
        this._pointMiddle.centerPoint
      );
      this._selectedItem.radius = arcResult.radius;
      this._selectedItem.centerPoint = arcResult.centerPoint;
      this._selectedItem.startAngle = arcResult.startAngle;
      this._selectedItem.endAngle = arcResult.endAngle;
      this._selectedItem.sweep = arcResult.sweep;
      this.updatePointsPosition();
    } else if (this._isSelectedPointEnd) {
      const newEndPoint = this._pointEnd.centerPoint.multiplyMatrix4(translateMatrix4);
      const arcResult = _engine_common_geometry_shapes_D2ArcTransitions__WEBPACK_IMPORTED_MODULE_13__.D2ArcTransitions.calculateD2ArcProfileByThreePoint(
        this._pointStart.centerPoint,
        newEndPoint,
        this._pointMiddle.centerPoint
      );
      this._selectedItem.radius = arcResult.radius;
      this._selectedItem.centerPoint = arcResult.centerPoint;
      this._selectedItem.startAngle = arcResult.startAngle;
      this._selectedItem.endAngle = arcResult.endAngle;
      this._selectedItem.sweep = arcResult.sweep;
      this.updatePointsPosition();
    } else if (this._isSelectedPointMiddle) {
      const perpendicular = _engine_common_geometry_shapes_D2LineTransitions__WEBPACK_IMPORTED_MODULE_14__.D2LineTransitions.calculatePerpendicular(
        this._pointEnd.centerPoint.sub(this._pointStart.centerPoint)
      );
      const B = perpendicular.v1;
      const A = new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_5__.Vector2(diffX, diffY);
      const C = new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_5__.Vector2(
        (A.x * B.x + A.y * B.y) * B.x / (B.x * B.x + B.y * B.y),
        (A.x * B.x + A.y * B.y) * B.y / (B.x * B.x + B.y * B.y)
      );
      const translateMatrix42 = _engine_common_geometry_matrix_CanvasMatrix4__WEBPACK_IMPORTED_MODULE_11__.CanvasMatrix4.setTranslate(new _engine_common_geometry_vector_Vector3__WEBPACK_IMPORTED_MODULE_12__.Vector3(C.x, C.y, 0));
      const newMiddlePoint = this._pointMiddle.centerPoint.multiplyMatrix4(translateMatrix42);
      const arcResult = _engine_common_geometry_shapes_D2ArcTransitions__WEBPACK_IMPORTED_MODULE_13__.D2ArcTransitions.calculateD2ArcProfileByThreePoint(
        this._pointStart.centerPoint,
        this._pointEnd.centerPoint,
        newMiddlePoint
      );
      this._selectedItem.radius = arcResult.radius;
      this._selectedItem.centerPoint = arcResult.centerPoint;
      this._selectedItem.startAngle = arcResult.startAngle;
      this._selectedItem.endAngle = arcResult.endAngle;
      this._selectedItem.sweep = arcResult.sweep;
      this.updatePointsPosition();
    } else {
      this.moveSelectedItem(diffX, diffY);
    }
    this.moveScenePhysicsX = inputInfo.moveScenePhysicsX;
    this.moveScenePhysicsY = inputInfo.moveScenePhysicsY;
  }
  mouseUpMoveHandler(inputInfo) {
    const allControlAssistPoints = [this._pointCenter, this._pointStart, this._pointEnd, this._pointMiddle];
    let hit = false;
    for (let i = 0; i < allControlAssistPoints.length; i++) {
      if (this.isSelectAssistPoint(allControlAssistPoints[i], inputInfo.moveScenePhysicsX, inputInfo.moveScenePhysicsY)) {
        hit = true;
        break;
      }
    }
    if (hit) {
      _Constant__WEBPACK_IMPORTED_MODULE_4__.environment.updateCanvasMouseCursor("pointer");
    } else {
      _Constant__WEBPACK_IMPORTED_MODULE_4__.environment.updateCanvasMouseCursor("default");
    }
  }
  clear() {
    this._selectedItem = null;
    this._pointCenter.setDelete();
    this._pointStart.setDelete();
    this._pointEnd.setDelete();
    this._pointMiddle.setDelete();
    this._pointCenter = null;
    this._pointStart = null;
    this._pointEnd = null;
    this._pointMiddle = null;
    this._isSelectedPointCenter = false;
    this._isSelectedPointStart = false;
    this._isSelectedPointEnd = false;
    this._isSelectedPointMiddle = false;
  }
  initPointsPosition() {
    const arcCenterPoint = this._selectedItem.centerPoint;
    const threePoint = _engine_common_geometry_shapes_D2ArcTransitions__WEBPACK_IMPORTED_MODULE_13__.D2ArcTransitions.calculateThreePointByArcProfile(
      this._selectedItem.radius,
      this._selectedItem.startAngle,
      this._selectedItem.endAngle
    );
    this._pointCenter = (0,_objects_assist_primitive2d_D2AssistPointShape__WEBPACK_IMPORTED_MODULE_6__.buildD2AssistPointShape)(arcCenterPoint.copy(), this._selectedItem);
    this._pointStart = (0,_objects_assist_primitive2d_D2AssistPointShape__WEBPACK_IMPORTED_MODULE_6__.buildD2AssistPointShape)(arcCenterPoint.add(threePoint.startPoint), this._selectedItem);
    this._pointEnd = (0,_objects_assist_primitive2d_D2AssistPointShape__WEBPACK_IMPORTED_MODULE_6__.buildD2AssistPointShape)(arcCenterPoint.add(threePoint.endPoint), this._selectedItem);
    this._pointMiddle = (0,_objects_assist_primitive2d_D2AssistPointShape__WEBPACK_IMPORTED_MODULE_6__.buildD2AssistPointShape)(arcCenterPoint.add(threePoint.middlePoint), this._selectedItem, _engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_10__.ED2PointShape.TRIANGLE);
  }
  updatePointsPosition() {
    const arcCenterPoint = this._selectedItem.centerPoint;
    const threePoint = _engine_common_geometry_shapes_D2ArcTransitions__WEBPACK_IMPORTED_MODULE_13__.D2ArcTransitions.calculateThreePointByArcProfile(
      this._selectedItem.radius,
      this._selectedItem.startAngle,
      this._selectedItem.endAngle
    );
    this._pointCenter.centerPoint = this._selectedItem.centerPoint.copy();
    this._pointStart.centerPoint = arcCenterPoint.add(threePoint.startPoint);
    this._pointEnd.centerPoint = arcCenterPoint.add(threePoint.endPoint);
    this._pointMiddle.centerPoint = arcCenterPoint.add(threePoint.middlePoint);
  }
  moveSelectedItem(diffX, diffY) {
    const moveMatrix4 = _engine_common_geometry_matrix_CanvasMatrix4__WEBPACK_IMPORTED_MODULE_11__.CanvasMatrix4.setTranslate(new _engine_common_geometry_vector_Vector3__WEBPACK_IMPORTED_MODULE_12__.Vector3(diffX, diffY, 0));
    this._selectedItem.transform(moveMatrix4);
    this._pointCenter.transform(moveMatrix4);
    this._pointStart.transform(moveMatrix4);
    this._pointEnd.transform(moveMatrix4);
    this._pointMiddle.transform(moveMatrix4);
  }
}


/***/ }),

/***/ "./src/tool/selection/D2CircleShapeSelectionTool.ts":
/*!**********************************************************!*\
  !*** ./src/tool/selection/D2CircleShapeSelectionTool.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2CircleShapeSelectionTool: () => (/* binding */ D2CircleShapeSelectionTool)
/* harmony export */ });
/* harmony import */ var _config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../config/CommandEnum */ "./src/config/CommandEnum.ts");
/* harmony import */ var _config_Config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../config/Config */ "./src/config/Config.ts");
/* harmony import */ var _config_NativeProfile__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../config/NativeProfile */ "./src/config/NativeProfile.ts");
/* harmony import */ var _config_OperationProfile__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../config/OperationProfile */ "./src/config/OperationProfile.ts");
/* harmony import */ var _Constant__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../Constant */ "./src/Constant.ts");
/* harmony import */ var _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../engine/common/geometry/vector/Vector2 */ "./src/engine/common/geometry/vector/Vector2.ts");
/* harmony import */ var _objects_assist_primitive2d_D2AssistPointShape__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../objects/assist/primitive2d/D2AssistPointShape */ "./src/objects/assist/primitive2d/D2AssistPointShape.ts");
/* harmony import */ var _utils_CreateOperationProfile__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utils/CreateOperationProfile */ "./src/utils/CreateOperationProfile.ts");
/* harmony import */ var _history_command_CommandProxy__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../history/command/CommandProxy */ "./src/tool/history/command/CommandProxy.ts");
/* harmony import */ var _history_command_Config__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../history/command/Config */ "./src/tool/history/command/Config.ts");
/* harmony import */ var _engine_common_geometry_matrix_CanvasMatrix4__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../engine/common/geometry/matrix/CanvasMatrix4 */ "./src/engine/common/geometry/matrix/CanvasMatrix4.ts");
/* harmony import */ var _engine_common_geometry_vector_Vector3__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../engine/common/geometry/vector/Vector3 */ "./src/engine/common/geometry/vector/Vector3.ts");
/* harmony import */ var _base_D2SelectionTool__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./base/D2SelectionTool */ "./src/tool/selection/base/D2SelectionTool.ts");














class D2CircleShapeSelectionTool extends _base_D2SelectionTool__WEBPACK_IMPORTED_MODULE_12__.D2SelectionTool {
  constructor(selectedItem) {
    super();
    this._shapeItemCommand = null;
    this._selectedItem = selectedItem;
    this._pointCenter = null;
    this._pointTop = null;
    this._pointRight = null;
    this._pointBottom = null;
    this._pointLeft = null;
    this._isSelectedPointCenter = false;
    this._isSelectedPointTop = false;
    this._isSelectedPointRight = false;
    this._isSelectedPointBottom = false;
    this._isSelectedPointLeft = false;
    this.initPointsPosition();
  }
  mouseLeftDownSelect(inputInfo) {
    const allControlAssistPoints = [
      this._pointCenter,
      this._pointTop,
      this._pointRight,
      this._pointBottom,
      this._pointLeft
    ];
    let hitItem = null;
    for (let i = 0; i < allControlAssistPoints.length; i++) {
      if (allControlAssistPoints[i].isSelect(inputInfo.moveScenePhysicsX, inputInfo.moveScenePhysicsY)) {
        hitItem = allControlAssistPoints[i];
        break;
      }
    }
    return hitItem ? hitItem.parent : null;
  }
  keyDownHandler(inputInfo) {
    switch (inputInfo.keyCode) {
      case _config_NativeProfile__WEBPACK_IMPORTED_MODULE_2__.EDIRECTION_KEY.LEFT: {
        this.moveSelectedItem(-_config_Config__WEBPACK_IMPORTED_MODULE_1__.DIRECTION_KEY_MOVE_STEP, 0);
        break;
      }
      case _config_NativeProfile__WEBPACK_IMPORTED_MODULE_2__.EDIRECTION_KEY.UP: {
        this.moveSelectedItem(0, _config_Config__WEBPACK_IMPORTED_MODULE_1__.DIRECTION_KEY_MOVE_STEP);
        break;
      }
      case _config_NativeProfile__WEBPACK_IMPORTED_MODULE_2__.EDIRECTION_KEY.RIGHT: {
        this.moveSelectedItem(_config_Config__WEBPACK_IMPORTED_MODULE_1__.DIRECTION_KEY_MOVE_STEP, 0);
        break;
      }
      case _config_NativeProfile__WEBPACK_IMPORTED_MODULE_2__.EDIRECTION_KEY.DOWN: {
        this.moveSelectedItem(0, -_config_Config__WEBPACK_IMPORTED_MODULE_1__.DIRECTION_KEY_MOVE_STEP);
        break;
      }
      default:
    }
  }
  keyUpHandler(inputInfo) {
  }
  mouseLeftDownHandler(inputInfo) {
    this.moveScenePhysicsX = inputInfo.leftDownScenePhysicsX;
    this.moveScenePhysicsY = inputInfo.leftDownScenePhysicsY;
    if (this._selectedItem) {
      this._shapeItemCommand = _history_command_CommandProxy__WEBPACK_IMPORTED_MODULE_8__.CommandProxy.getCommandInstance(
        this._selectedItem.elementItemId,
        _history_command_Config__WEBPACK_IMPORTED_MODULE_9__.ECommandAction.MODIFY,
        _Constant__WEBPACK_IMPORTED_MODULE_4__.globalIdenManager.getCommandIden()
      );
    }
    this._isSelectedPointCenter = this._pointCenter.isSelect(inputInfo.leftDownScenePhysicsX, inputInfo.leftDownScenePhysicsY);
    this._isSelectedPointTop = this._pointTop.isSelect(inputInfo.leftDownScenePhysicsX, inputInfo.leftDownScenePhysicsY);
    this._isSelectedPointRight = this._pointRight.isSelect(inputInfo.leftDownScenePhysicsX, inputInfo.leftDownScenePhysicsY);
    this._isSelectedPointBottom = this._pointBottom.isSelect(inputInfo.leftDownScenePhysicsX, inputInfo.leftDownScenePhysicsY);
    this._isSelectedPointLeft = this._pointLeft.isSelect(inputInfo.leftDownScenePhysicsX, inputInfo.leftDownScenePhysicsY);
  }
  mouseLeftUpHandler(inputInfo) {
    if (this._selectedItem) {
      this._selectedItem.model.updateBBox2();
      if (this._shapeItemCommand) {
        _Constant__WEBPACK_IMPORTED_MODULE_4__.historyManager.add(this._shapeItemCommand);
      }
      if (_Constant__WEBPACK_IMPORTED_MODULE_4__.systemConfig.enbaleOperationMessagesNotify) {
        _Constant__WEBPACK_IMPORTED_MODULE_4__.messageTool.messageBus.publish(
          _config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EOutEventCommand.OPERATION_CHANGED,
          (0,_utils_CreateOperationProfile__WEBPACK_IMPORTED_MODULE_7__.createOperationProfileChangedData)(_config_OperationProfile__WEBPACK_IMPORTED_MODULE_3__.EOperationAction.MODIFY_ELEMENT, {})
        );
      }
    }
    this._shapeItemCommand = null;
  }
  mouseMoveHandler(inputInfo) {
    const diffX = inputInfo.moveScenePhysicsX - this.moveScenePhysicsX;
    const diffY = inputInfo.moveScenePhysicsY - this.moveScenePhysicsY;
    if (this._isSelectedPointCenter) {
      this.moveSelectedItem(diffX, diffY);
    } else if (this._isSelectedPointTop) {
      this._selectedItem.updateRadius(inputInfo.moveScenePhysicsX, inputInfo.moveScenePhysicsY);
      this.updatePointsPosition();
    } else if (this._isSelectedPointRight) {
      this._selectedItem.updateRadius(inputInfo.moveScenePhysicsX, inputInfo.moveScenePhysicsY);
      this.updatePointsPosition();
    } else if (this._isSelectedPointBottom) {
      this._selectedItem.updateRadius(inputInfo.moveScenePhysicsX, inputInfo.moveScenePhysicsY);
      this.updatePointsPosition();
    } else if (this._isSelectedPointLeft) {
      this._selectedItem.updateRadius(inputInfo.moveScenePhysicsX, inputInfo.moveScenePhysicsY);
      this.updatePointsPosition();
    } else {
      this.moveSelectedItem(diffX, diffY);
    }
    this.moveScenePhysicsX = inputInfo.moveScenePhysicsX;
    this.moveScenePhysicsY = inputInfo.moveScenePhysicsY;
  }
  mouseUpMoveHandler(inputInfo) {
    const allControlAssistPoints = [
      this._pointCenter,
      this._pointTop,
      this._pointRight,
      this._pointBottom,
      this._pointLeft
    ];
    let hit = false;
    for (let i = 0; i < allControlAssistPoints.length; i++) {
      if (this.isSelectAssistPoint(allControlAssistPoints[i], inputInfo.moveScenePhysicsX, inputInfo.moveScenePhysicsY)) {
        hit = true;
        break;
      }
    }
    if (hit) {
      _Constant__WEBPACK_IMPORTED_MODULE_4__.environment.updateCanvasMouseCursor("pointer");
    } else {
      _Constant__WEBPACK_IMPORTED_MODULE_4__.environment.updateCanvasMouseCursor("default");
    }
  }
  clear() {
    this._selectedItem = null;
    this._pointCenter.setDelete();
    this._pointTop.setDelete();
    this._pointRight.setDelete();
    this._pointBottom.setDelete();
    this._pointLeft.setDelete();
    this._pointCenter = null;
    this._pointTop = null;
    this._pointRight = null;
    this._pointBottom = null;
    this._pointLeft = null;
    this._isSelectedPointCenter = false;
    this._isSelectedPointTop = false;
    this._isSelectedPointRight = false;
    this._isSelectedPointBottom = false;
    this._isSelectedPointLeft = false;
  }
  initPointsPosition() {
    const circleCenterPoint = this._selectedItem.centerPoint;
    const circleRadius = this._selectedItem.radius;
    this._pointCenter = (0,_objects_assist_primitive2d_D2AssistPointShape__WEBPACK_IMPORTED_MODULE_6__.buildD2AssistPointShape)(new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_5__.Vector2(circleCenterPoint.x, circleCenterPoint.y), this._selectedItem);
    this._pointTop = (0,_objects_assist_primitive2d_D2AssistPointShape__WEBPACK_IMPORTED_MODULE_6__.buildD2AssistPointShape)(new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_5__.Vector2(circleCenterPoint.x, circleCenterPoint.y + circleRadius), this._selectedItem);
    this._pointRight = (0,_objects_assist_primitive2d_D2AssistPointShape__WEBPACK_IMPORTED_MODULE_6__.buildD2AssistPointShape)(new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_5__.Vector2(circleCenterPoint.x + circleRadius, circleCenterPoint.y), this._selectedItem);
    this._pointBottom = (0,_objects_assist_primitive2d_D2AssistPointShape__WEBPACK_IMPORTED_MODULE_6__.buildD2AssistPointShape)(new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_5__.Vector2(circleCenterPoint.x, circleCenterPoint.y - circleRadius), this._selectedItem);
    this._pointLeft = (0,_objects_assist_primitive2d_D2AssistPointShape__WEBPACK_IMPORTED_MODULE_6__.buildD2AssistPointShape)(new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_5__.Vector2(circleCenterPoint.x - circleRadius, circleCenterPoint.y), this._selectedItem);
  }
  updatePointsPosition() {
    const circleCenterPoint = this._selectedItem.centerPoint;
    const circleRadius = this._selectedItem.radius;
    this._pointCenter.centerPoint = new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_5__.Vector2(circleCenterPoint.x, circleCenterPoint.y);
    this._pointTop.centerPoint = new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_5__.Vector2(circleCenterPoint.x, circleCenterPoint.y + circleRadius);
    this._pointRight.centerPoint = new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_5__.Vector2(circleCenterPoint.x + circleRadius, circleCenterPoint.y);
    this._pointBottom.centerPoint = new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_5__.Vector2(circleCenterPoint.x, circleCenterPoint.y - circleRadius);
    this._pointLeft.centerPoint = new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_5__.Vector2(circleCenterPoint.x - circleRadius, circleCenterPoint.y);
  }
  moveSelectedItem(diffX, diffY) {
    const moveMatrix4 = _engine_common_geometry_matrix_CanvasMatrix4__WEBPACK_IMPORTED_MODULE_10__.CanvasMatrix4.setTranslate(new _engine_common_geometry_vector_Vector3__WEBPACK_IMPORTED_MODULE_11__.Vector3(diffX, diffY, 0));
    this._selectedItem.transform(moveMatrix4);
    this._pointCenter.transform(moveMatrix4);
    this._pointTop.transform(moveMatrix4);
    this._pointRight.transform(moveMatrix4);
    this._pointBottom.transform(moveMatrix4);
    this._pointLeft.transform(moveMatrix4);
  }
}


/***/ }),

/***/ "./src/tool/selection/D2LineShapeSelectionTool.ts":
/*!********************************************************!*\
  !*** ./src/tool/selection/D2LineShapeSelectionTool.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2LineShapeSelectionTool: () => (/* binding */ D2LineShapeSelectionTool)
/* harmony export */ });
/* harmony import */ var _config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../config/CommandEnum */ "./src/config/CommandEnum.ts");
/* harmony import */ var _config_Config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../config/Config */ "./src/config/Config.ts");
/* harmony import */ var _config_NativeProfile__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../config/NativeProfile */ "./src/config/NativeProfile.ts");
/* harmony import */ var _config_OperationProfile__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../config/OperationProfile */ "./src/config/OperationProfile.ts");
/* harmony import */ var _Constant__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../Constant */ "./src/Constant.ts");
/* harmony import */ var _engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../engine/config/PrimitiveProfile */ "./src/engine/config/PrimitiveProfile.ts");
/* harmony import */ var _Main__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../Main */ "./src/Main.ts");
/* harmony import */ var _objects_assist_primitive2d_D2AssistPointShape__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../objects/assist/primitive2d/D2AssistPointShape */ "./src/objects/assist/primitive2d/D2AssistPointShape.ts");
/* harmony import */ var _utils_CreateOperationProfile__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../utils/CreateOperationProfile */ "./src/utils/CreateOperationProfile.ts");
/* harmony import */ var _history_command_CommandProxy__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../history/command/CommandProxy */ "./src/tool/history/command/CommandProxy.ts");
/* harmony import */ var _history_command_Config__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../history/command/Config */ "./src/tool/history/command/Config.ts");
/* harmony import */ var _engine_common_geometry_matrix_CanvasMatrix4__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../engine/common/geometry/matrix/CanvasMatrix4 */ "./src/engine/common/geometry/matrix/CanvasMatrix4.ts");
/* harmony import */ var _engine_common_geometry_vector_Vector3__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../engine/common/geometry/vector/Vector3 */ "./src/engine/common/geometry/vector/Vector3.ts");
/* harmony import */ var _engine_common_geometry_shapes_D2LineTransitions__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../engine/common/geometry/shapes/D2LineTransitions */ "./src/engine/common/geometry/shapes/D2LineTransitions.ts");
/* harmony import */ var _base_D2SelectionTool__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./base/D2SelectionTool */ "./src/tool/selection/base/D2SelectionTool.ts");
















class D2LineShapeSelectionTool extends _base_D2SelectionTool__WEBPACK_IMPORTED_MODULE_14__.D2SelectionTool {
  constructor(selectedItem) {
    super();
    this._shapeItemCommand = null;
    this._selectedItem = selectedItem;
    this._pointStart = null;
    this._pointMiddle = null;
    this._pointEnd = null;
    this._isSelectedPointStart = false;
    this._isSelectedPointMiddle = false;
    this._isSelectedPointEnd = false;
    this.initPointsPosition();
  }
  mouseLeftDownSelect(inputInfo) {
    const allControlAssistPoints = [this._pointStart, this._pointMiddle, this._pointEnd];
    let hitItem = null;
    for (let i = 0; i < allControlAssistPoints.length; i++) {
      if (allControlAssistPoints[i].isSelect(inputInfo.moveScenePhysicsX, inputInfo.moveScenePhysicsY)) {
        hitItem = allControlAssistPoints[i];
        break;
      }
    }
    return hitItem ? hitItem.parent : null;
  }
  keyDownHandler(inputInfo) {
    switch (inputInfo.keyCode) {
      case _config_NativeProfile__WEBPACK_IMPORTED_MODULE_2__.EDIRECTION_KEY.LEFT: {
        this.moveSelectedItem(-_config_Config__WEBPACK_IMPORTED_MODULE_1__.DIRECTION_KEY_MOVE_STEP, 0);
        break;
      }
      case _config_NativeProfile__WEBPACK_IMPORTED_MODULE_2__.EDIRECTION_KEY.UP: {
        this.moveSelectedItem(0, _config_Config__WEBPACK_IMPORTED_MODULE_1__.DIRECTION_KEY_MOVE_STEP);
        break;
      }
      case _config_NativeProfile__WEBPACK_IMPORTED_MODULE_2__.EDIRECTION_KEY.RIGHT: {
        this.moveSelectedItem(_config_Config__WEBPACK_IMPORTED_MODULE_1__.DIRECTION_KEY_MOVE_STEP, 0);
        break;
      }
      case _config_NativeProfile__WEBPACK_IMPORTED_MODULE_2__.EDIRECTION_KEY.DOWN: {
        this.moveSelectedItem(0, -_config_Config__WEBPACK_IMPORTED_MODULE_1__.DIRECTION_KEY_MOVE_STEP);
        break;
      }
      default:
    }
  }
  keyUpHandler(inputInfo) {
  }
  mouseLeftDownHandler(inputInfo) {
    this.moveScenePhysicsX = inputInfo.leftDownScenePhysicsX;
    this.moveScenePhysicsY = inputInfo.leftDownScenePhysicsY;
    if (this._selectedItem) {
      this._shapeItemCommand = _history_command_CommandProxy__WEBPACK_IMPORTED_MODULE_9__.CommandProxy.getCommandInstance(
        this._selectedItem.elementItemId,
        _history_command_Config__WEBPACK_IMPORTED_MODULE_10__.ECommandAction.MODIFY,
        _Constant__WEBPACK_IMPORTED_MODULE_4__.globalIdenManager.getCommandIden()
      );
    }
    this._isSelectedPointStart = this._pointStart.isSelect(inputInfo.leftDownScenePhysicsX, inputInfo.leftDownScenePhysicsY);
    this._isSelectedPointMiddle = this._pointMiddle.isSelect(inputInfo.leftDownScenePhysicsX, inputInfo.leftDownScenePhysicsY);
    this._isSelectedPointEnd = this._pointEnd.isSelect(inputInfo.leftDownScenePhysicsX, inputInfo.leftDownScenePhysicsY);
  }
  mouseLeftUpHandler(inputInfo) {
    if (this._selectedItem) {
      this._selectedItem.model.updateBBox2();
      if (this._shapeItemCommand) {
        _Constant__WEBPACK_IMPORTED_MODULE_4__.historyManager.add(this._shapeItemCommand);
      }
      if (_Constant__WEBPACK_IMPORTED_MODULE_4__.systemConfig.enbaleOperationMessagesNotify) {
        _Constant__WEBPACK_IMPORTED_MODULE_4__.messageTool.messageBus.publish(
          _config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EOutEventCommand.OPERATION_CHANGED,
          (0,_utils_CreateOperationProfile__WEBPACK_IMPORTED_MODULE_8__.createOperationProfileChangedData)(_config_OperationProfile__WEBPACK_IMPORTED_MODULE_3__.EOperationAction.MODIFY_ELEMENT, {})
        );
      }
    }
    this._shapeItemCommand = null;
  }
  mouseMoveHandler(inputInfo) {
    const diffX = inputInfo.moveScenePhysicsX - this.moveScenePhysicsX;
    const diffY = inputInfo.moveScenePhysicsY - this.moveScenePhysicsY;
    const translateMatrix4 = _engine_common_geometry_matrix_CanvasMatrix4__WEBPACK_IMPORTED_MODULE_11__.CanvasMatrix4.setTranslate(new _engine_common_geometry_vector_Vector3__WEBPACK_IMPORTED_MODULE_12__.Vector3(diffX, diffY, 0));
    if (this._isSelectedPointStart) {
      this._selectedItem.startPoint = this._selectedItem.startPoint.multiplyMatrix4(translateMatrix4);
      this.updatePointsPosition();
    } else if (this._isSelectedPointMiddle) {
      if (diffX === 0 && diffY === 0) {
        return;
      }
      const perpendicular = _engine_common_geometry_shapes_D2LineTransitions__WEBPACK_IMPORTED_MODULE_13__.D2LineTransitions.calculatePerpendicular(
        this._selectedItem.endPoint.sub(this._selectedItem.startPoint)
      );
      const B = perpendicular.v1;
      const A = new _Main__WEBPACK_IMPORTED_MODULE_6__.Vector2(diffX, diffY);
      const C = new _Main__WEBPACK_IMPORTED_MODULE_6__.Vector2(
        (A.x * B.x + A.y * B.y) * B.x / (B.x * B.x + B.y * B.y),
        (A.x * B.x + A.y * B.y) * B.y / (B.x * B.x + B.y * B.y)
      );
      const translateMatrix42 = _engine_common_geometry_matrix_CanvasMatrix4__WEBPACK_IMPORTED_MODULE_11__.CanvasMatrix4.setTranslate(new _engine_common_geometry_vector_Vector3__WEBPACK_IMPORTED_MODULE_12__.Vector3(C.x, C.y, 0));
      this._selectedItem.startPoint = this._selectedItem.startPoint.multiplyMatrix4(translateMatrix42);
      this._selectedItem.endPoint = this._selectedItem.endPoint.multiplyMatrix4(translateMatrix42);
      this.updatePointsPosition();
    } else if (this._isSelectedPointEnd) {
      this._selectedItem.endPoint = this._selectedItem.endPoint.multiplyMatrix4(translateMatrix4);
      this.updatePointsPosition();
    } else {
      this.moveSelectedItem(diffX, diffY);
      this.updatePointsPosition();
    }
    this.moveScenePhysicsX = inputInfo.moveScenePhysicsX;
    this.moveScenePhysicsY = inputInfo.moveScenePhysicsY;
  }
  mouseUpMoveHandler(inputInfo) {
    const allControlAssistPoints = [this._pointStart, this._pointMiddle, this._pointEnd];
    let hit = false;
    for (let i = 0; i < allControlAssistPoints.length; i++) {
      if (this.isSelectAssistPoint(allControlAssistPoints[i], inputInfo.moveScenePhysicsX, inputInfo.moveScenePhysicsY)) {
        hit = true;
        break;
      }
    }
    if (hit) {
      _Constant__WEBPACK_IMPORTED_MODULE_4__.environment.updateCanvasMouseCursor("pointer");
    } else {
      _Constant__WEBPACK_IMPORTED_MODULE_4__.environment.updateCanvasMouseCursor("default");
    }
  }
  clear() {
    this._selectedItem = null;
    this._pointStart.setDelete();
    this._pointMiddle.setDelete();
    this._pointEnd.setDelete();
    this._pointStart = null;
    this._pointMiddle = null;
    this._pointEnd = null;
    this._isSelectedPointStart = false;
    this._isSelectedPointMiddle = false;
    this._isSelectedPointEnd = false;
  }
  initPointsPosition() {
    this._pointStart = (0,_objects_assist_primitive2d_D2AssistPointShape__WEBPACK_IMPORTED_MODULE_7__.buildD2AssistPointShape)(this._selectedItem.startPoint, this._selectedItem);
    const middleVec2 = this._selectedItem.startPoint.add(this._selectedItem.endPoint);
    this._pointMiddle = (0,_objects_assist_primitive2d_D2AssistPointShape__WEBPACK_IMPORTED_MODULE_7__.buildD2AssistPointShape)(new _Main__WEBPACK_IMPORTED_MODULE_6__.Vector2(middleVec2.x / 2, middleVec2.y / 2), this._selectedItem, _engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_5__.ED2PointShape.TRIANGLE, 1.75);
    this._pointEnd = (0,_objects_assist_primitive2d_D2AssistPointShape__WEBPACK_IMPORTED_MODULE_7__.buildD2AssistPointShape)(this._selectedItem.endPoint, this._selectedItem);
  }
  updatePointsPosition() {
    this._pointStart.centerPoint = this._selectedItem.startPoint.copy();
    const middleVec2 = this._selectedItem.startPoint.add(this._selectedItem.endPoint);
    this._pointMiddle.centerPoint = new _Main__WEBPACK_IMPORTED_MODULE_6__.Vector2(middleVec2.x / 2, middleVec2.y / 2);
    this._pointEnd.centerPoint = this._selectedItem.endPoint.copy();
  }
  moveSelectedItem(diffX, diffY) {
    const moveMatrix4 = _engine_common_geometry_matrix_CanvasMatrix4__WEBPACK_IMPORTED_MODULE_11__.CanvasMatrix4.setTranslate(new _engine_common_geometry_vector_Vector3__WEBPACK_IMPORTED_MODULE_12__.Vector3(diffX, diffY, 0));
    this._selectedItem.transform(moveMatrix4);
    this._pointStart.transform(moveMatrix4);
    this._pointMiddle.transform(moveMatrix4);
    this._pointEnd.transform(moveMatrix4);
  }
}


/***/ }),

/***/ "./src/tool/selection/D2TextShapeSelectionTool.ts":
/*!********************************************************!*\
  !*** ./src/tool/selection/D2TextShapeSelectionTool.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2TextShapeSelectionTool: () => (/* binding */ D2TextShapeSelectionTool)
/* harmony export */ });
/* harmony import */ var _config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../config/CommandEnum */ "./src/config/CommandEnum.ts");
/* harmony import */ var _config_Config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../config/Config */ "./src/config/Config.ts");
/* harmony import */ var _config_NativeProfile__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../config/NativeProfile */ "./src/config/NativeProfile.ts");
/* harmony import */ var _config_OperationProfile__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../config/OperationProfile */ "./src/config/OperationProfile.ts");
/* harmony import */ var _Constant__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../Constant */ "./src/Constant.ts");
/* harmony import */ var _utils_CreateOperationProfile__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utils/CreateOperationProfile */ "./src/utils/CreateOperationProfile.ts");
/* harmony import */ var _history_command_CommandProxy__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../history/command/CommandProxy */ "./src/tool/history/command/CommandProxy.ts");
/* harmony import */ var _history_command_Config__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../history/command/Config */ "./src/tool/history/command/Config.ts");
/* harmony import */ var _engine_common_geometry_matrix_CanvasMatrix4__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../engine/common/geometry/matrix/CanvasMatrix4 */ "./src/engine/common/geometry/matrix/CanvasMatrix4.ts");
/* harmony import */ var _engine_common_geometry_vector_Vector3__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../engine/common/geometry/vector/Vector3 */ "./src/engine/common/geometry/vector/Vector3.ts");
/* harmony import */ var _base_D2SelectionTool__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./base/D2SelectionTool */ "./src/tool/selection/base/D2SelectionTool.ts");












class D2TextShapeSelectionTool extends _base_D2SelectionTool__WEBPACK_IMPORTED_MODULE_10__.D2SelectionTool {
  constructor(selectedItem) {
    super();
    this._shapeItemCommand = null;
    this._selectedItem = selectedItem;
  }
  mouseLeftDownSelect(inputInfo) {
    return null;
  }
  keyDownHandler(inputInfo) {
    switch (inputInfo.keyCode) {
      case _config_NativeProfile__WEBPACK_IMPORTED_MODULE_2__.EDIRECTION_KEY.LEFT: {
        this.moveSelectedItem(-_config_Config__WEBPACK_IMPORTED_MODULE_1__.DIRECTION_KEY_MOVE_STEP, 0);
        break;
      }
      case _config_NativeProfile__WEBPACK_IMPORTED_MODULE_2__.EDIRECTION_KEY.UP: {
        this.moveSelectedItem(0, _config_Config__WEBPACK_IMPORTED_MODULE_1__.DIRECTION_KEY_MOVE_STEP);
        break;
      }
      case _config_NativeProfile__WEBPACK_IMPORTED_MODULE_2__.EDIRECTION_KEY.RIGHT: {
        this.moveSelectedItem(_config_Config__WEBPACK_IMPORTED_MODULE_1__.DIRECTION_KEY_MOVE_STEP, 0);
        break;
      }
      case _config_NativeProfile__WEBPACK_IMPORTED_MODULE_2__.EDIRECTION_KEY.DOWN: {
        this.moveSelectedItem(0, -_config_Config__WEBPACK_IMPORTED_MODULE_1__.DIRECTION_KEY_MOVE_STEP);
        break;
      }
      default:
    }
  }
  keyUpHandler(inputInfo) {
  }
  mouseLeftDownHandler(inputInfo) {
    this.moveScenePhysicsX = inputInfo.leftDownScenePhysicsX;
    this.moveScenePhysicsY = inputInfo.leftDownScenePhysicsY;
    if (this._selectedItem) {
      this._shapeItemCommand = _history_command_CommandProxy__WEBPACK_IMPORTED_MODULE_6__.CommandProxy.getCommandInstance(
        this._selectedItem.elementItemId,
        _history_command_Config__WEBPACK_IMPORTED_MODULE_7__.ECommandAction.MODIFY,
        _Constant__WEBPACK_IMPORTED_MODULE_4__.globalIdenManager.getCommandIden()
      );
    }
  }
  mouseLeftUpHandler(inputInfo) {
    if (this._selectedItem) {
      this._selectedItem.model.updateBBox2();
      if (this._shapeItemCommand) {
        _Constant__WEBPACK_IMPORTED_MODULE_4__.historyManager.add(this._shapeItemCommand);
      }
      if (_Constant__WEBPACK_IMPORTED_MODULE_4__.systemConfig.enbaleOperationMessagesNotify) {
        _Constant__WEBPACK_IMPORTED_MODULE_4__.messageTool.messageBus.publish(
          _config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EOutEventCommand.OPERATION_CHANGED,
          (0,_utils_CreateOperationProfile__WEBPACK_IMPORTED_MODULE_5__.createOperationProfileChangedData)(_config_OperationProfile__WEBPACK_IMPORTED_MODULE_3__.EOperationAction.MODIFY_ELEMENT, {})
        );
      }
    }
    this._shapeItemCommand = null;
  }
  mouseMoveHandler(inputInfo) {
    const diffX = inputInfo.moveScenePhysicsX - this.moveScenePhysicsX;
    const diffY = inputInfo.moveScenePhysicsY - this.moveScenePhysicsY;
    this.moveSelectedItem(diffX, diffY);
    this.moveScenePhysicsX = inputInfo.moveScenePhysicsX;
    this.moveScenePhysicsY = inputInfo.moveScenePhysicsY;
  }
  mouseUpMoveHandler(inputInfo) {
    _Constant__WEBPACK_IMPORTED_MODULE_4__.environment.updateCanvasMouseCursor("default");
  }
  clear() {
    this._selectedItem = null;
  }
  moveSelectedItem(diffX, diffY) {
    const moveMatrix4 = _engine_common_geometry_matrix_CanvasMatrix4__WEBPACK_IMPORTED_MODULE_8__.CanvasMatrix4.setTranslate(new _engine_common_geometry_vector_Vector3__WEBPACK_IMPORTED_MODULE_9__.Vector3(diffX, diffY, 0));
    this._selectedItem.transform(moveMatrix4);
  }
}


/***/ }),

/***/ "./src/tool/selection/HandlerControl.ts":
/*!**********************************************!*\
  !*** ./src/tool/selection/HandlerControl.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   HandlerControl: () => (/* binding */ HandlerControl)
/* harmony export */ });
/* harmony import */ var _config_ElementProfile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../config/ElementProfile */ "./src/config/ElementProfile.ts");
/* harmony import */ var _D2LineShapeSelectionTool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./D2LineShapeSelectionTool */ "./src/tool/selection/D2LineShapeSelectionTool.ts");
/* harmony import */ var _D2CircleShapeSelectionTool__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./D2CircleShapeSelectionTool */ "./src/tool/selection/D2CircleShapeSelectionTool.ts");
/* harmony import */ var _MoveOperSelectionTool__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./MoveOperSelectionTool */ "./src/tool/selection/MoveOperSelectionTool.ts");
/* harmony import */ var _Constant__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../Constant */ "./src/Constant.ts");
/* harmony import */ var _D2ArcShapeSelectionTool__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./D2ArcShapeSelectionTool */ "./src/tool/selection/D2ArcShapeSelectionTool.ts");
/* harmony import */ var _D2TextShapeSelectionTool__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./D2TextShapeSelectionTool */ "./src/tool/selection/D2TextShapeSelectionTool.ts");








class HandlerControl {
  constructor() {
    this._processor = null;
  }
  mouseLeftDownSelect(inputInfo) {
    if (!this.hasProcessor()) {
      return null;
    }
    return this._processor.mouseLeftDownSelect(inputInfo);
  }
  hasProcessor() {
    return this._processor !== null;
  }
  clearProcessor() {
    this._processor && this._processor.clear();
    this._processor = null;
  }
  updateProcessor(inputInfo, clickSelect) {
    const selectedItems = _Constant__WEBPACK_IMPORTED_MODULE_4__.selectManager.getAllItems();
    if (selectedItems.length <= 0 && !clickSelect) {
      this.clearProcessor();
      return;
    }
    if (this._processor) {
      this._processor.mouseLeftDownHandler(inputInfo);
      return;
    }
    if (selectedItems.length >= 2) {
      this._processor = new _MoveOperSelectionTool__WEBPACK_IMPORTED_MODULE_3__.MoveOperSelectionTool();
      this._processor.mouseLeftDownHandler(inputInfo);
      return;
    }
    const selectItem = selectedItems[0];
    if (selectItem.getType() === _config_ElementProfile__WEBPACK_IMPORTED_MODULE_0__.ED2ElementType.D2Line) {
      this._processor = new _D2LineShapeSelectionTool__WEBPACK_IMPORTED_MODULE_1__.D2LineShapeSelectionTool(selectItem);
      this._processor.mouseLeftDownHandler(inputInfo);
      return;
    }
    if (selectItem.getType() === _config_ElementProfile__WEBPACK_IMPORTED_MODULE_0__.ED2ElementType.D2Circle) {
      this._processor = new _D2CircleShapeSelectionTool__WEBPACK_IMPORTED_MODULE_2__.D2CircleShapeSelectionTool(selectItem);
      this._processor.mouseLeftDownHandler(inputInfo);
      return;
    }
    if (selectItem.getType() === _config_ElementProfile__WEBPACK_IMPORTED_MODULE_0__.ED2ElementType.D2Arc) {
      this._processor = new _D2ArcShapeSelectionTool__WEBPACK_IMPORTED_MODULE_5__.D2ArcShapeSelectionTool(selectItem);
      this._processor.mouseLeftDownHandler(inputInfo);
      return;
    }
    if (selectItem.getType() === _config_ElementProfile__WEBPACK_IMPORTED_MODULE_0__.ED2ElementType.D2Text) {
      this._processor = new _D2TextShapeSelectionTool__WEBPACK_IMPORTED_MODULE_6__.D2TextShapeSelectionTool(selectItem);
      this._processor.mouseLeftDownHandler(inputInfo);
      return;
    }
  }
  keyDownHandler(inputInfo) {
    this._processor && this._processor.keyDownHandler(inputInfo);
  }
  keyUpHandler(inputInfo) {
    this._processor && this._processor.keyUpHandler(inputInfo);
  }
  mouseLeftDownHandler(inputInfo) {
    this._processor && this._processor.mouseLeftDownHandler(inputInfo);
  }
  mouseLeftUpHandler(inputInfo) {
    this._processor && this._processor.mouseLeftUpHandler(inputInfo);
  }
  mouseMoveHandler(inputInfo) {
    this._processor && this._processor.mouseMoveHandler(inputInfo);
  }
  mouseUpMoveHandler(inputInfo) {
    this._processor && this._processor.mouseUpMoveHandler(inputInfo);
  }
}


/***/ }),

/***/ "./src/tool/selection/MoveOperSelectionTool.ts":
/*!*****************************************************!*\
  !*** ./src/tool/selection/MoveOperSelectionTool.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MoveOperSelectionTool: () => (/* binding */ MoveOperSelectionTool)
/* harmony export */ });
/* harmony import */ var _config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../config/CommandEnum */ "./src/config/CommandEnum.ts");
/* harmony import */ var _config_Config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../config/Config */ "./src/config/Config.ts");
/* harmony import */ var _config_NativeProfile__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../config/NativeProfile */ "./src/config/NativeProfile.ts");
/* harmony import */ var _config_OperationProfile__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../config/OperationProfile */ "./src/config/OperationProfile.ts");
/* harmony import */ var _Constant__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../Constant */ "./src/Constant.ts");
/* harmony import */ var _engine_common_geometry_matrix_Matrix4__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../engine/common/geometry/matrix/Matrix4 */ "./src/engine/common/geometry/matrix/Matrix4.ts");
/* harmony import */ var _utils_CreateOperationProfile__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utils/CreateOperationProfile */ "./src/utils/CreateOperationProfile.ts");
/* harmony import */ var _history_command_CommandProxy__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../history/command/CommandProxy */ "./src/tool/history/command/CommandProxy.ts");
/* harmony import */ var _history_command_Config__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../history/command/Config */ "./src/tool/history/command/Config.ts");
/* harmony import */ var _base_SelectionTool__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./base/SelectionTool */ "./src/tool/selection/base/SelectionTool.ts");











class MoveOperSelectionTool extends _base_SelectionTool__WEBPACK_IMPORTED_MODULE_9__.SelectionTool {
  constructor() {
    super();
    this._shapeItemCommands = /* @__PURE__ */ new Map();
  }
  mouseLeftDownSelect(inputInfo) {
    return null;
  }
  keyDownHandler(inputInfo) {
    switch (inputInfo.keyCode) {
      case _config_NativeProfile__WEBPACK_IMPORTED_MODULE_2__.EDIRECTION_KEY.LEFT: {
        this.moveSelectedItems(-_config_Config__WEBPACK_IMPORTED_MODULE_1__.DIRECTION_KEY_MOVE_STEP, 0);
        break;
      }
      case _config_NativeProfile__WEBPACK_IMPORTED_MODULE_2__.EDIRECTION_KEY.UP: {
        this.moveSelectedItems(0, _config_Config__WEBPACK_IMPORTED_MODULE_1__.DIRECTION_KEY_MOVE_STEP);
        break;
      }
      case _config_NativeProfile__WEBPACK_IMPORTED_MODULE_2__.EDIRECTION_KEY.RIGHT: {
        this.moveSelectedItems(_config_Config__WEBPACK_IMPORTED_MODULE_1__.DIRECTION_KEY_MOVE_STEP, 0);
        break;
      }
      case _config_NativeProfile__WEBPACK_IMPORTED_MODULE_2__.EDIRECTION_KEY.DOWN: {
        this.moveSelectedItems(0, -_config_Config__WEBPACK_IMPORTED_MODULE_1__.DIRECTION_KEY_MOVE_STEP);
        break;
      }
      default:
    }
  }
  keyUpHandler(inputInfo) {
  }
  mouseLeftDownHandler(inputInfo) {
    this.moveScenePhysicsX = inputInfo.leftDownScenePhysicsX;
    this.moveScenePhysicsY = inputInfo.leftDownScenePhysicsY;
    const allSelectItems = _Constant__WEBPACK_IMPORTED_MODULE_4__.selectManager.getAllSelectItems();
    if (allSelectItems.length) {
      for (let i = 0; i < allSelectItems.length; i++) {
        const shapeItemCommand = _history_command_CommandProxy__WEBPACK_IMPORTED_MODULE_7__.CommandProxy.getCommandInstance(
          allSelectItems[i].elementItemId,
          _history_command_Config__WEBPACK_IMPORTED_MODULE_8__.ECommandAction.MODIFY,
          _Constant__WEBPACK_IMPORTED_MODULE_4__.globalIdenManager.getCommandIden()
        );
        this._shapeItemCommands.set(allSelectItems[i].elementItemId, shapeItemCommand);
      }
    }
  }
  mouseLeftUpHandler(inputInfo) {
    const allSelectItems = _Constant__WEBPACK_IMPORTED_MODULE_4__.selectManager.getAllSelectItems();
    let hasModified = false;
    for (let i = 0; i < allSelectItems.length; i++) {
      const item = allSelectItems[i];
      hasModified = true;
      item.model.updateBBox2();
    }
    if (hasModified) {
      for (let commandItem of this._shapeItemCommands) {
        _Constant__WEBPACK_IMPORTED_MODULE_4__.historyManager.add(commandItem[1]);
      }
    }
    this._shapeItemCommands.clear();
    if (_Constant__WEBPACK_IMPORTED_MODULE_4__.systemConfig.enbaleOperationMessagesNotify) {
      _Constant__WEBPACK_IMPORTED_MODULE_4__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EOutEventCommand.OPERATION_CHANGED, (0,_utils_CreateOperationProfile__WEBPACK_IMPORTED_MODULE_6__.createOperationProfileChangedData)(_config_OperationProfile__WEBPACK_IMPORTED_MODULE_3__.EOperationAction.MODIFY_ELEMENT, {}));
    }
  }
  mouseMoveHandler(inputInfo) {
    const diffX = inputInfo.moveScenePhysicsX - this.moveScenePhysicsX;
    const diffY = inputInfo.moveScenePhysicsY - this.moveScenePhysicsY;
    this.moveSelectedItems(diffX, diffY);
    this.moveScenePhysicsX = inputInfo.moveScenePhysicsX;
    this.moveScenePhysicsY = inputInfo.moveScenePhysicsY;
  }
  mouseUpMoveHandler(inputInfo) {
  }
  clear() {
  }
  moveSelectedItems(diffX, diffY) {
    const allSelectItems = _Constant__WEBPACK_IMPORTED_MODULE_4__.selectManager.getAllSelectItems();
    const translateMatrix4 = _engine_common_geometry_matrix_Matrix4__WEBPACK_IMPORTED_MODULE_5__.Matrix4.createTranslateMatrix4ByCoordinate(diffX, diffY, 0);
    for (let i = 0; i < allSelectItems.length; i++) {
      const item = allSelectItems[i];
      item.transform(translateMatrix4);
    }
  }
}


/***/ }),

/***/ "./src/tool/selection/base/D2SelectionTool.ts":
/*!****************************************************!*\
  !*** ./src/tool/selection/base/D2SelectionTool.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2SelectionTool: () => (/* binding */ D2SelectionTool)
/* harmony export */ });
/* harmony import */ var _engine_common_geometry_vector_Vector3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../engine/common/geometry/vector/Vector3 */ "./src/engine/common/geometry/vector/Vector3.ts");
/* harmony import */ var _SelectionTool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SelectionTool */ "./src/tool/selection/base/SelectionTool.ts");



class D2SelectionTool extends _SelectionTool__WEBPACK_IMPORTED_MODULE_1__.SelectionTool {
  constructor() {
    super();
  }
  isSelectAssistPoint(assistPoint, x, y) {
    const zoomRatio = this.camrea.getZoomRatio();
    const point = new _engine_common_geometry_vector_Vector3__WEBPACK_IMPORTED_MODULE_0__.Vector3(x, y, 0);
    const centerPoint = new _engine_common_geometry_vector_Vector3__WEBPACK_IMPORTED_MODULE_0__.Vector3(assistPoint.centerPoint.x, assistPoint.centerPoint.y, 0);
    const distOfClickPointAndCenterPoint = point.sub(centerPoint).length;
    if (distOfClickPointAndCenterPoint <= assistPoint.size / zoomRatio) {
      return true;
    }
    return false;
  }
}


/***/ }),

/***/ "./src/tool/selection/base/SelectionTool.ts":
/*!**************************************************!*\
  !*** ./src/tool/selection/base/SelectionTool.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SelectionTool: () => (/* binding */ SelectionTool)
/* harmony export */ });
/* harmony import */ var _engine_common_Camera__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../engine/common/Camera */ "./src/engine/common/Camera.ts");


class SelectionTool {
  constructor() {
    this._camrea = _engine_common_Camera__WEBPACK_IMPORTED_MODULE_0__.Camera.getInstance();
    this._moveStartPosition = null;
    this._moveScenePhysicsX = 0;
    this._moveScenePhysicsY = 0;
  }
  get camrea() {
    return this._camrea;
  }
  set selectedItems(value) {
    this._selectedItems = value;
  }
  get selectedItems() {
    return this._selectedItems;
  }
  set moveStartPosition(value) {
    this._moveStartPosition = value;
  }
  get moveStartPosition() {
    return this._moveStartPosition;
  }
  set moveScenePhysicsX(value) {
    this._moveScenePhysicsX = value;
  }
  get moveScenePhysicsX() {
    return this._moveScenePhysicsX;
  }
  set moveScenePhysicsY(value) {
    this._moveScenePhysicsY = value;
  }
  get moveScenePhysicsY() {
    return this._moveScenePhysicsY;
  }
}


/***/ }),

/***/ "./src/utils/CalcRealPhysicsPosition.ts":
/*!**********************************************!*\
  !*** ./src/utils/CalcRealPhysicsPosition.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   calcRealPhysicsPosition: () => (/* binding */ calcRealPhysicsPosition)
/* harmony export */ });
/* harmony import */ var _engine_common_InsConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine/common/InsConfig */ "./src/engine/common/InsConfig.ts");
/* harmony import */ var _engine_common_math_Calculation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../engine/common/math/Calculation */ "./src/engine/common/math/Calculation.ts");
/* harmony import */ var _tool_EventsLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tool/EventsLoader */ "./src/tool/EventsLoader.ts");




function calcRealPhysicsPosition(sourcePixelX, sourcePixelY) {
  const DPI = _engine_common_InsConfig__WEBPACK_IMPORTED_MODULE_0__.InsConfig.DPI;
  return (0,_tool_EventsLoader__WEBPACK_IMPORTED_MODULE_2__.setCanvasNativePixelPos2ScenePixelPos)(sourcePixelX, sourcePixelY).map((item, index) => {
    return (0,_engine_common_math_Calculation__WEBPACK_IMPORTED_MODULE_1__.px2mm)(item, DPI[index]);
  });
}


/***/ }),

/***/ "./src/utils/CreateCanvasProfile.ts":
/*!******************************************!*\
  !*** ./src/utils/CreateCanvasProfile.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createCanvasProfileChangedData: () => (/* binding */ createCanvasProfileChangedData)
/* harmony export */ });
/* harmony import */ var _engine_common_Camera__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine/common/Camera */ "./src/engine/common/Camera.ts");
/* harmony import */ var _engine_common_InsConfig__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../engine/common/InsConfig */ "./src/engine/common/InsConfig.ts");



function createCanvasProfileChangedData(params = {}) {
  return {
    zoomRatio: _engine_common_Camera__WEBPACK_IMPORTED_MODULE_0__.Camera.getInstance().getZoomRatio(),
    canvasWidth: _engine_common_Camera__WEBPACK_IMPORTED_MODULE_0__.Camera.getInstance().width,
    canvasHeight: _engine_common_Camera__WEBPACK_IMPORTED_MODULE_0__.Camera.getInstance().height,
    DPI: _engine_common_InsConfig__WEBPACK_IMPORTED_MODULE_1__.InsConfig.DPI
  };
}


/***/ }),

/***/ "./src/utils/CreateIntensiveCanvasProfile.ts":
/*!***************************************************!*\
  !*** ./src/utils/CreateIntensiveCanvasProfile.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createCanvasIntensiveProfileChangedData: () => (/* binding */ createCanvasIntensiveProfileChangedData)
/* harmony export */ });
/* harmony import */ var _Constant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Constant */ "./src/Constant.ts");


function createCanvasIntensiveProfileChangedData(params = {}) {
  return {
    fpsCount: _Constant__WEBPACK_IMPORTED_MODULE_0__.fpsCount.getFPSCount(),
    diffFreshInterval: _Constant__WEBPACK_IMPORTED_MODULE_0__.fpsCount.getDiffFreshInterval()
  };
}


/***/ }),

/***/ "./src/utils/CreateOperationProfile.ts":
/*!*********************************************!*\
  !*** ./src/utils/CreateOperationProfile.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createOperationProfileChangedData: () => (/* binding */ createOperationProfileChangedData)
/* harmony export */ });
/* harmony import */ var _Constant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Constant */ "./src/Constant.ts");

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};

function createOperationProfileChangedData(action, params = {}) {
  return __spreadValues({
    action,
    allDrawLayers: _Constant__WEBPACK_IMPORTED_MODULE_0__.drawLayerController.getAllDrawLayerResults()
  }, params);
}


/***/ }),

/***/ "./src/utils/FPSCount.ts":
/*!*******************************!*\
  !*** ./src/utils/FPSCount.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FPSCount: () => (/* binding */ FPSCount)
/* harmony export */ });

class FPSCount {
  constructor(freshInterval = 200) {
    this._fps = 0;
    this._lastFreshTimeStamp = 0;
    this._freshInterval = freshInterval >= 1e3 ? 1e3 : freshInterval <= 10 ? 10 : freshInterval;
    this._recordCount = 0;
    this._diffFreshInterval = 0;
  }
  getFPSCount() {
    return this._fps;
  }
  getDiffFreshInterval() {
    return this._diffFreshInterval >> 0;
  }
  calcFPSCount(nowTimeStamp) {
    const distTimeStamp = nowTimeStamp - this._lastFreshTimeStamp;
    if (distTimeStamp >= this._freshInterval) {
      this._fps = 1e3 / (distTimeStamp / this._recordCount) >> 0;
      this._recordCount = 0;
      this._lastFreshTimeStamp = nowTimeStamp;
      this._diffFreshInterval = distTimeStamp;
    }
    this._recordCount++;
  }
}


/***/ }),

/***/ "./src/utils/Helper.ts":
/*!*****************************!*\
  !*** ./src/utils/Helper.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Helper: () => (/* binding */ Helper)
/* harmony export */ });
/* harmony import */ var _config_ElementProfile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config/ElementProfile */ "./src/config/ElementProfile.ts");
/* harmony import */ var _objects_shapes_manager_primitive2d_D2CircleShapeManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../objects/shapes/manager/primitive2d/D2CircleShapeManager */ "./src/objects/shapes/manager/primitive2d/D2CircleShapeManager.ts");
/* harmony import */ var _objects_shapes_manager_DrawLayerShapeManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../objects/shapes/manager/DrawLayerShapeManager */ "./src/objects/shapes/manager/DrawLayerShapeManager.ts");
/* harmony import */ var _objects_shapes_manager_primitive2d_D2LineShapeManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../objects/shapes/manager/primitive2d/D2LineShapeManager */ "./src/objects/shapes/manager/primitive2d/D2LineShapeManager.ts");
/* harmony import */ var _engine_config_PlaneProfile__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../engine/config/PlaneProfile */ "./src/engine/config/PlaneProfile.ts");
/* harmony import */ var _objects_shapes_manager_primitive2d_D2ArcShapeManager__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../objects/shapes/manager/primitive2d/D2ArcShapeManager */ "./src/objects/shapes/manager/primitive2d/D2ArcShapeManager.ts");
/* harmony import */ var _objects_shapes_manager_primitive2d_D2TextShapeManager__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../objects/shapes/manager/primitive2d/D2TextShapeManager */ "./src/objects/shapes/manager/primitive2d/D2TextShapeManager.ts");








class Helper {
  /**
   * 获取画布内所有图元
   */
  static getAllElementShapes() {
    const targetShapes = [
      ..._objects_shapes_manager_primitive2d_D2LineShapeManager__WEBPACK_IMPORTED_MODULE_3__.D2LineShapeManager.getInstance().items.values(),
      ..._objects_shapes_manager_primitive2d_D2CircleShapeManager__WEBPACK_IMPORTED_MODULE_1__.D2CircleShapeManager.getInstance().items.values(),
      ..._objects_shapes_manager_primitive2d_D2ArcShapeManager__WEBPACK_IMPORTED_MODULE_5__.D2ArcShapeManager.getInstance().items.values(),
      ..._objects_shapes_manager_primitive2d_D2TextShapeManager__WEBPACK_IMPORTED_MODULE_6__.D2TextShapeManager.getInstance().items.values()
    ];
    return targetShapes;
  }
  /**
   * 获取画布内指定图元 ID 对应的图元
   */
  static getElementShapeItemById(elementItemId) {
    const allElementShapes = Helper.getAllElementShapes();
    for (let i = 0; i < allElementShapes.length; i++) {
      if (allElementShapes[i].elementItemId === elementItemId) {
        return allElementShapes[i];
      }
    }
    return null;
  }
  /**
   * 获取画布内指定 ShapeType 类型的图元
   */
  static getMarkedElementShapeItem(elementItemId, markShapeType) {
    if (markShapeType === _config_ElementProfile__WEBPACK_IMPORTED_MODULE_0__.ED2ElementType.D2Line) {
      return _objects_shapes_manager_primitive2d_D2LineShapeManager__WEBPACK_IMPORTED_MODULE_3__.D2LineShapeManager.getInstance().getItemById(elementItemId);
    } else if (markShapeType === _config_ElementProfile__WEBPACK_IMPORTED_MODULE_0__.ED2ElementType.D2Circle) {
      return _objects_shapes_manager_primitive2d_D2CircleShapeManager__WEBPACK_IMPORTED_MODULE_1__.D2CircleShapeManager.getInstance().getItemById(elementItemId);
    } else if (markShapeType === _config_ElementProfile__WEBPACK_IMPORTED_MODULE_0__.ED2ElementType.D2Arc) {
      return _objects_shapes_manager_primitive2d_D2ArcShapeManager__WEBPACK_IMPORTED_MODULE_5__.D2ArcShapeManager.getInstance().getItemById(elementItemId);
    }
    return null;
  }
  /**
   * 获取画布内所有绘制图层
   */
  static getAllDrawLayerShapes() {
    const allDrawLayers = Array.from(_objects_shapes_manager_DrawLayerShapeManager__WEBPACK_IMPORTED_MODULE_2__.DrawLayerShapeManager.getInstance().items.values());
    return allDrawLayers.filter((item) => {
      return item.model.layerItemType === _engine_config_PlaneProfile__WEBPACK_IMPORTED_MODULE_4__.EPlaneType.ContentPlane;
    });
  }
  /**
   * 删除画布内指定图元
   */
  static deleteElementShapeItem(elementItem) {
    if (elementItem.getType() === _config_ElementProfile__WEBPACK_IMPORTED_MODULE_0__.ED2ElementType.D2Line) {
      _objects_shapes_manager_primitive2d_D2LineShapeManager__WEBPACK_IMPORTED_MODULE_3__.D2LineShapeManager.getInstance().deleteShapeItem(elementItem.model.elementItemId);
      return;
    }
    if (elementItem.getType() === _config_ElementProfile__WEBPACK_IMPORTED_MODULE_0__.ED2ElementType.D2Circle) {
      _objects_shapes_manager_primitive2d_D2CircleShapeManager__WEBPACK_IMPORTED_MODULE_1__.D2CircleShapeManager.getInstance().deleteShapeItem(elementItem.model.elementItemId);
      return;
    }
    if (elementItem.getType() === _config_ElementProfile__WEBPACK_IMPORTED_MODULE_0__.ED2ElementType.D2Arc) {
      _objects_shapes_manager_primitive2d_D2ArcShapeManager__WEBPACK_IMPORTED_MODULE_5__.D2ArcShapeManager.getInstance().deleteShapeItem(elementItem.model.elementItemId);
      return;
    }
    if (elementItem.getType() === _config_ElementProfile__WEBPACK_IMPORTED_MODULE_0__.ED2ElementType.D2Text) {
      _objects_shapes_manager_primitive2d_D2TextShapeManager__WEBPACK_IMPORTED_MODULE_6__.D2TextShapeManager.getInstance().deleteShapeItem(elementItem.model.elementItemId);
      return;
    }
  }
  /**
   * 获取画布内指定 ShapeType 类型的图元
   */
  static deleteMarkedElementShapeItem(elementItemId, markShapeType) {
    if (markShapeType === _config_ElementProfile__WEBPACK_IMPORTED_MODULE_0__.ED2ElementType.D2Line) {
      _objects_shapes_manager_primitive2d_D2LineShapeManager__WEBPACK_IMPORTED_MODULE_3__.D2LineShapeManager.getInstance().deleteShapeItem(elementItemId);
      return;
    } else if (markShapeType === _config_ElementProfile__WEBPACK_IMPORTED_MODULE_0__.ED2ElementType.D2Circle) {
      _objects_shapes_manager_primitive2d_D2CircleShapeManager__WEBPACK_IMPORTED_MODULE_1__.D2CircleShapeManager.getInstance().deleteShapeItem(elementItemId);
      return;
    } else if (markShapeType === _config_ElementProfile__WEBPACK_IMPORTED_MODULE_0__.ED2ElementType.D2Arc) {
      _objects_shapes_manager_primitive2d_D2ArcShapeManager__WEBPACK_IMPORTED_MODULE_5__.D2ArcShapeManager.getInstance().deleteShapeItem(elementItemId);
      return;
    }
  }
  /**
   * 检测传入的图元 ID 是否合法
   */
  static checkDrawLayer(drawLayerItemId) {
    const allDrawLayers = Helper.getAllDrawLayerShapes();
    const checkResult = { code: 0, title: void 0 };
    for (let i = 0; i < allDrawLayers.length; i++) {
      if (allDrawLayers[i].model.layerItemId === drawLayerItemId) {
        checkResult.title = allDrawLayers[i].model.layerItemName;
        if (allDrawLayers[i].killed) {
          checkResult.code = -1;
          return checkResult;
        }
        return checkResult;
      }
    }
    checkResult.code = -1;
    return checkResult;
  }
}


/***/ }),

/***/ "./src/utils/RtreeItem.ts":
/*!********************************!*\
  !*** ./src/utils/RtreeItem.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   RtreeItem: () => (/* binding */ RtreeItem)
/* harmony export */ });
/* harmony import */ var _engine_common_geometry_bbox_BBox2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine/common/geometry/bbox/BBox2 */ "./src/engine/common/geometry/bbox/BBox2.ts");


class RtreeItem {
  static getSimpleRectFromBbox2(bbox2) {
    return {
      x: bbox2.minX,
      y: bbox2.minY,
      w: Math.abs(bbox2.maxX - bbox2.minX),
      h: Math.abs(bbox2.maxY - bbox2.minY)
    };
  }
  static getSimpleRectFromModelBbox2(item) {
    const bbox2 = item.model.bbox2;
    return {
      x: bbox2.minX,
      y: bbox2.minY,
      w: Math.abs(bbox2.maxX - bbox2.minX),
      h: Math.abs(bbox2.maxY - bbox2.minY)
    };
  }
  constructor(target) {
    this._target = target;
    this._bbox2 = target.model.bbox2;
  }
  get target() {
    return this._target;
  }
  get targetId() {
    return this._target.elementItemId;
  }
  getBBox2() {
    return this._bbox2;
  }
  updateBBox2(bbox2) {
    this._bbox2 = new _engine_common_geometry_bbox_BBox2__WEBPACK_IMPORTED_MODULE_0__.BBox2(bbox2.minX, bbox2.minY, bbox2.maxX, bbox2.maxY);
  }
}


/***/ }),

/***/ "./src/utils/SyncCanvasRect.ts":
/*!*************************************!*\
  !*** ./src/utils/SyncCanvasRect.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   syncCanvasRectByWindow: () => (/* binding */ syncCanvasRectByWindow)
/* harmony export */ });

function syncCanvasRectByWindow(canvasElement) {
  const windowInnerWidth = window.innerWidth;
  const windowInnerHeight = window.innerHeight;
  canvasElement.width = windowInnerWidth;
  canvasElement.height = windowInnerHeight;
}


/***/ }),

/***/ "./src/utils/Utils.ts":
/*!****************************!*\
  !*** ./src/utils/Utils.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arrayCopy: () => (/* binding */ arrayCopy),
/* harmony export */   getLimitRange: () => (/* binding */ getLimitRange),
/* harmony export */   isEqualOfArray: () => (/* binding */ isEqualOfArray),
/* harmony export */   nextFrameTick: () => (/* binding */ nextFrameTick),
/* harmony export */   throttle1: () => (/* binding */ throttle1),
/* harmony export */   throttle2: () => (/* binding */ throttle2),
/* harmony export */   toFixed: () => (/* binding */ toFixed),
/* harmony export */   updateDashedSegProfile: () => (/* binding */ updateDashedSegProfile)
/* harmony export */ });
/* harmony import */ var _engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine/config/PrimitiveProfile */ "./src/engine/config/PrimitiveProfile.ts");


function getLimitRange(inputNumber, min = 0.01, max = Number.MAX_SAFE_INTEGER) {
  if (inputNumber >= max) {
    return max;
  }
  if (inputNumber <= min) {
    return min;
  }
  return inputNumber;
}
function isEqualOfArray(a1, a2) {
  const len1 = a1.length;
  const len2 = a2.length;
  if (len1 !== len2) {
    return false;
  }
  for (let k1 = 0; k1 < len1; k1++) {
    for (let k2 = 0; k2 < len2; k2++) {
      if (a1[k1] !== a2[k2]) {
        return false;
      }
    }
  }
  return true;
}
function toFixed(number, digit = 2, fixedDecimal = true) {
  if (typeof number !== "number") {
    number = +number;
  }
  if (isNaN(number)) {
    throw new Error("nedd number or <number>string");
  }
  digit = digit | 0;
  if (digit <= 0 || !number && !fixedDecimal) {
    return String(Math.round(number));
  }
  const p = [1, 10, 100, 1e3, 1e4][digit] || Math.pow(10, digit) || 10;
  if (fixedDecimal) {
    const sign = number < 0 ? "-" : "";
    number = number < 0 ? -number : number;
    number = Math.round(number * p) + "";
    while (number.length <= digit) {
      number = "0" + number;
    }
    number = number.slice(0, -digit) + "." + number.slice(-digit);
    return sign + number;
  }
  return String(Math.round(number * p + 1e-10) / p);
}
function arrayCopy(sourceArray, sourceIndex, resultArray, resultIndex, copyLength) {
  if (sourceArray.length >= sourceIndex + copyLength && resultArray.length >= resultIndex + copyLength) {
    while (copyLength-- > 0) {
      resultArray[resultIndex++] = sourceArray[sourceIndex++];
    }
    return;
  }
  throw new Error("cannot read array out of range.");
}
function throttle1(fn, delay = 500) {
  let previous = 0;
  return function() {
    let now = +new Date();
    if (now - previous > delay) {
      fn.apply(this, arguments);
      previous = now;
    }
  };
}
function throttle2(fn, delay = 500) {
  let timer = null;
  return function() {
    if (!timer) {
      timer = window.setTimeout(() => {
        timer = null;
        fn.apply(this, arguments);
      }, delay);
    }
  };
}
function updateDashedSegProfile(lineCap, strokeWidth) {
  let segSize = 2;
  let gapSize = 1.5;
  if (lineCap === _engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_0__.ECanvas2DLineCap.ROUND) {
    segSize = 2;
    gapSize = strokeWidth / 2 * 5;
  }
  return {
    segSize,
    gapSize
  };
}
function nextFrameTick(callback, delay = 0) {
  window.setTimeout(() => {
    window.requestAnimationFrame((timeStamp) => {
      callback(timeStamp);
    });
  }, delay);
}


/***/ }),

/***/ "./src/view/ViewInit.ts":
/*!******************************!*\
  !*** ./src/view/ViewInit.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   viewInit: () => (/* binding */ viewInit)
/* harmony export */ });
/* harmony import */ var _config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config/CommandEnum */ "./src/config/CommandEnum.ts");
/* harmony import */ var _Constant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Constant */ "./src/Constant.ts");
/* harmony import */ var _controller_Launcher__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../controller/Launcher */ "./src/controller/Launcher.ts");
/* harmony import */ var _utils_CreateIntensiveCanvasProfile__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/CreateIntensiveCanvasProfile */ "./src/utils/CreateIntensiveCanvasProfile.ts");

var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};




function viewInit() {
  return __async(this, null, function* () {
    _Constant__WEBPACK_IMPORTED_MODULE_1__.environment.setLauncherHandler(new _controller_Launcher__WEBPACK_IMPORTED_MODULE_2__.Launcher(_Constant__WEBPACK_IMPORTED_MODULE_1__.environment.canvasElement));
    yield _Constant__WEBPACK_IMPORTED_MODULE_1__.environment.launcher.init();
    window.setTimeout(() => {
      render(performance.now());
    });
    function render(timestamp) {
      _Constant__WEBPACK_IMPORTED_MODULE_1__.environment.launcher.renderFrame(timestamp);
      _Constant__WEBPACK_IMPORTED_MODULE_1__.fpsCount.calcFPSCount(timestamp);
      window.requestAnimationFrame(render);
      _Constant__WEBPACK_IMPORTED_MODULE_1__.messageTool.messageBus.publish(_config_CommandEnum__WEBPACK_IMPORTED_MODULE_0__.EOutEventCommand.CANVASINTENSIVEPROFILE_CHANGED, (0,_utils_CreateIntensiveCanvasProfile__WEBPACK_IMPORTED_MODULE_3__.createCanvasIntensiveProfileChangedData)({}));
    }
  });
}


/***/ }),

/***/ "./src/view/manager/DrawLayerViewManager.ts":
/*!**************************************************!*\
  !*** ./src/view/manager/DrawLayerViewManager.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DrawLayerViewManager: () => (/* binding */ DrawLayerViewManager)
/* harmony export */ });
/* harmony import */ var _views_shapes_DrawLayerView__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../views/shapes/DrawLayerView */ "./src/view/views/shapes/DrawLayerView.ts");


class DrawLayerViewManager {
  static getInstance() {
    if (DrawLayerViewManager.instance === void 0) {
      DrawLayerViewManager.instance = new DrawLayerViewManager();
    }
    return DrawLayerViewManager.instance;
  }
  constructor() {
    this._items = /* @__PURE__ */ new Map();
  }
  get items() {
    return this._items;
  }
  set items(value) {
    this._items = value;
  }
  handleRefreshView(scene) {
    this.items.forEach((item) => {
      item.notify(scene);
    });
  }
  handleModify(scene, drawLayers) {
    for (let drawLayer of drawLayers) {
      if (drawLayer.killed) {
        this.deleteItem(drawLayer.model.layerItemId);
        continue;
      }
      const drawLayerItemType = drawLayer.getType();
      const drawLayerStatus = drawLayer.getStatus();
      const drawLayerItemData = drawLayer.toJSON();
      this.modifyItem(scene, drawLayer.model.layerItemId, drawLayerItemType, drawLayerStatus, drawLayerItemData);
    }
  }
  modifyItem(scene, drawLayerItemId, drawLayerItemType, drawLayerStatus, drawLayerItemData) {
    const drawLayerItem = this.items.get(drawLayerItemId);
    if (!drawLayerItem) {
      const drawLayerViewItem = new _views_shapes_DrawLayerView__WEBPACK_IMPORTED_MODULE_0__.DrawLayerView(
        scene,
        drawLayerItemId,
        drawLayerItemType,
        drawLayerItemData.layerItemName,
        drawLayerItemData.layerItemOpacity,
        drawLayerItemData.groupId
      );
      this.items.set(drawLayerViewItem.layerItemId, drawLayerViewItem);
      return;
    }
    drawLayerItem.modify(drawLayerItemData);
  }
  deleteItem(drawLayerItemId) {
    const drawLayerViewItem = this.items.get(drawLayerItemId);
    if (!drawLayerViewItem) {
      return;
    }
    drawLayerViewItem.delete();
    this.items.delete(drawLayerItemId);
  }
}


/***/ }),

/***/ "./src/view/manager/ShapeViewManager.ts":
/*!**********************************************!*\
  !*** ./src/view/manager/ShapeViewManager.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ShapeViewManager: () => (/* binding */ ShapeViewManager)
/* harmony export */ });
/* harmony import */ var _config_ElementProfile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../config/ElementProfile */ "./src/config/ElementProfile.ts");
/* harmony import */ var _views_shapes_primitive2d_D2ArcView__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../views/shapes/primitive2d/D2ArcView */ "./src/view/views/shapes/primitive2d/D2ArcView.ts");
/* harmony import */ var _views_shapes_primitive2d_D2CircleView__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../views/shapes/primitive2d/D2CircleView */ "./src/view/views/shapes/primitive2d/D2CircleView.ts");
/* harmony import */ var _views_shapes_primitive2d_D2LineView__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../views/shapes/primitive2d/D2LineView */ "./src/view/views/shapes/primitive2d/D2LineView.ts");
/* harmony import */ var _views_shapes_primitive2d_D2PointView__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../views/shapes/primitive2d/D2PointView */ "./src/view/views/shapes/primitive2d/D2PointView.ts");
/* harmony import */ var _views_shapes_primitive2d_D2TextView__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../views/shapes/primitive2d/D2TextView */ "./src/view/views/shapes/primitive2d/D2TextView.ts");







class ShapeViewManager {
  static getInstance() {
    if (ShapeViewManager.instance === void 0) {
      ShapeViewManager.instance = new ShapeViewManager();
    }
    return ShapeViewManager.instance;
  }
  constructor() {
    this._items = /* @__PURE__ */ new Map();
  }
  get items() {
    return this._items;
  }
  set items(value) {
    this._items = value;
  }
  handleModify(scene, elements) {
    for (let element of elements) {
      if (element.killed) {
        this.deleteItem(element.elementItemId);
        continue;
      }
      this.modifyItem(element);
    }
  }
  modifyItem(elementShapeObject) {
    const { elementItemId } = elementShapeObject;
    const elementType = elementShapeObject.getType();
    let elementItem = this.items.get(elementItemId);
    if (!elementItem) {
      let newElementItem = null;
      switch (elementType) {
        case _config_ElementProfile__WEBPACK_IMPORTED_MODULE_0__.ED2ElementType.D2Point: {
          newElementItem = new _views_shapes_primitive2d_D2PointView__WEBPACK_IMPORTED_MODULE_4__.D2PointView(elementShapeObject);
          break;
        }
        case _config_ElementProfile__WEBPACK_IMPORTED_MODULE_0__.ED2ElementType.D2AssistLine: {
          newElementItem = new _views_shapes_primitive2d_D2LineView__WEBPACK_IMPORTED_MODULE_3__.D2LineView(elementShapeObject);
          break;
        }
        case _config_ElementProfile__WEBPACK_IMPORTED_MODULE_0__.ED2ElementType.D2Line: {
          newElementItem = new _views_shapes_primitive2d_D2LineView__WEBPACK_IMPORTED_MODULE_3__.D2LineView(elementShapeObject);
          break;
        }
        case _config_ElementProfile__WEBPACK_IMPORTED_MODULE_0__.ED2ElementType.D2Circle: {
          newElementItem = new _views_shapes_primitive2d_D2CircleView__WEBPACK_IMPORTED_MODULE_2__.D2CircleView(elementShapeObject);
          break;
        }
        case _config_ElementProfile__WEBPACK_IMPORTED_MODULE_0__.ED2ElementType.D2Arc: {
          newElementItem = new _views_shapes_primitive2d_D2ArcView__WEBPACK_IMPORTED_MODULE_1__.D2ArcView(elementShapeObject);
          break;
        }
        case _config_ElementProfile__WEBPACK_IMPORTED_MODULE_0__.ED2ElementType.D2Text: {
          newElementItem = new _views_shapes_primitive2d_D2TextView__WEBPACK_IMPORTED_MODULE_5__.D2TextView(elementShapeObject);
          break;
        }
      }
      if (newElementItem) {
        this.items.set(elementShapeObject.elementItemId, newElementItem);
        elementItem = newElementItem;
      }
    }
    if (elementItem) {
      elementItem.modify(elementShapeObject);
    }
  }
  deleteItem(elementItemId) {
    const elementItem = this.items.get(elementItemId);
    if (!elementItem) {
      return;
    }
    elementItem.delete();
    this.items.delete(elementItemId);
  }
}


/***/ }),

/***/ "./src/view/views/shapes/DrawLayerView.ts":
/*!************************************************!*\
  !*** ./src/view/views/shapes/DrawLayerView.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DrawLayerView: () => (/* binding */ DrawLayerView)
/* harmony export */ });
/* harmony import */ var _DrawLayerViewPayloads__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DrawLayerViewPayloads */ "./src/view/views/shapes/DrawLayerViewPayloads.ts");
/* harmony import */ var _engine_common_utils_Context__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../engine/common/utils/Context */ "./src/engine/common/utils/Context.ts");
/* harmony import */ var _engine_config_PlaneProfile__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../engine/config/PlaneProfile */ "./src/engine/config/PlaneProfile.ts");




class DrawLayerView extends _engine_common_utils_Context__WEBPACK_IMPORTED_MODULE_1__.Context {
  constructor(scene, layerItemId, layerItemType, layerItemName, layerItemOpacity, groupId) {
    super(_engine_config_PlaneProfile__WEBPACK_IMPORTED_MODULE_2__.PLANE_INIT_STATUS);
    this._scene = scene;
    this._layerItemType = layerItemType;
    this._layerItemId = layerItemId;
    this._layerItemName = layerItemName;
    this._layerItemOpacity = layerItemOpacity;
    this._groupId = groupId;
    if (this._layerItemType === _engine_config_PlaneProfile__WEBPACK_IMPORTED_MODULE_2__.EPlaneType.ControlPlane) {
      this._plane = scene.addControlPlaneItem(layerItemId);
    } else if (this._layerItemType === _engine_config_PlaneProfile__WEBPACK_IMPORTED_MODULE_2__.EPlaneType.ContentPlane) {
      this._plane = scene.addContentPlaneItem(layerItemId);
    } else {
      throw new Error(`error layer type.`);
    }
    this._layerPayloads = new _DrawLayerViewPayloads__WEBPACK_IMPORTED_MODULE_0__.DrawLayerViewPayloads(this);
  }
  get plane() {
    return this._plane;
  }
  get scene() {
    return this._scene;
  }
  get layerItemType() {
    return this._layerItemType;
  }
  set layerItemType(value) {
    this._layerItemType = value;
  }
  get layerItemName() {
    return this._layerItemName;
  }
  set layerItemName(value) {
    this._layerItemName = value;
  }
  get layerItemOpacity() {
    return this._layerItemOpacity;
  }
  set layerItemOpacity(value) {
    this._layerItemOpacity = value;
  }
  get groupId() {
    return this._groupId;
  }
  set groupId(value) {
    this._groupId = value;
  }
  get layerItemId() {
    return this._layerItemId;
  }
  set layerItemId(value) {
    this._layerItemId = value;
  }
  get layerPayloads() {
    return this._layerPayloads;
  }
  set layerPayloads(value) {
    this._layerPayloads = value;
  }
  modify(layerItemData) {
    this.layerItemName = layerItemData.layerItemName;
    this.layerItemOpacity = layerItemData.layerItemOpacity;
    this.groupId = layerItemData.groupId;
  }
  delete() {
    if (this.layerItemType === _engine_config_PlaneProfile__WEBPACK_IMPORTED_MODULE_2__.EPlaneType.ControlPlane) {
      this._scene.deleteControlPlaneItem(this.plane.planeId);
    } else if (this.layerItemType === _engine_config_PlaneProfile__WEBPACK_IMPORTED_MODULE_2__.EPlaneType.ContentPlane) {
      this._scene.deleteContentPlaneItem(this.plane.planeId);
    }
  }
  notify(scene) {
    this.layerPayloads.notify();
  }
}


/***/ }),

/***/ "./src/view/views/shapes/DrawLayerViewPayloads.ts":
/*!********************************************************!*\
  !*** ./src/view/views/shapes/DrawLayerViewPayloads.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DrawLayerViewPayloads: () => (/* binding */ DrawLayerViewPayloads)
/* harmony export */ });
/* harmony import */ var _Constant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../Constant */ "./src/Constant.ts");


class DrawLayerViewPayloads {
  constructor(parent) {
    this._parent = parent;
    this._d2PointsProfileCreated = /* @__PURE__ */ new Map();
    this._d2PointsProfileUpdated = /* @__PURE__ */ new Map();
    this._d2PointsProfileDeleted = /* @__PURE__ */ new Set();
    this._d2LinesProfileCreated = /* @__PURE__ */ new Map();
    this._d2LinesProfileUpdated = /* @__PURE__ */ new Map();
    this._d2LinesProfileDeleted = /* @__PURE__ */ new Set();
    this._d2CirclesProfileCreated = /* @__PURE__ */ new Map();
    this._d2CirclesProfileUpdated = /* @__PURE__ */ new Map();
    this._d2CirclesProfileDeleted = /* @__PURE__ */ new Set();
    this._d2ArcsProfileCreated = /* @__PURE__ */ new Map();
    this._d2ArcsProfileUpdated = /* @__PURE__ */ new Map();
    this._d2ArcsProfileDeleted = /* @__PURE__ */ new Set();
    this._d2TextsProfileCreated = /* @__PURE__ */ new Map();
    this._d2TextsProfileUpdated = /* @__PURE__ */ new Map();
    this._d2TextsProfileDeleted = /* @__PURE__ */ new Set();
  }
  get parent() {
    return this._parent;
  }
  addD2PointProfileItem(data) {
    const id = _Constant__WEBPACK_IMPORTED_MODULE_0__.globalIdenManager.getComponentIden();
    this._d2PointsProfileCreated.set(id, data);
    return id;
  }
  updateD2PointProfileItem(id, data) {
    this._d2PointsProfileUpdated.set(id, data);
  }
  deletedD2PointProfileItem(id) {
    this._d2PointsProfileDeleted.add(id);
  }
  addD2LineProfileItem(data) {
    const id = _Constant__WEBPACK_IMPORTED_MODULE_0__.globalIdenManager.getComponentIden();
    this._d2LinesProfileCreated.set(id, data);
    return id;
  }
  updateD2LineProfileItem(id, data) {
    this._d2LinesProfileUpdated.set(id, data);
  }
  deletedD2LineProfileItem(id) {
    this._d2LinesProfileDeleted.add(id);
  }
  addD2CircleProfileItem(data) {
    const id = _Constant__WEBPACK_IMPORTED_MODULE_0__.globalIdenManager.getComponentIden();
    this._d2CirclesProfileCreated.set(id, data);
    return id;
  }
  updateD2CircleProfileItem(id, data) {
    this._d2CirclesProfileUpdated.set(id, data);
  }
  deletedD2CircleProfileItem(id) {
    this._d2CirclesProfileDeleted.add(id);
  }
  addD2ArcProfileItem(data) {
    const id = _Constant__WEBPACK_IMPORTED_MODULE_0__.globalIdenManager.getComponentIden();
    this._d2ArcsProfileCreated.set(id, data);
    return id;
  }
  updateD2ArcProfileItem(id, data) {
    this._d2ArcsProfileUpdated.set(id, data);
  }
  deletedD2ArcProfileItem(id) {
    this._d2ArcsProfileDeleted.add(id);
  }
  addD2TextProfileItem(data) {
    const id = _Constant__WEBPACK_IMPORTED_MODULE_0__.globalIdenManager.getComponentIden();
    this._d2TextsProfileCreated.set(id, data);
    return id;
  }
  updateD2TextProfileItem(id, data) {
    this._d2TextsProfileUpdated.set(id, data);
  }
  deletedD2TextProfileItem(id) {
    this._d2TextsProfileDeleted.add(id);
  }
  notify() {
    const plane = this.parent.plane;
    if (this._d2PointsProfileCreated.size > 0) {
      plane.addD2PointItems(this._d2PointsProfileCreated);
    }
    if (this._d2PointsProfileUpdated.size > 0) {
      plane.updateD2PointItems(this._d2PointsProfileUpdated);
    }
    if (this._d2PointsProfileDeleted.size > 0) {
      plane.deleteD2PointItems(this._d2PointsProfileDeleted);
    }
    if (this._d2LinesProfileCreated.size > 0) {
      plane.addD2LineItems(this._d2LinesProfileCreated);
    }
    if (this._d2LinesProfileUpdated.size > 0) {
      plane.updateD2LineItems(this._d2LinesProfileUpdated);
    }
    if (this._d2LinesProfileDeleted.size > 0) {
      plane.deleteD2LineItems(this._d2LinesProfileDeleted);
    }
    if (this._d2CirclesProfileCreated.size > 0) {
      plane.addD2CircleItems(this._d2CirclesProfileCreated);
    }
    if (this._d2CirclesProfileUpdated.size > 0) {
      plane.updateD2CircleItems(this._d2CirclesProfileUpdated);
    }
    if (this._d2CirclesProfileDeleted.size > 0) {
      plane.deleteD2CircleItems(this._d2CirclesProfileDeleted);
    }
    if (this._d2ArcsProfileCreated.size > 0) {
      plane.addD2ArcItems(this._d2ArcsProfileCreated);
    }
    if (this._d2ArcsProfileUpdated.size > 0) {
      plane.updateD2ArcItems(this._d2ArcsProfileUpdated);
    }
    if (this._d2ArcsProfileDeleted.size > 0) {
      plane.deleteD2ArcItems(this._d2ArcsProfileDeleted);
    }
    if (this._d2TextsProfileCreated.size > 0) {
      plane.addD2TextItems(this._d2TextsProfileCreated);
    }
    if (this._d2TextsProfileUpdated.size > 0) {
      plane.updateD2TextItems(this._d2TextsProfileUpdated);
    }
    if (this._d2TextsProfileDeleted.size > 0) {
      plane.deleteD2TextItems(this._d2TextsProfileDeleted);
    }
    this._d2PointsProfileCreated.clear();
    this._d2PointsProfileUpdated.clear();
    this._d2PointsProfileDeleted.clear();
    this._d2LinesProfileCreated.clear();
    this._d2LinesProfileUpdated.clear();
    this._d2LinesProfileDeleted.clear();
    this._d2CirclesProfileCreated.clear();
    this._d2CirclesProfileUpdated.clear();
    this._d2CirclesProfileDeleted.clear();
    this._d2ArcsProfileCreated.clear();
    this._d2ArcsProfileUpdated.clear();
    this._d2ArcsProfileDeleted.clear();
    this._d2TextsProfileCreated.clear();
    this._d2TextsProfileUpdated.clear();
    this._d2TextsProfileDeleted.clear();
  }
}


/***/ }),

/***/ "./src/view/views/shapes/primitive2d/D2ArcView.ts":
/*!********************************************************!*\
  !*** ./src/view/views/shapes/primitive2d/D2ArcView.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2ArcView: () => (/* binding */ D2ArcView)
/* harmony export */ });
/* harmony import */ var _config_ElementProfile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../config/ElementProfile */ "./src/config/ElementProfile.ts");
/* harmony import */ var _elementBase_ShapeElementViewBase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./elementBase/ShapeElementViewBase */ "./src/view/views/shapes/primitive2d/elementBase/ShapeElementViewBase.ts");
/* harmony import */ var _utils_Mask__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/Mask */ "./src/view/views/utils/Mask.ts");
/* harmony import */ var _config_DrawLayerProfile__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../config/DrawLayerProfile */ "./src/config/DrawLayerProfile.ts");
/* harmony import */ var _structure_primitive2d_BaseD2Arc__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../structure/primitive2d/BaseD2Arc */ "./src/view/views/structure/primitive2d/BaseD2Arc.ts");

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));





class D2ArcView extends _elementBase_ShapeElementViewBase__WEBPACK_IMPORTED_MODULE_1__.ShapeElementViewBase {
  constructor(shapeObject) {
    super(shapeObject);
    this.type = shapeObject.getType();
    this.layerItemId = shapeObject.model.layerItemId;
    this._mainPrimitive = null;
    this._maskPrimitive = null;
  }
  modify(shapeObjectItem) {
    const { status, fillColor, elementItemId } = shapeObjectItem;
    const { layerItemId } = shapeObjectItem.model;
    const elementItemType = shapeObjectItem.getType();
    this.status = status;
    if (!this._mainPrimitive) {
      this.delete();
      switch (elementItemType) {
        case _config_ElementProfile__WEBPACK_IMPORTED_MODULE_0__.ED2ElementType.D2Arc: {
          this._mainPrimitive = new _structure_primitive2d_BaseD2Arc__WEBPACK_IMPORTED_MODULE_4__.BaseD2Arc(layerItemId, this);
          break;
        }
      }
    }
    this._mainPrimitive.elementItemId = elementItemId;
    if (this.hightlight) {
      this.hightlighting();
    } else {
      this.normalview();
    }
    if (this._mainPrimitive) {
      this._mainPrimitive.modify(shapeObjectItem.toJSON());
    }
    if (this._maskPrimitive) {
      const maskElementItemData = __spreadProps(__spreadValues({}, shapeObjectItem.toJSON()), {
        layerItemId: this._maskPrimitive.layerItemId
      });
      maskElementItemData.strokeColorData = _utils_Mask__WEBPACK_IMPORTED_MODULE_2__.MaskColor.createStrokeColor().toRGBAJSON();
      maskElementItemData.fillColorData = _utils_Mask__WEBPACK_IMPORTED_MODULE_2__.MaskColor.createFillColor(fillColor.toRGBAJSON()).toRGBAJSON();
      maskElementItemData.elementItemId = this.updateMaskElementItemId(maskElementItemData.elementItemId);
      this._maskPrimitive.modify(maskElementItemData);
    }
  }
  delete() {
    this._mainPrimitive && this._mainPrimitive.delete();
    this._maskPrimitive && this._maskPrimitive.delete();
  }
  normalview() {
    this._maskPrimitive && this._maskPrimitive.delete();
    this._maskPrimitive = null;
  }
  hightlighting() {
    if (!this._maskPrimitive) {
      this._maskPrimitive = new _structure_primitive2d_BaseD2Arc__WEBPACK_IMPORTED_MODULE_4__.BaseD2Arc(_config_DrawLayerProfile__WEBPACK_IMPORTED_MODULE_3__.EDrawLayerCode.MaskLayer, this);
    }
  }
}


/***/ }),

/***/ "./src/view/views/shapes/primitive2d/D2CircleView.ts":
/*!***********************************************************!*\
  !*** ./src/view/views/shapes/primitive2d/D2CircleView.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2CircleView: () => (/* binding */ D2CircleView)
/* harmony export */ });
/* harmony import */ var _config_ElementProfile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../config/ElementProfile */ "./src/config/ElementProfile.ts");
/* harmony import */ var _elementBase_ShapeElementViewBase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./elementBase/ShapeElementViewBase */ "./src/view/views/shapes/primitive2d/elementBase/ShapeElementViewBase.ts");
/* harmony import */ var _structure_primitive2d_BaseD2Circle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../structure/primitive2d/BaseD2Circle */ "./src/view/views/structure/primitive2d/BaseD2Circle.ts");
/* harmony import */ var _utils_Mask__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/Mask */ "./src/view/views/utils/Mask.ts");
/* harmony import */ var _config_DrawLayerProfile__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../config/DrawLayerProfile */ "./src/config/DrawLayerProfile.ts");

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));





class D2CircleView extends _elementBase_ShapeElementViewBase__WEBPACK_IMPORTED_MODULE_1__.ShapeElementViewBase {
  constructor(shapeObject) {
    super(shapeObject);
    this.type = shapeObject.getType();
    this.layerItemId = shapeObject.model.layerItemId;
    this._mainPrimitive = null;
    this._maskPrimitive = null;
  }
  modify(shapeObjectItem) {
    const { status, fillColor, elementItemId } = shapeObjectItem;
    const { layerItemId } = shapeObjectItem.model;
    const elementItemType = shapeObjectItem.getType();
    this.status = status;
    if (!this._mainPrimitive) {
      this.delete();
      switch (elementItemType) {
        case _config_ElementProfile__WEBPACK_IMPORTED_MODULE_0__.ED2ElementType.D2Circle: {
          this._mainPrimitive = new _structure_primitive2d_BaseD2Circle__WEBPACK_IMPORTED_MODULE_2__.BaseD2Circle(layerItemId, this);
          break;
        }
      }
    }
    this._mainPrimitive.elementItemId = elementItemId;
    if (this.hightlight) {
      this.hightlighting();
    } else {
      this.normalview();
    }
    if (this._mainPrimitive) {
      this._mainPrimitive.modify(shapeObjectItem.toJSON());
    }
    if (this._maskPrimitive) {
      const maskElementItemData = __spreadProps(__spreadValues({}, shapeObjectItem.toJSON()), {
        layerItemId: this._maskPrimitive.layerItemId
      });
      maskElementItemData.strokeColorData = _utils_Mask__WEBPACK_IMPORTED_MODULE_3__.MaskColor.createStrokeColor().toRGBAJSON();
      maskElementItemData.fillColorData = _utils_Mask__WEBPACK_IMPORTED_MODULE_3__.MaskColor.createFillColor(fillColor.toRGBAJSON()).toRGBAJSON();
      maskElementItemData.elementItemId = this.updateMaskElementItemId(maskElementItemData.elementItemId);
      this._maskPrimitive.modify(maskElementItemData);
    }
  }
  delete() {
    this._mainPrimitive && this._mainPrimitive.delete();
    this._maskPrimitive && this._maskPrimitive.delete();
  }
  normalview() {
    this._maskPrimitive && this._maskPrimitive.delete();
    this._maskPrimitive = null;
  }
  hightlighting() {
    if (!this._maskPrimitive) {
      this._maskPrimitive = new _structure_primitive2d_BaseD2Circle__WEBPACK_IMPORTED_MODULE_2__.BaseD2Circle(_config_DrawLayerProfile__WEBPACK_IMPORTED_MODULE_4__.EDrawLayerCode.MaskLayer, this);
    }
  }
}


/***/ }),

/***/ "./src/view/views/shapes/primitive2d/D2LineView.ts":
/*!*********************************************************!*\
  !*** ./src/view/views/shapes/primitive2d/D2LineView.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2LineView: () => (/* binding */ D2LineView)
/* harmony export */ });
/* harmony import */ var _config_ElementProfile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../config/ElementProfile */ "./src/config/ElementProfile.ts");
/* harmony import */ var _elementBase_ShapeElementViewBase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./elementBase/ShapeElementViewBase */ "./src/view/views/shapes/primitive2d/elementBase/ShapeElementViewBase.ts");
/* harmony import */ var _structure_primitive2d_BaseD2Line__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../structure/primitive2d/BaseD2Line */ "./src/view/views/structure/primitive2d/BaseD2Line.ts");
/* harmony import */ var _utils_Mask__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/Mask */ "./src/view/views/utils/Mask.ts");
/* harmony import */ var _config_DrawLayerProfile__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../config/DrawLayerProfile */ "./src/config/DrawLayerProfile.ts");

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));





class D2LineView extends _elementBase_ShapeElementViewBase__WEBPACK_IMPORTED_MODULE_1__.ShapeElementViewBase {
  constructor(shapeObject) {
    super(shapeObject);
    this.type = shapeObject.getType();
    this.layerItemId = shapeObject.model.layerItemId;
    this._mainPrimitive = null;
    this._maskPrimitive = null;
  }
  modify(shapeObjectItem) {
    const { status, elementItemId } = shapeObjectItem;
    const { layerItemId } = shapeObjectItem.model;
    const elementItemType = shapeObjectItem.getType();
    this.layerItemId = layerItemId;
    this.status = status;
    if (!this._mainPrimitive) {
      this.delete();
      switch (elementItemType) {
        case _config_ElementProfile__WEBPACK_IMPORTED_MODULE_0__.ED2ElementType.D2Line: {
          this._mainPrimitive = new _structure_primitive2d_BaseD2Line__WEBPACK_IMPORTED_MODULE_2__.BaseD2Line(layerItemId, this);
          break;
        }
        case _config_ElementProfile__WEBPACK_IMPORTED_MODULE_0__.ED2ElementType.D2AssistLine: {
          this._mainPrimitive = new _structure_primitive2d_BaseD2Line__WEBPACK_IMPORTED_MODULE_2__.BaseD2Line(_config_DrawLayerProfile__WEBPACK_IMPORTED_MODULE_4__.EDrawLayerCode.MaskLayer, this);
          break;
        }
      }
    }
    this._mainPrimitive.elementItemId = elementItemId;
    if (this.hightlight) {
      this.hightlighting();
    } else {
      this.normalview();
    }
    if (this._mainPrimitive) {
      this._mainPrimitive.modify(shapeObjectItem.toJSON());
    }
    if (this._maskPrimitive) {
      const maskElementItemData = __spreadProps(__spreadValues({}, shapeObjectItem.toJSON()), {
        layerItemId: this._maskPrimitive.layerItemId
      });
      maskElementItemData.elementItemId = this.updateMaskElementItemId(maskElementItemData.elementItemId);
      maskElementItemData.strokeColorData = _utils_Mask__WEBPACK_IMPORTED_MODULE_3__.MaskColor.createStrokeColor().toRGBAJSON();
      this._maskPrimitive.modify(maskElementItemData);
    }
  }
  delete() {
    this._mainPrimitive && this._mainPrimitive.delete();
    this._maskPrimitive && this._maskPrimitive.delete();
  }
  normalview() {
    this._maskPrimitive && this._maskPrimitive.delete();
    this._maskPrimitive = null;
  }
  hightlighting() {
    if (!this._maskPrimitive) {
      this._maskPrimitive = new _structure_primitive2d_BaseD2Line__WEBPACK_IMPORTED_MODULE_2__.BaseD2Line(_config_DrawLayerProfile__WEBPACK_IMPORTED_MODULE_4__.EDrawLayerCode.MaskLayer, this);
    }
  }
}


/***/ }),

/***/ "./src/view/views/shapes/primitive2d/D2PointView.ts":
/*!**********************************************************!*\
  !*** ./src/view/views/shapes/primitive2d/D2PointView.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2PointView: () => (/* binding */ D2PointView)
/* harmony export */ });
/* harmony import */ var _config_ElementProfile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../config/ElementProfile */ "./src/config/ElementProfile.ts");
/* harmony import */ var _elementBase_ShapeElementViewBase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./elementBase/ShapeElementViewBase */ "./src/view/views/shapes/primitive2d/elementBase/ShapeElementViewBase.ts");
/* harmony import */ var _structure_primitive2d_BaseD2Circle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../structure/primitive2d/BaseD2Circle */ "./src/view/views/structure/primitive2d/BaseD2Circle.ts");
/* harmony import */ var _utils_Mask__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/Mask */ "./src/view/views/utils/Mask.ts");
/* harmony import */ var _config_DrawLayerProfile__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../config/DrawLayerProfile */ "./src/config/DrawLayerProfile.ts");
/* harmony import */ var _structure_primitive2d_BaseD2Point__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../structure/primitive2d/BaseD2Point */ "./src/view/views/structure/primitive2d/BaseD2Point.ts");

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));






class D2PointView extends _elementBase_ShapeElementViewBase__WEBPACK_IMPORTED_MODULE_1__.ShapeElementViewBase {
  constructor(shapeObject) {
    super(shapeObject);
    this.type = shapeObject.getType();
    this.layerItemId = shapeObject.model.layerItemId;
    this._mainPrimitive = null;
    this._maskPrimitive = null;
  }
  modify(shapeObjectItem) {
    const { status, elementItemId } = shapeObjectItem;
    const { layerItemId } = shapeObjectItem.model;
    const elementItemType = shapeObjectItem.getType();
    this.layerItemId = layerItemId;
    this.status = status;
    if (!this._mainPrimitive) {
      this.delete();
      switch (elementItemType) {
        case _config_ElementProfile__WEBPACK_IMPORTED_MODULE_0__.ED2ElementType.D2Point: {
          this._mainPrimitive = new _structure_primitive2d_BaseD2Point__WEBPACK_IMPORTED_MODULE_5__.BaseD2Point(layerItemId, this);
          break;
        }
      }
    }
    this._mainPrimitive.elementItemId = elementItemId;
    if (this.hightlight) {
      this.hightlighting();
    } else {
      this.normalview();
    }
    if (this._mainPrimitive) {
      this._mainPrimitive.modify(shapeObjectItem.toJSON());
    }
    if (this._maskPrimitive) {
      const maskElementItemData = __spreadProps(__spreadValues({}, shapeObjectItem.toJSON()), {
        layerItemId: this._maskPrimitive.layerItemId
      });
      maskElementItemData.strokeColorData = _utils_Mask__WEBPACK_IMPORTED_MODULE_3__.MaskColor.createStrokeColor().toRGBAJSON();
      maskElementItemData.elementItemId = this.updateMaskElementItemId(maskElementItemData.elementItemId);
      this._maskPrimitive.modify(maskElementItemData);
    }
  }
  delete() {
    this._mainPrimitive && this._mainPrimitive.delete();
    this._maskPrimitive && this._maskPrimitive.delete();
  }
  normalview() {
    this._maskPrimitive && this._maskPrimitive.delete();
    this._maskPrimitive = null;
  }
  hightlighting() {
    if (!this._maskPrimitive) {
      this._maskPrimitive = new _structure_primitive2d_BaseD2Circle__WEBPACK_IMPORTED_MODULE_2__.BaseD2Circle(_config_DrawLayerProfile__WEBPACK_IMPORTED_MODULE_4__.EDrawLayerCode.MaskLayer, this);
    }
  }
}


/***/ }),

/***/ "./src/view/views/shapes/primitive2d/D2TextView.ts":
/*!*********************************************************!*\
  !*** ./src/view/views/shapes/primitive2d/D2TextView.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D2TextView: () => (/* binding */ D2TextView)
/* harmony export */ });
/* harmony import */ var _config_ElementProfile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../config/ElementProfile */ "./src/config/ElementProfile.ts");
/* harmony import */ var _elementBase_ShapeElementViewBase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./elementBase/ShapeElementViewBase */ "./src/view/views/shapes/primitive2d/elementBase/ShapeElementViewBase.ts");
/* harmony import */ var _utils_Mask__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/Mask */ "./src/view/views/utils/Mask.ts");
/* harmony import */ var _engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../engine/config/PrimitiveProfile */ "./src/engine/config/PrimitiveProfile.ts");
/* harmony import */ var _structure_primitive2d_BaseD2Text__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../structure/primitive2d/BaseD2Text */ "./src/view/views/structure/primitive2d/BaseD2Text.ts");
/* harmony import */ var _structure_primitive2d_BaseD2Line__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../structure/primitive2d/BaseD2Line */ "./src/view/views/structure/primitive2d/BaseD2Line.ts");
/* harmony import */ var _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../engine/common/geometry/vector/Vector2 */ "./src/engine/common/geometry/vector/Vector2.ts");
/* harmony import */ var _config_DrawLayerProfile__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../config/DrawLayerProfile */ "./src/config/DrawLayerProfile.ts");









class D2TextView extends _elementBase_ShapeElementViewBase__WEBPACK_IMPORTED_MODULE_1__.ShapeElementViewBase {
  constructor(shapeObject) {
    super(shapeObject);
    this.type = shapeObject.getType();
    this.layerItemId = shapeObject.model.layerItemId;
    this._mainPrimitive = null;
    this._bgPrimitive = null;
    this._maskPrimitive = null;
  }
  modify(shapeObjectItem) {
    const { status, elementItemId } = shapeObjectItem;
    const { layerItemId } = shapeObjectItem.model;
    const elementItemType = shapeObjectItem.getType();
    this.layerItemId = layerItemId;
    this.status = status;
    if (!this._mainPrimitive) {
      this.delete();
      switch (elementItemType) {
        case _config_ElementProfile__WEBPACK_IMPORTED_MODULE_0__.ED2ElementType.D2Text: {
          this._mainPrimitive = new _structure_primitive2d_BaseD2Text__WEBPACK_IMPORTED_MODULE_4__.BaseD2Text(layerItemId, this);
          this._bgPrimitive = new _structure_primitive2d_BaseD2Line__WEBPACK_IMPORTED_MODULE_5__.BaseD2Line(layerItemId, this);
          break;
        }
      }
    }
    this._mainPrimitive.elementItemId = elementItemId;
    if (this.hightlight) {
      this.hightlighting();
    } else {
      this.normalview();
    }
    const textShapeItemJson = shapeObjectItem.toJSON();
    if (this._mainPrimitive) {
      this._mainPrimitive.modify(textShapeItemJson);
    }
    if (this._bgPrimitive && textShapeItemJson.bbox2 && textShapeItemJson.bgColorData) {
      this._bgPrimitive.modify({
        status: textShapeItemJson.status,
        layerItemId: textShapeItemJson.layerItemId,
        elementItemId: textShapeItemJson.elementItemId,
        elementItemName: _utils_Mask__WEBPACK_IMPORTED_MODULE_2__.TextBackgroud.createElementItemId(textShapeItemJson.elementItemName),
        startPoint: new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_6__.Vector2(
          textShapeItemJson.bbox2.minX - textShapeItemJson.paddingSurrounded.left,
          textShapeItemJson.bbox2.minY + (textShapeItemJson.bbox2.maxY - textShapeItemJson.bbox2.minY) / 2
        ).toJSON(),
        endPoint: new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_6__.Vector2(
          textShapeItemJson.bbox2.maxX + textShapeItemJson.paddingSurrounded.right,
          textShapeItemJson.bbox2.minY + (textShapeItemJson.bbox2.maxY - textShapeItemJson.bbox2.minY) / 2
        ).toJSON(),
        strokeWidth: textShapeItemJson.bbox2.maxY - textShapeItemJson.bbox2.minY + textShapeItemJson.paddingSurrounded.top + textShapeItemJson.paddingSurrounded.bottom,
        strokeColorData: textShapeItemJson.bgColorData,
        alpha: 1,
        lineCap: _engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_3__.ECanvas2DLineCap.SQUARE,
        isSolid: true,
        segSize: 0,
        gapSize: 0,
        isFixedStrokeWidth: false
      });
    }
    if (this._maskPrimitive) {
      this._maskPrimitive.modify({
        status: textShapeItemJson.status,
        layerItemId: this._maskPrimitive.layerItemId,
        elementItemId: this.updateMaskElementItemId(textShapeItemJson.elementItemId),
        elementItemName: _utils_Mask__WEBPACK_IMPORTED_MODULE_2__.TextBackgroud.createElementItemId(textShapeItemJson.elementItemName),
        startPoint: new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_6__.Vector2(
          textShapeItemJson.bbox2.minX - textShapeItemJson.paddingSurrounded.left,
          textShapeItemJson.bbox2.minY + (textShapeItemJson.bbox2.maxY - textShapeItemJson.bbox2.minY) / 2
        ).toJSON(),
        endPoint: new _engine_common_geometry_vector_Vector2__WEBPACK_IMPORTED_MODULE_6__.Vector2(
          textShapeItemJson.bbox2.maxX + textShapeItemJson.paddingSurrounded.right,
          textShapeItemJson.bbox2.minY + (textShapeItemJson.bbox2.maxY - textShapeItemJson.bbox2.minY) / 2
        ).toJSON(),
        strokeWidth: textShapeItemJson.bbox2.maxY - textShapeItemJson.bbox2.minY + textShapeItemJson.paddingSurrounded.top + textShapeItemJson.paddingSurrounded.bottom,
        strokeColorData: _utils_Mask__WEBPACK_IMPORTED_MODULE_2__.MaskColor.createStrokeColor().toRGBAJSON(),
        alpha: 0.35,
        lineCap: _engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_3__.ECanvas2DLineCap.SQUARE,
        isSolid: true,
        segSize: 0,
        gapSize: 0,
        isFixedStrokeWidth: false
      });
    }
  }
  delete() {
    this._mainPrimitive && this._mainPrimitive.delete();
    this._bgPrimitive && this._bgPrimitive.delete();
    this._maskPrimitive && this._maskPrimitive.delete();
  }
  normalview() {
    this._maskPrimitive && this._maskPrimitive.delete();
    this._maskPrimitive = null;
  }
  hightlighting() {
    if (!this._maskPrimitive) {
      this._maskPrimitive = new _structure_primitive2d_BaseD2Line__WEBPACK_IMPORTED_MODULE_5__.BaseD2Line(_config_DrawLayerProfile__WEBPACK_IMPORTED_MODULE_7__.EDrawLayerCode.MaskLayer, this);
    }
  }
}


/***/ }),

/***/ "./src/view/views/shapes/primitive2d/elementBase/ShapeElementViewBase.ts":
/*!*******************************************************************************!*\
  !*** ./src/view/views/shapes/primitive2d/elementBase/ShapeElementViewBase.ts ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ShapeElementViewBase: () => (/* binding */ ShapeElementViewBase)
/* harmony export */ });
/* harmony import */ var _engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../engine/config/PrimitiveProfile */ "./src/engine/config/PrimitiveProfile.ts");
/* harmony import */ var _engine_common_utils_Context__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../engine/common/utils/Context */ "./src/engine/common/utils/Context.ts");
/* harmony import */ var _manager_DrawLayerViewManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../manager/DrawLayerViewManager */ "./src/view/manager/DrawLayerViewManager.ts");




class ShapeElementViewBase extends _engine_common_utils_Context__WEBPACK_IMPORTED_MODULE_1__.Context {
  constructor(shapeObjectItem) {
    super(_engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_0__.PRIMITIVE_INIT_STATUS);
    this._shapeObjectItem = shapeObjectItem;
    this._elementItemId = shapeObjectItem.elementItemId;
  }
  get type() {
    return this._type;
  }
  set type(value) {
    this._type = value;
  }
  get layerItemId() {
    return this._layerItemId;
  }
  set layerItemId(value) {
    this._layerItemId = value;
  }
  get elementItemId() {
    return this._elementItemId;
  }
  get shapeObjectItem() {
    return this._shapeObjectItem;
  }
  getDrawLayerViewItem(layerItemId) {
    return _manager_DrawLayerViewManager__WEBPACK_IMPORTED_MODULE_2__.DrawLayerViewManager.getInstance().items.get(layerItemId);
  }
  updateMaskElementItemId(elementItemId) {
    return elementItemId + "_mask";
  }
  get visible() {
    return this.isStatusMatch(_engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_0__.EPrimitiveStatus.VISIBLE);
  }
  set visible(value) {
    this.setStatusMatch(_engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_0__.EPrimitiveStatus.VISIBLE, value);
  }
  get hightlight() {
    return this.isStatusMatch(_engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_0__.EPrimitiveStatus.HIGHTLIGHT);
  }
  set hightlight(value) {
    this.setStatusMatch(_engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_0__.EPrimitiveStatus.HIGHTLIGHT, value);
  }
  get locked() {
    return this.isStatusMatch(_engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_0__.EPrimitiveStatus.LOCKED);
  }
  set locked(value) {
    this.setStatusMatch(_engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_0__.EPrimitiveStatus.LOCKED, value);
  }
  get killed() {
    return this.isStatusMatch(_engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_0__.EPrimitiveStatus.KILLED);
  }
  set killed(value) {
    this.setStatusMatch(_engine_config_PrimitiveProfile__WEBPACK_IMPORTED_MODULE_0__.EPrimitiveStatus.KILLED, value);
  }
}


/***/ }),

/***/ "./src/view/views/structure/primitive2d/BaseD2Arc.ts":
/*!***********************************************************!*\
  !*** ./src/view/views/structure/primitive2d/BaseD2Arc.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BaseD2Arc: () => (/* binding */ BaseD2Arc)
/* harmony export */ });
/* harmony import */ var _elementBase_StructureItemBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./elementBase/StructureItemBase */ "./src/view/views/structure/primitive2d/elementBase/StructureItemBase.ts");


class BaseD2Arc extends _elementBase_StructureItemBase__WEBPACK_IMPORTED_MODULE_0__.StructureItemBase {
  constructor(layerItemId, parent) {
    super(layerItemId);
    this.parent = parent;
  }
  modify(data) {
    const drawLayerViewItem = this.getDrawLayerViewItem(this.layerItemId);
    if (this.belongId === null) {
      this.belongId = drawLayerViewItem.layerPayloads.addD2ArcProfileItem(data);
    } else {
      drawLayerViewItem.layerPayloads.updateD2ArcProfileItem(this.belongId, data);
    }
  }
  delete() {
    const drawLayerViewItem = this.getDrawLayerViewItem(this.layerItemId);
    drawLayerViewItem.layerPayloads.deletedD2ArcProfileItem(this.belongId);
  }
}


/***/ }),

/***/ "./src/view/views/structure/primitive2d/BaseD2Circle.ts":
/*!**************************************************************!*\
  !*** ./src/view/views/structure/primitive2d/BaseD2Circle.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BaseD2Circle: () => (/* binding */ BaseD2Circle)
/* harmony export */ });
/* harmony import */ var _elementBase_StructureItemBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./elementBase/StructureItemBase */ "./src/view/views/structure/primitive2d/elementBase/StructureItemBase.ts");


class BaseD2Circle extends _elementBase_StructureItemBase__WEBPACK_IMPORTED_MODULE_0__.StructureItemBase {
  constructor(layerItemId, parent) {
    super(layerItemId);
    this.parent = parent;
  }
  modify(data) {
    const drawLayerViewItem = this.getDrawLayerViewItem(this.layerItemId);
    if (this.belongId === null) {
      this.belongId = drawLayerViewItem.layerPayloads.addD2CircleProfileItem(data);
    } else {
      drawLayerViewItem.layerPayloads.updateD2CircleProfileItem(this.belongId, data);
    }
  }
  delete() {
    const drawLayerViewItem = this.getDrawLayerViewItem(this.layerItemId);
    drawLayerViewItem.layerPayloads.deletedD2CircleProfileItem(this.belongId);
  }
}


/***/ }),

/***/ "./src/view/views/structure/primitive2d/BaseD2Line.ts":
/*!************************************************************!*\
  !*** ./src/view/views/structure/primitive2d/BaseD2Line.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BaseD2Line: () => (/* binding */ BaseD2Line)
/* harmony export */ });
/* harmony import */ var _elementBase_StructureItemBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./elementBase/StructureItemBase */ "./src/view/views/structure/primitive2d/elementBase/StructureItemBase.ts");


class BaseD2Line extends _elementBase_StructureItemBase__WEBPACK_IMPORTED_MODULE_0__.StructureItemBase {
  constructor(layerItemId, parent) {
    super(layerItemId);
    this.parent = parent;
  }
  modify(data) {
    const drawLayerViewItem = this.getDrawLayerViewItem(this.layerItemId);
    if (this.belongId === null) {
      this.belongId = drawLayerViewItem.layerPayloads.addD2LineProfileItem(data);
    } else {
      drawLayerViewItem.layerPayloads.updateD2LineProfileItem(this.belongId, data);
    }
  }
  delete() {
    const drawLayerViewItem = this.getDrawLayerViewItem(this.layerItemId);
    drawLayerViewItem.layerPayloads.deletedD2LineProfileItem(this.belongId);
  }
}


/***/ }),

/***/ "./src/view/views/structure/primitive2d/BaseD2Point.ts":
/*!*************************************************************!*\
  !*** ./src/view/views/structure/primitive2d/BaseD2Point.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BaseD2Point: () => (/* binding */ BaseD2Point)
/* harmony export */ });
/* harmony import */ var _elementBase_StructureItemBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./elementBase/StructureItemBase */ "./src/view/views/structure/primitive2d/elementBase/StructureItemBase.ts");


class BaseD2Point extends _elementBase_StructureItemBase__WEBPACK_IMPORTED_MODULE_0__.StructureItemBase {
  constructor(layerItemId, parent) {
    super(layerItemId);
    this.parent = parent;
  }
  modify(data) {
    const drawLayerViewItem = this.getDrawLayerViewItem(this.layerItemId);
    if (this.belongId === null) {
      this.belongId = drawLayerViewItem.layerPayloads.addD2PointProfileItem(data);
    } else {
      drawLayerViewItem.layerPayloads.updateD2PointProfileItem(this.belongId, data);
    }
  }
  delete() {
    const drawLayerViewItem = this.getDrawLayerViewItem(this.layerItemId);
    drawLayerViewItem.layerPayloads.deletedD2PointProfileItem(this.belongId);
  }
}


/***/ }),

/***/ "./src/view/views/structure/primitive2d/BaseD2Text.ts":
/*!************************************************************!*\
  !*** ./src/view/views/structure/primitive2d/BaseD2Text.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BaseD2Text: () => (/* binding */ BaseD2Text)
/* harmony export */ });
/* harmony import */ var _elementBase_StructureItemBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./elementBase/StructureItemBase */ "./src/view/views/structure/primitive2d/elementBase/StructureItemBase.ts");


class BaseD2Text extends _elementBase_StructureItemBase__WEBPACK_IMPORTED_MODULE_0__.StructureItemBase {
  constructor(layerItemId, parent) {
    super(layerItemId);
    this.parent = parent;
  }
  modify(data) {
    const drawLayerViewItem = this.getDrawLayerViewItem(this.layerItemId);
    if (this.belongId === null) {
      this.belongId = drawLayerViewItem.layerPayloads.addD2TextProfileItem(data);
    } else {
      drawLayerViewItem.layerPayloads.updateD2TextProfileItem(this.belongId, data);
    }
  }
  delete() {
    const drawLayerViewItem = this.getDrawLayerViewItem(this.layerItemId);
    drawLayerViewItem.layerPayloads.deletedD2TextProfileItem(this.belongId);
  }
}


/***/ }),

/***/ "./src/view/views/structure/primitive2d/elementBase/StructureBase.ts":
/*!***************************************************************************!*\
  !*** ./src/view/views/structure/primitive2d/elementBase/StructureBase.ts ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   StructureBase: () => (/* binding */ StructureBase)
/* harmony export */ });

class StructureBase {
  constructor() {
  }
}


/***/ }),

/***/ "./src/view/views/structure/primitive2d/elementBase/StructureItemBase.ts":
/*!*******************************************************************************!*\
  !*** ./src/view/views/structure/primitive2d/elementBase/StructureItemBase.ts ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   StructureItemBase: () => (/* binding */ StructureItemBase)
/* harmony export */ });
/* harmony import */ var _manager_DrawLayerViewManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../manager/DrawLayerViewManager */ "./src/view/manager/DrawLayerViewManager.ts");
/* harmony import */ var _StructureBase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./StructureBase */ "./src/view/views/structure/primitive2d/elementBase/StructureBase.ts");



class StructureItemBase extends _StructureBase__WEBPACK_IMPORTED_MODULE_1__.StructureBase {
  constructor(layerItemId) {
    super();
    this._elementItemId = null;
    this._layerItemId = layerItemId;
    this._belongId = null;
  }
  get elementItemId() {
    return this._elementItemId;
  }
  set elementItemId(value) {
    this._elementItemId = value;
  }
  get belongId() {
    return this._belongId;
  }
  set belongId(value) {
    this._belongId = value;
  }
  get layerItemId() {
    return this._layerItemId;
  }
  set layerItemId(value) {
    this._layerItemId = value;
  }
  getDrawLayerViewItem(layerItemId) {
    return _manager_DrawLayerViewManager__WEBPACK_IMPORTED_MODULE_0__.DrawLayerViewManager.getInstance().items.get(layerItemId);
  }
}


/***/ }),

/***/ "./src/view/views/utils/Mask.ts":
/*!**************************************!*\
  !*** ./src/view/views/utils/Mask.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MaskColor: () => (/* binding */ MaskColor),
/* harmony export */   TextBackgroud: () => (/* binding */ TextBackgroud)
/* harmony export */ });
/* harmony import */ var _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../engine/common/utils/Color */ "./src/engine/common/utils/Color.ts");


class MaskColor {
  static createStrokeColor() {
    return new _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_0__.Color(1, 1, 1, 0.65);
  }
  static createFillColor(fillColor) {
    return new _engine_common_utils_Color__WEBPACK_IMPORTED_MODULE_0__.Color(1, 1, 1, fillColor.a > 0 ? 0.75 : 0);
  }
}
class TextBackgroud {
  static createElementItemId(d2textShapeItemId) {
    return "bg" + d2textShapeItemId;
  }
}


/***/ }),

/***/ "../utils-section/messageBus/BaseMessageBridge.ts":
/*!********************************************************!*\
  !*** ../utils-section/messageBus/BaseMessageBridge.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BaseMessageBridge: () => (/* binding */ BaseMessageBridge)
/* harmony export */ });
/* harmony import */ var _Config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Config */ "../utils-section/messageBus/Config.ts");

var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

class BaseMessageBridge {
  constructor(bus) {
    this._bus = bus;
  }
  processRemoteMessage(messageItem, source) {
    const { topic, type, data } = messageItem;
    switch (type) {
      case _Config__WEBPACK_IMPORTED_MODULE_0__.EMessageType.PULL: {
        this._bus.pull(topic, (data2) => {
          this.push(topic, data2, source);
        });
        break;
      }
      case _Config__WEBPACK_IMPORTED_MODULE_0__.EMessageType.SUBSCRIBE: {
        this._bus.subscribe(topic, (data2) => {
          this.publish(topic, data2, source);
        });
        break;
      }
      case _Config__WEBPACK_IMPORTED_MODULE_0__.EMessageType.PUBLISH: {
        this._bus.publish(topic, data, this, source);
        break;
      }
      case _Config__WEBPACK_IMPORTED_MODULE_0__.EMessageType.PUSH: {
        this._bus.push(topic, data, this, source);
        break;
      }
    }
  }
  asyncRequest(topic, data, target) {
    return __async(this, null, function* () {
      return new Promise((_) => {
        const reply = this._bus.uniqueRpcTopic(topic);
        this.publish(topic, { data, reply }, target);
        this._bus.pull(reply, (data2, bridge, source) => {
          _({ data: data2, bridge, source });
        });
      });
    });
  }
}


/***/ }),

/***/ "../utils-section/messageBus/Config.ts":
/*!*********************************************!*\
  !*** ../utils-section/messageBus/Config.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EMessageType: () => (/* binding */ EMessageType),
/* harmony export */   RPC_RDM_PREFIX: () => (/* binding */ RPC_RDM_PREFIX)
/* harmony export */ });

var EMessageType = /* @__PURE__ */ ((EMessageType2) => {
  EMessageType2["PUBLISH"] = "PUBLISH";
  EMessageType2["SUBSCRIBE"] = "SUBSCRIBE";
  EMessageType2["PUSH"] = "PUSH";
  EMessageType2["PULL"] = "PULL";
  return EMessageType2;
})(EMessageType || {});
const RPC_RDM_PREFIX = `__RPC_RDM_PREFIX__`;


/***/ }),

/***/ "../utils-section/messageBus/MessageBus.ts":
/*!*************************************************!*\
  !*** ../utils-section/messageBus/MessageBus.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MessageBus: () => (/* binding */ MessageBus)
/* harmony export */ });
/* harmony import */ var _Config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Config */ "../utils-section/messageBus/Config.ts");
/* harmony import */ var _MessageBusTask__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./MessageBusTask */ "../utils-section/messageBus/MessageBusTask.ts");
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Utils */ "../utils-section/messageBus/Utils.ts");

var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};



class MessageBus {
  constructor() {
    this._subscribedTasks = {};
    this._pulledTasks = {};
    this._pushedMessages = {};
    this._rpcTicket = 0;
  }
  rpcReply(data, topic, bridge, source) {
    if (bridge) {
      bridge.push(topic, data, source);
      return;
    }
    this.push(topic, data);
  }
  uniqueRpcTopic(topic) {
    return topic + _Config__WEBPACK_IMPORTED_MODULE_0__.RPC_RDM_PREFIX + ++this._rpcTicket;
  }
  publish(topic, data, bridge, source) {
    const tasks = this._subscribedTasks[topic];
    if (tasks instanceof Array) {
      let removedTasks = [];
      for (let i = 0; i < tasks.length; i++) {
        const taskItem = tasks[i];
        if (taskItem.isRunning) {
          taskItem.execute(data, bridge, source);
          continue;
        }
        removedTasks.push(taskItem);
      }
      if (removedTasks.length) {
        for (let i = 0; i < removedTasks.length; i++) {
          const taskItem = removedTasks[i];
          this._subscribedTasks[topic] = (0,_Utils__WEBPACK_IMPORTED_MODULE_2__.remove)(this._subscribedTasks[topic], taskItem);
        }
      }
    }
  }
  subscribe(topic, callback) {
    const taskItem = new _MessageBusTask__WEBPACK_IMPORTED_MODULE_1__.MessageBusTask(callback);
    (0,_Utils__WEBPACK_IMPORTED_MODULE_2__.getOrInitArr)(this._subscribedTasks, topic).push(taskItem);
    return taskItem;
  }
  push(topic, data, bridge, source) {
    let consumed = false;
    const tasks = this._pulledTasks[topic];
    if (tasks instanceof Array) {
      while (tasks.length) {
        const taskItem = tasks.shift();
        if (taskItem && taskItem.isRunning) {
          taskItem.execute(data, bridge, source);
          consumed = true;
          break;
        }
      }
    }
    if (consumed) {
      (0,_Utils__WEBPACK_IMPORTED_MODULE_2__.getOrInitArr)(this._pushedMessages, topic).push({ data, bridge, source });
    }
  }
  pull(topic, callback) {
    const newTaskItem = new _MessageBusTask__WEBPACK_IMPORTED_MODULE_1__.MessageBusTask(callback);
    const messageList = this._pushedMessages[topic];
    if (messageList instanceof Array) {
      const messageItem = messageList.shift();
      if (messageItem) {
        newTaskItem.execute(messageItem.data, messageItem.bridge, messageItem.source);
        if (messageList.length <= 0) {
          delete this._pushedMessages[topic];
        }
      }
      return newTaskItem;
    }
    (0,_Utils__WEBPACK_IMPORTED_MODULE_2__.getOrInitArr)(this._pulledTasks, topic).push(newTaskItem);
    return newTaskItem;
  }
  registeAsyncService(topic, callback) {
    return this.subscribe(topic, (rpcData, bridge, source) => {
      const { data, reply } = rpcData;
      const returnal = callback(data);
      if (returnal instanceof Promise) {
        returnal.then((result) => {
          this.rpcReply(result, reply, bridge, source);
        }).catch((error) => {
          console.error(error);
        });
        return;
      }
      this.rpcReply(returnal, reply, bridge, source);
    });
  }
  asyncRequest(topic, data) {
    return __async(this, null, function* () {
      return new Promise((_) => {
        const reply = this.uniqueRpcTopic(topic);
        this.publish(topic, { data, reply });
        this.pull(reply, (data2, bridge, source) => {
          _({ data: data2, bridge, source });
        });
      });
    });
  }
}


/***/ }),

/***/ "../utils-section/messageBus/MessageBusTask.ts":
/*!*****************************************************!*\
  !*** ../utils-section/messageBus/MessageBusTask.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MessageBusTask: () => (/* binding */ MessageBusTask)
/* harmony export */ });
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Utils */ "../utils-section/messageBus/Utils.ts");


class MessageBusTask {
  constructor(callback) {
    this._callback = callback;
    this._isRunning = true;
  }
  get isRunning() {
    return this._isRunning;
  }
  setCancel() {
    this._isRunning = false;
  }
  execute(data, bridge, source) {
    try {
      const copyData = (0,_Utils__WEBPACK_IMPORTED_MODULE_0__.deepClone)(data);
      this._callback(copyData, bridge, source);
    } catch (e) {
      console.error(e);
    }
  }
}


/***/ }),

/***/ "../utils-section/messageBus/Utils.ts":
/*!********************************************!*\
  !*** ../utils-section/messageBus/Utils.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   deepClone: () => (/* binding */ deepClone),
/* harmony export */   getOrInit: () => (/* binding */ getOrInit),
/* harmony export */   getOrInitArr: () => (/* binding */ getOrInitArr),
/* harmony export */   remove: () => (/* binding */ remove)
/* harmony export */ });

function remove(list, item) {
  const newList = [];
  for (let i = 0; i < list.length; i++) {
    if (list[i] !== item) {
      newList.push(list[i]);
    }
  }
  return newList;
}
function deepClone(data) {
  return traverse(data);
  function traverse(data2) {
    if (typeof data2 !== "object" || data2 === null || data2 instanceof Date || data2 instanceof ArrayBuffer || data2 instanceof Uint8ClampedArray || data2 instanceof Uint8Array || data2 instanceof Uint16Array || data2 instanceof Uint32Array) {
      return data2;
    }
    if (Array.isArray(data2)) {
      return data2.map(traverse);
    }
    const obj = {};
    for (let key in data2) {
      if (data2.hasOwnProperty(key)) {
        obj[key] = traverse(data2[key]);
      }
    }
    return obj;
  }
}
function getOrInit(obj, key, initializer = (key2) => null) {
  let value = obj[key];
  if (typeof value !== "undefined") {
    return value;
  }
  value = initializer(key);
  obj[key] = value;
  return value;
}
function getOrInitArr(obj, key) {
  return getOrInit(obj, key, () => {
    return [];
  });
}


/***/ }),

/***/ "../utils-section/messageBus/WindowMessageBridge.ts":
/*!**********************************************************!*\
  !*** ../utils-section/messageBus/WindowMessageBridge.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   WindowMessageBridge: () => (/* binding */ WindowMessageBridge)
/* harmony export */ });
/* harmony import */ var _BaseMessageBridge__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BaseMessageBridge */ "../utils-section/messageBus/BaseMessageBridge.ts");
/* harmony import */ var _Config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Config */ "../utils-section/messageBus/Config.ts");



class WindowMessageBridge extends _BaseMessageBridge__WEBPACK_IMPORTED_MODULE_0__.BaseMessageBridge {
  constructor(bus) {
    super(bus);
    window.addEventListener(
      "message",
      (e) => {
        this.processRemoteMessage(e.data, e.source);
      },
      false
    );
  }
  postMessage(topic, type, data, target) {
    const messageItem = {
      topic,
      type,
      data
    };
    target && target.postMessage(messageItem, "*");
  }
  publish(topic, message, target) {
    this.postMessage(topic, _Config__WEBPACK_IMPORTED_MODULE_1__.EMessageType.PUBLISH, message, target);
  }
  subscribe(topic, target) {
    if (target === window) {
      throw new Error(`regist remote subscribe from current window is premittied.`);
    }
    this.postMessage(topic, _Config__WEBPACK_IMPORTED_MODULE_1__.EMessageType.SUBSCRIBE, null, target);
  }
  push(topic, message, target) {
    this.postMessage(topic, _Config__WEBPACK_IMPORTED_MODULE_1__.EMessageType.PUSH, message, target);
  }
  pull(topic, target) {
    if (target === window) {
      throw new Error(`regist remote pull from current window is premittied.`);
    }
    this.postMessage(topic, _Config__WEBPACK_IMPORTED_MODULE_1__.EMessageType.PULL, null, target);
  }
}


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry needs to be wrapped in an IIFE because it needs to be isolated against other modules in the chunk.
(() => {
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _$instance_d2FreeTest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./$instance/d2FreeTest */ "./src/$instance/d2FreeTest/index.ts");
/* harmony import */ var _$instance_d2SimpleClock__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./$instance/d2SimpleClock */ "./src/$instance/d2SimpleClock/index.ts");



window.addEventListener("DOMContentLoaded", () => {
  const insValue = new URLSearchParams(window.location.search).get("instance");
  (0,_$instance_d2SimpleClock__WEBPACK_IMPORTED_MODULE_1__.main)();
});

})();

__webpack_exports__ = __webpack_exports__["default"];
/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=main.js.map